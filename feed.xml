<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://che.eclipseprojects.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://che.eclipseprojects.io/" rel="alternate" type="text/html" /><updated>2024-11-29T09:45:38+00:00</updated><id>https://che.eclipseprojects.io/feed.xml</id><title type="html">Eclipse Che Blog</title><subtitle>Eclipse Che runs IDEs in Kubernetes.</subtitle><entry><title type="html">In Kubernetes We Trust</title><link href="https://che.eclipseprojects.io/2024/11/26/@ilya.buziuk-in-kubernetes-we-trust.html" rel="alternate" type="text/html" title="In Kubernetes We Trust" /><published>2024-11-26T00:00:00+00:00</published><updated>2024-11-26T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2024/11/26/@ilya.buziuk/in-kubernetes-we-trust</id><content type="html" xml:base="https://che.eclipseprojects.io/2024/11/26/@ilya.buziuk-in-kubernetes-we-trust.html"><![CDATA[<div class="sect1">
<h2 id="_introduction">Introduction</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Last year, the <a href="https://youtu.be/eIOZq_e-Fjs?si=lecaEpLC5vEb0-Za">"Pros and cons of using Kubernetes as a development platform"</a>  session was presented at <a href="https://www.eclipse.org/events/2023/eclipsecon/">EclipseCon</a> in Ludwigsburg. The main message was that, indeed, <a href="https://kubernetes.io/">Kubernetes</a> is complex and sometimes there are caveats and tradeoffs to make, but it is evolving rapidly with plenty of new features and opportunities available with every release. Today it is time to reflect a bit more on this topic.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_building-an-application-platform-for-developers">Building an application platform for developers</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you are considering building your own development platform it is recommended to read the brilliant <a href="https://www.oreilly.com/library/view/production-kubernetes/9781492092292/">“Production Kubernetes”</a> book, where a multitude of potential options are described in great detail:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/in-kubernetes-we-trust/multitude-of-options-available-to-provide-an-application-platform-to-developers.png" alt="The multitude of options available to provide an application platform to developers">
</div>
</div>
<div class="paragraph">
<p>Figure 1: The multitude of options available to provide an application platform to developers.</p>
</div>
<div class="paragraph">
<p>Of course, you can always craft your own platform from scratch or even decide that the <a href="https://world.hey.com/dhh/why-we-re-leaving-the-cloud-654b47e0">cloud</a>, in general, is not your cup of tea and stop the Cloud Development Environment (CDE) journey right here since local development is good enough for your use-case and works “just fine”. Nevertheless, in <a href="https://eclipse.dev/che/">Eclipse Che</a> we strongly believe in the hybrid cloud strategy, and that Kubernetes is one of the best possible options for building a modern CDE platform for developers because of:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Extensibility</p>
</li>
<li>
<p>Scalability</p>
</li>
<li>
<p>Resource Efficiency</p>
</li>
<li>
<p>Consistency</p>
</li>
<li>
<p>High Availability</p>
</li>
<li>
<p>Control</p>
</li>
<li>
<p>Open Source</p>
</li>
<li>
<p>Community</p>
</li>
<li>
<p>Vendor Neutrality</p>
</li>
<li>
<p>Hybrid-Cloud Nature</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>However, there are a lot of subtle details worth considering when using Kubernetes as the pillar for building an application platform for developers. Some of them are described in the dedicated <a href="https://youtu.be/eIOZq_e-Fjs?si=w6_Nx-v4nwg85QgP">EclipseCon session</a> mentioned in the introduction:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Networking</p>
</li>
<li>
<p>Storage</p>
</li>
<li>
<p>Immutability</p>
</li>
<li>
<p>Permissions</p>
</li>
<li>
<p>CPU Throttling</p>
</li>
<li>
<p>OOM Kill</p>
</li>
<li>
<p>Image Pulling</p>
</li>
<li>
<p>Image Building</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In this article you can find a few more.</p>
</div>
<div class="sect2">
<h3 id="_namespaces">Namespaces</h3>
<div class="paragraph">
<p>While there is no strict limit on the number of namespaces in a Kubernetes cluster, having more than 10,000 is generally not recommended due to potential performance and management overhead. In Eclipse Che for instance, each user is allocated a namespace. If you expect the user base to be large, consider spreading workloads across multiple clusters and potentially leveraging solutions for multi-cluster orchestration.</p>
</div>
</div>
<div class="sect2">
<h3 id="_gitops">GitOps</h3>
<div class="paragraph">
<p>Do NOT manage the Kubernetes clusters manually otherwise you will end up with a snowflake environment. Application definitions, configurations, and environments should be declarative and version controlled. Application deployment and lifecycle management should be automated, auditable, and easy to understand. Using a GitOps CD solution for Kubernetes such as <a href="https://argo-cd.readthedocs.io/">Argo CD</a> is a must-have when managing a complex application platform for developers.</p>
</div>
</div>
<div class="sect2">
<h3 id="_root-access">Root Access</h3>
<div class="paragraph">
<p>Containers running as root on a cluster are a major security risk since they significantly increase the attack surface, potentially allowing root access over the host node. That is the main reason why the containers on <a href="https://www.redhat.com/en/technologies/cloud-computing/openshift">OpenShift</a> are running using <a href="https://cookbook.openshift.org/users-and-role-based-access-control/why-do-my-applications-run-as-a-random-user-id.html">Arbitrary User IDs</a> by default. This approach provides additional security against processes escaping the container due to a container engine vulnerability, thereby achieving escalated permissions on the host node. This basic principle applies to CDEs as well. It might look like a trade-off between security and usability, when users cannot easily install OS-scoped packages in the runtime. However, dynamically installing packages in a running workspace is an anti-pattern - containers are supposed to be immutable, and installing anything inside a running container is not recommended since all the packages will vanish after the restart.  There is also the added benefit of maintaining workspace consistency across different users by adhering to the immutable principle for container images used in the CDE.</p>
</div>
</div>
<div class="sect2">
<h3 id="_emptydir-volumes">emptyDir Volumes</h3>
<div class="paragraph">
<p>Volume mounting could be by far the most time-consuming operation during pod startup. Consider leveraging ephemeral workloads whenever relevant which are using  <a href="https://kubernetes.io/docs/concepts/storage/volumes/#emptydir">emptyDir</a> volumes under the hood. In the context of Eclipse Che, those are ephemeral workspaces that could be particularly useful for developer routines like code review, with the dedicated storage type defined on the <a href="https://devfile.io/">devfile</a> level:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>schemaVersion: 2.3.0
metadata:
  generateName: quarkus-api-example
attributes:
  controller.devfile.io/storage-type: ephemeral</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_autoscaling">Autoscaling</h3>
<div class="paragraph">
<p>Although autoscaling is a powerful Kubernetes feature, you cannot always fall back on it, and should always consider predictive scaling by analyzing the load data on your environment to detect daily or weekly usage patterns. If your workloads follow some pattern, e.g. there are huge spikes based on the time of the day, you should consider provisioning worker nodes in advance (e.g. a lot of users turn on their smart speakers in the morning between 7 - 9 am, and there is a huge spike in the requests that on the infrastructure level is predicted and handled in advance).</p>
</div>
</div>
<div class="sect2">
<h3 id="_cpu-limits">CPU Limits</h3>
<div class="paragraph">
<p>Setting CPU Limits in general is a contended topic for production workloads, since If you apply them the workloads are throttled by definition. Limits for CPU for soft-tenancy pods are probably not going to be helpful unless you are approaching very dense setups (&gt; 10 pods per core) - otherwise, you will waste more CPU by throttling than you save. CPU Limits definitely increase tail latencies for most non-predictable workloads (almost all request-driven use cases) in a way that will result in a worse overall application environment for most users most of the time (because of how limits are sliced).  At lower pods per core, you are almost certainly trading a false security for a worse quality of service for the workloads you are running on Kubernetes.</p>
</div>
<div class="paragraph">
<p>CPU Limits are most useful when dealing with bad actors on your own platform, and even then, there are far more effective ways of dealing with bad actors like detection and account blocking.  However, in the case of CDEs, you may consider applying the limits on the namespace level to prevent developers from accidentally saturating a compute node. If you apply limits, you must make sure the limits are high enough to allow normal bursts of CPU usage during the inner-loop activities.  Otherwise, developers may experience unexpected performance issues during CPU-intensive activities.</p>
</div>
</div>
<div class="sect2">
<h3 id="_ephemeral-containers">Ephemeral Containers</h3>
<div class="paragraph">
<p><a href="https://kubernetes.io/docs/concepts/workloads/pods/ephemeral-containers/">Ephemeral Containers</a> is a great example of how Kubernetes features are providing new opportunities for building application platforms for developers every release. Last year we talked about Ephemeral Containers at EclipseCon as a potential new opportunity for Cloud Development Environments. This year a <a href="https://github.com/devfile/kubectl-debug-ide">kubectl plugin</a> for debugging Kubernetes pods from a CDE, rather than the CLI has been presented at <a href="https://youtu.be/fg57Zmm4eN4?si=8LyyRsud6lMJg59h">KubeCon</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_dynamic-resource-allocation-dra">Dynamic Resource Allocation (DRA)</h3>
<div class="paragraph">
<p><a href="https://kubernetes.io/docs/concepts/scheduling-eviction/dynamic-resource-allocation/">Dynamic Resource Allocation (DRA)</a> is yet another striking example of how Kubernetes features are providing new opportunities for developers with every release. With the push for GPU-centric applications, DRA was presented all throughout the last <a href="https://notes.elmiko.dev/2024/11/19/kubecon-na-2024-retrospective.html">KubeCon North America 2024</a>. It speaks to the popularity of AI-related workloads that require specific resources, and while today DRA mostly targets GPUs, it is very well possible that one day we will be talking about DRA for everything from CPUs and memory to customized hardware accelerators in the future.</p>
</div>
</div>
<div class="sect2">
<h3 id="_release-notes">Release Notes</h3>
<div class="paragraph">
<p>To maximize the potential of your Kubernetes-based developer platform, consistently review the <a href="https://kubernetes.io/releases/notes/">Release Notes</a>. They offer a treasury of opportunities for innovative features,  performance enhancements, optimizations, recommended configurations, best practices, and strategic planning based on future roadmap insights.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_adoption">Adoption</h2>
<div class="sectionbody">
<div class="paragraph">
<p>For the last few years, we have seen a spike in the adoption of <a href="https://eclipse.dev/che/">Eclipse Che</a> and the downstream product <a href="https://developers.redhat.com/products/openshift-dev-spaces">Red Hat OpenShift Dev Spaces</a> built on top of it. Multiple success stories when the Kubernetes-based platform for provisioning CDEs to enterprise teams is deployed across public, private, and hybrid environments motivate and encourage us every day. Here are just a few public references:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>EPAM Systems deploys Eclipse Che on <a href="https://che.eclipseprojects.io/2022/07/25/@karatkep-installing-eclipse-che-on-aks.html">Azure Kubernetes Service (AKS)</a>.</p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=NYCFzNDdXTk">Ford Motor Company</a> uses fit-for-purpose OpenShift clusters and a dedicated Kubernetes Operator for managing CDEs.</p>
</li>
<li>
<p><a href="https://www.redhat.com/en/success-stories/capgemini">Capgemini</a> accelerates digital service development for the Federal Information Technology Center (ITZBund) using Red Hat OpenShift Dev Spaces Operator in combination with <a href="https://docs.nvidia.com/datacenter/cloud-native/gpu-operator/latest/index.html">NVIDIA vGPU Operator</a> for managing CDEs in the 100% air-gapped environment, isolated from the internet.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We trust in Kubernetes and do believe in the hybrid cloud. Open Source is in our DNA.</p>
</div>
</div>
</div>]]></content><author><name>Ilya Buziuk</name></author><summary type="html"><![CDATA[Building an application platform for developers on Kubernetes]]></summary></entry><entry><title type="html">Boosting CDE Security in a Kubernetes cluster: A Guide to new features</title><link href="https://che.eclipseprojects.io/2024/10/28/@tolusha-boosting-cde-security-on-kubernetes-cluster.html" rel="alternate" type="text/html" title="Boosting CDE Security in a Kubernetes cluster: A Guide to new features" /><published>2024-10-28T00:00:00+00:00</published><updated>2024-10-28T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2024/10/28/@tolusha/boosting-cde-security-on-kubernetes-cluster</id><content type="html" xml:base="https://che.eclipseprojects.io/2024/10/28/@tolusha-boosting-cde-security-on-kubernetes-cluster.html"><![CDATA[<div class="sect1">
<h2 id="_introduction">Introduction</h2>
<div class="sectionbody">
<div class="paragraph">
<p>As organizations transition to cloud-native development, maintaining control, security, and flexibility in development environments becomes critical. Eclipse Che is a powerful Kubernetes-native IDE that offers administrators tools for ensuring security and resource efficiency. In this post, we&#8217;ll look at three new Eclipse Che features that improve security and resource control in your development environments.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_limiting-the-number-of-simultaneous-workspaces">Limiting the Number of Simultaneous Workspaces</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Effective resource management is critical in cloud-based environments, as uncontrolled workspace development can quickly deplete resources and degrade system performance. To mitigate this risk, Eclipse Che now has a functionality that restricts the amount of running workspaces per cluster.</p>
</div>
<div class="paragraph">
<p>Administrators can use this feature to limit the amount of workspaces that can run at the same time, reducing resource misuse, supporting fair allocation of resources among teams, and increasing overall efficiency.</p>
</div>
<div class="paragraph">
<p>In the example below, we set the maximum number of running workspaces per cluster to 20:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="shell">kubectl patch checluster/eclipse-che <span style="color: #ae81ff">\</span>
  <span style="color: #f92672">--namespace</span> eclipse-che <span style="color: #ae81ff">\</span>
  <span style="color: #f92672">--type</span><span style="color: #f92672;font-weight: bold">=</span><span style="color: #e6db74">'merge'</span> <span style="color: #f92672">-p</span> <span style="color: #ae81ff">\</span>
    <span style="color: #e6db74">'{"spec":
        {"devEnvironments":
          {"maxNumberOfRunningWorkspacesPerCluster": 20}
        }
     }'</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If a user exceeds the workspace limit, they will receive a warning message during workspace startup: "Exceeded the cluster limit for running DevWorkspaces"</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/boosting-cde-security-on-kubernetes-cluster/exceeded-the-cluster-limit-for-running-devworkspaces.png" alt="Exceeded the cluster limit for running DevWorkspaces">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>To learn more about configuring workspace limits, follow the <a href="https://eclipse.dev/che/docs/stable/administration-guide/limiting-the-number-of-workspaces-that-all-users-can-run-simultaneously">Eclipse Che documentation</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_untrusted-repository-warning">Untrusted Repository Warning</h2>
<div class="sectionbody">
<div class="paragraph">
<p>It is not recommended to create workspaces from unknown or untrusted repositories automatically. When a user tries to create a workspace in Eclipse Che, a warning window appears on the dashboard, requesting confirmation that they trust the repository before proceeding.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/boosting-cde-security-on-kubernetes-cluster/do-you-trust-the-authors-of-this-repository.png" alt="URL is not permitted for creating a workspace">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_configuring-allowed-urls">Configuring Allowed URLs</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This feature ensures that developer workspaces can only be launched from pre-approved, secure URLs. Organizations can prevent workspaces from being started with unwanted URLs by creating a allowlist of trusted domains.</p>
</div>
<div class="paragraph">
<p>In the example below, we configure the allowed URLs to only permit connections to GitLab:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="shell">kubectl patch checluster/eclipse-che <span style="color: #ae81ff">\</span>
    <span style="color: #f92672">--namespace</span> eclipse-che <span style="color: #ae81ff">\</span>
    <span style="color: #f92672">--type</span><span style="color: #f92672;font-weight: bold">=</span><span style="color: #e6db74">'merge'</span> <span style="color: #ae81ff">\</span>
    <span style="color: #f92672">-p</span> <span style="color: #ae81ff">\</span>
        <span style="color: #e6db74">'{
           "spec": {
             "devEnvironments": {
               "allowedSources": {
                 "urls": ["https://gitlab.com/*"]
               }
             }
           }
         }'</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If a user attempts to create a workspace with a URL other than GitLab, they will receive an error message: "URL is not permitted for creating a workspace".</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/boosting-cde-security-on-kubernetes-cluster/url-is-not-permitted-for-creating-a-workspace.png" alt="URL is not permitted for creating a workspace">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>To learn more about configuring allowed URLs, follow the <a href="https://eclipse.dev/che/docs/stable/administration-guide/configuring-allowed-urls-for-cloud-development-environments/">Eclipse Che documentation</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Eclipse Che&#8217;s new security features, such as limiting simultaneous workspaces and configuring allowed URLs, give administrators greater control over resource usage and workspace security in cloud-native environments. Implementing these updates allows organizations to improve the efficiency and safety of their development workflows, resulting in a secure and well-regulated workspace.</p>
</div>
</div>
</div>]]></content><author><name>Anatolii Bazko</name></author><summary type="html"><![CDATA[Boosting CDE Security on Kubernetes cluster: A Guide to new features]]></summary></entry><entry><title type="html">Writing documentation in Eclipse Che</title><link href="https://che.eclipseprojects.io/2024/08/09/@deerskindoll-writing-docs-with-che.html" rel="alternate" type="text/html" title="Writing documentation in Eclipse Che" /><published>2024-08-09T00:00:00+00:00</published><updated>2024-08-09T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2024/08/09/@deerskindoll/writing-docs-with-che</id><content type="html" xml:base="https://che.eclipseprojects.io/2024/08/09/@deerskindoll-writing-docs-with-che.html"><![CDATA[<div class="sect1">
<h2 id="_the-quick-and-easy-way-to-create-documentation">The quick and easy way to create documentation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>With Eclipse Che, writing technical documentation is even easier than you think.
Let&#8217;s use the <a href="https://github.com/eclipse-che/che-docs">Eclipse Che documentation repository on GitHub</a>.
The che-docs repository was created with community contribution in mind,
featuring tools you need to create and test your content.
And from the initial draft to submitting a PR,
everything is happening in the environment you&#8217;re already familiar with: an Eclipse Che cloud development environment (CDE).</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/contributing-to-eclipse-che-docs/workspace-with-preview.png" alt="An Eclipse Che CDE created from the che-docs repository.">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_getting-started">Getting started</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Click the Developer Workspace button in the che-docs repository <a href="https://github.com/eclipse-che/che-docs?tab=readme-ov-file#eclipse-che-documentation-project">README</a> file.
This opens a clone of the repository in an Eclipse Che workspace hosted
by Red Hat in the <a href="https://developers.redhat.com/developer-sandbox">Developer Sandbox</a>.
Alternatively, you can click right here:</p>
</div>
<div class="imageblock">
<div class="content">
<a class="image" href="https://workspaces.openshift.com#https://github.com/eclipse/che-docs"><img src="https://www.eclipse.org/che/contribute.svg" alt="contribute"></a>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_how-does-it-work">How does it work?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>What about the che-docs repository makes using an Eclipse Che CDE to contribute content so convenient? The following two elements:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://eclipse.dev/che/docs/stable/end-user-guide/devfile-introduction/">devfile</a></p>
</li>
<li>
<p>list of <a href="https://eclipse.dev/che/docs/stable/end-user-guide/microsoft-visual-studio-code-open-source-ide/#automating-installation-of-microsoft-visual-studio-code-extensions-at-workspace-startup">automatically installed Microsoft Visual Studio Code extensions</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Let&#8217;s look at the devfile first.
The che-docs repository contains a simple <a href="https://github.com/eclipse-che/che-docs/blob/main/devfile.yaml">devfile</a>
that defines the basic features of the che-docs workspace.
It also includes a command for building a preview of your newly created content:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="code"># sh tools/preview.sh</code></pre>
</div>
</div>
<div class="paragraph">
<p>This is helpful not only for checking the layout of the document but also for making sure that embedded images,
links and code blocks are displayed correctly.
Additionally, the preview script features a Vale-based grammar check you can also use separately.
More about this in a moment.</p>
</div>
<div class="paragraph">
<p>By default, the che-docs workspace launches with Visual Studio Code - Open Source ("Code - OSS") as the IDE.
This is relevant for the second file mentioned above.
The che-docs repository features an <a href="https://github.com/eclipse-che/che-docs/blob/main/.vscode/extensions.json">extensions.json</a> file listing Visual Studio Code extensions
you need for writing Eclipse Che content.
When you launch the che-docs workspace for the first time,
these extensions are installed automatically:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/contributing-to-eclipse-che-docs/extensions.png" alt="Overview of automatically installed extensions, including the Vale extension.">
</div>
</div>
<div class="paragraph">
<p>You can start working immediately,
with minimal additional setup required.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_getting-started-2">Getting started</h2>
<div class="sectionbody">
<div class="paragraph">
<p>By launching the che-docs workspace, you&#8217;re almost ready to go:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>You have a clone of the che-docs repository</p>
</li>
<li>
<p>You have an IDE to write in.</p>
</li>
<li>
<p>You have required extensions installed.</p>
</li>
<li>
<p>You have a preview build script.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>There are only three things left to do.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Read the <a href="https://github.com/eclipse-che/che-docs/blob/main/CONTRIBUTING.adoc">contribution guidelines</a>.</p>
</li>
<li>
<p>Read how to <a href="https://redhat-documentation.github.io/supplementary-style-guide/#technical-examples">document commands</a> for Eclipse Che documentation.</p>
</li>
<li>
<p>Update the grammar- and spelling-checking <a href="https://marketplace.visualstudio.com/items?itemName=ChrisChinchilla.vale-vscode">Vale extension</a> by running the <code>vale-sync</code> command defined in the <a href="https://github.com/eclipse-che/che-docs/blob/main/devfile.yaml">devfile</a> or directly execute it in the terminal:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="code"># vale sync</code></pre>
</div>
</div>
</li>
</ol>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The Vale extension included in the che-docs repository follows the grammatical,
spelling and stylistic rules from the <a href="https://redhat-documentation.github.io/supplementary-style-guide/">Red Hat supplementary style guide</a>.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_writing-tips">Writing tips</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A good technical document is easy to read and easy to follow.
Here are a few tips that will help you write great technical content:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Keep it simple. Avoid self-referential language ("this article is about&#8230;&#8203;"), overly long introductions, and deep-dives into the feature&#8217;s history.</p>
</li>
<li>
<p>Keep it accessible. Short paragraphs, sentences and words make your content easy to read.</p>
</li>
<li>
<p>Keep the focus on the user. Write the content around what the user can achieve when they follow your instructions.</p>
</li>
<li>
<p>Keep passive voice to a minimum.</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/contributing-to-eclipse-che-docs/pp-hemingway.png" alt="The famous opening lines of Jane Austen&#8217;s Pride and Prejudice novel don&#8217;t follow any of the writing tips listed in this blog post. At grade 16, they also have a very high readability score in the Hemingway Editor. Your technical document should have a readability score between grade 9 and 11.">
</div>
</div>
<div class="paragraph">
<p>If you want to learn more about technical writing in general,
check out the <a href="https://developers.google.com/style">Google developer documentation style guide</a>.
The readability test is a part of the <a href="https://hemingwayapp.com/">Hemingway Editor</a>.</p>
</div>
<div class="paragraph">
<p>Happy writing!</p>
</div>
</div>
</div>]]></content><author><name>Jana Vrbkova</name></author><summary type="html"><![CDATA[Write documentation using an Eclipse Che CDE.]]></summary></entry><entry><title type="html">IntelliJ IDEA as a desktop editor for Eclipse Che Cloud Development Environment (CDE) running on OpenShift</title><link href="https://che.eclipseprojects.io/2024/07/08/@artem-idea-editor.html" rel="alternate" type="text/html" title="IntelliJ IDEA as a desktop editor for Eclipse Che Cloud Development Environment (CDE) running on OpenShift" /><published>2024-07-08T00:00:00+00:00</published><updated>2024-07-08T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2024/07/08/@artem/idea-editor</id><content type="html" xml:base="https://che.eclipseprojects.io/2024/07/08/@artem-idea-editor.html"><![CDATA[<div class="paragraph">
<p>In this blog post, we&#8217;ll look at the integration of Eclipse Che with IntelliJ IDEA.</p>
</div>
<div class="paragraph">
<p>It brings the local development experience to the cloud allowing developers to use their familiar IDE when working with the Eclipse Che CDE.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/idea-editor/main.png" alt="Eclipse Che and JetBrains Gateway integration">
</div>
</div>
<div class="sect1">
<h2 id="_why-another-integration-with-jetbrains-ides">Why another integration with JetBrains IDEs?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In addition to Visual Studio Code - Open Source ("Code - OSS"), Eclipse Che also <a href="https://github.com/che-incubator/jetbrains-editor-images/">provides</a> the in-browser variant of IntelliJ IDEA Community Edition as one of the editor options to use when working with your CDE. It&#8217;s based on the JetBrains Projector.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
"Projector is a self-hosted technology that runs IntelliJ-based IDEs and Swing-based apps on the server, allowing you to access them from anywhere using browsers and native apps."&#8201;&#8212;&#8201;From the <a href="https://blog.jetbrains.com/blog/2021/03/11/projector-is-out/">JetBrains blog</a>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>JetBrains <a href="https://lp.jetbrains.com/projector/">suspended</a> the development and support of the Projector as a standalone project and introduced a new product - <a href="https://www.jetbrains.com/remote-development/gateway/">JetBrains Gateway</a>. It allows the use of the desktop IDE instead of the in-browser web client, and we integrated its support into Eclipse Che.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_how-to-connect-desktop-intellij-idea-to-your-che-cde">How to connect desktop IntelliJ IDEA to your Che CDE?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>There are a few prerequisites for connecting IntelliJ IDEA to a CDE.</p>
</div>
<div class="paragraph">
<p><strong><em>Prerequisite 1: Gateway application</em></strong>
&#160;<br>
Install the JetBrains Gateway application by following the instructions from the <a href="https://www.jetbrains.com/help/idea/jetbrains-gateway.html">official documentation</a>.</p>
</div>
<div class="paragraph">
<p><strong><em>Prerequisite 2: Gateway plugin</em></strong>
&#160;<br>
Install <a href="https://plugins.jetbrains.com/plugin/24234-openshift-dev-spaces">the Gateway plugin</a> which provides a connector for establishing a connection between your local JetBrains IDE and your remote CDE running on the OpenShift cluster:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>From the Gateway main window, open the <strong>Manage Providers</strong> dialog.</p>
</li>
<li>
<p>Search for the <strong>OpenShift Dev Spaces</strong> plugin on the <strong>Marketplace</strong> tab and install it.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p><strong><em>Prerequisite 3: OpenShift CLI</em></strong>
&#160;<br>
The Gateway plugin relies on the <a href="https://docs.openshift.com/container-platform/4.16/cli_reference/openshift_cli/getting-started-cli.html">OpenShift CLI</a> to access an OpenShift cluster’s API server for managing CDEs.</p>
</div>
<div class="paragraph">
<p>Install the OpenShift CLI following the instructions from the <a href="https://docs.openshift.com/container-platform/4.15/cli_reference/openshift_cli/getting-started-cli.html#installing-openshift-cli">official documentation</a>.</p>
</div>
<div class="sect2">
<h3 id="_usage-scenarios">Usage scenarios</h3>
<div class="paragraph">
<p>JetBrains Gateway provides two main workflows:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Server-to-client flow implies a CDE is running with the specific IDE development server</p>
</li>
<li>
<p>Client-to-server flow implies the user chooses which IDE should be downloaded and running as a development server in a CDE</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Currently, Eclipse Che supports only server-to-client flow with the IntelliJ IDEA as a remote development server. In the future, we may add support for client-to-server flow as well.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>There are two options for connecting your desktop IDEA to a CDE, depending on your needs:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>using the Eclipse Che User Dashboard</p>
</li>
<li>
<p>using the JetBrains Gateway application</p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="_option-1-from-the-eclipse-che-user-dashboard">Option 1: from the Eclipse Che User Dashboard</h4>
<div class="paragraph">
<p>This option suits all needs and doesn&#8217;t require you to use the Gateway application directly.</p>
</div>
<div class="paragraph">
<p>It has one additional prerequisite - your local OpenShift CLI tool (oc) should be logged into your OpenShift cluster. See <a href="https://docs.openshift.com/container-platform/4.15/cli_reference/openshift_cli/getting-started-cli.html#cli-logging-in_cli-developer-commands">official documentaion</a> for all possible ways of logging in or follow the next steps that describe the most common flow:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Go to the <strong>Applications</strong> menu on Eclipse Che User Dashboard and choose the <strong>OpenShift console</strong>.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/img/idea-editor/os-console.png" alt="OpenShift console">
</div>
</div>
</li>
<li>
<p>Go to the top-right menu on the opened console page and choose the <strong>Copy login command</strong>.</p>
<div class="imageblock">
<div class="content">
<img src="/assets/img/idea-editor/oc-login.png" alt="Copy login command">
</div>
</div>
</li>
<li>
<p>Copy the displayed <strong>oc login</strong> command and execute it in your local terminal.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>How to use it?</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Use the User Dashboard to spin up a new or start an existing Workspace. When running a new Workspace, make sure the right editor is chosen:</p>
<div class="imageblock">
<div class="content">
<img src="/assets/img/idea-editor/editor-selector.png" alt="Editor Selector">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
</li>
<li>
<p>Wait for the prompt to open your local JetBrains Gateway application to appear:</p>
<div class="imageblock">
<div class="content">
<img src="/assets/img/idea-editor/open-prompt.png" alt="Open Gateway prompt">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
</li>
<li>
<p>Click the <strong>Open Gateway</strong> button to start your local IDEA connected to your CDE:</p>
<div class="imageblock">
<div class="content">
<img src="/assets/img/idea-editor/connecting.png" alt="Connecting to remote host">
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>You can try it out at <a href="https://developers.redhat.com/developer-sandbox/ide">Red Hat Developer Sandbox</a>. Clicking on <a href="https://workspaces.openshift.com/f?url=https://github.com/che-samples/web-nodejs-sample&amp;che-editor=https://eclipse-che.github.io/che-plugin-registry/main/v3/plugins/che-incubator/che-idea-server/next/devfile.yaml&amp;policies.create=peruser">this URL</a> automatically starts a CDE on the Developer Sandbox with a sample project imported. Once the CDE is ready, you’ll be asked to start a local IDEA for connecting to the CDE.</p>
</div>
</div>
<div class="sect3">
<h4 id="_option-2-from-the-jetbrains-gateway-application">Option 2: from the JetBrains Gateway application</h4>
<div class="paragraph">
<p>This option is more suitable when you want to continue working with an existing CDE, without accessing the Eclipse Che User Dashboard.</p>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<div class="title">Important</div>
</td>
<td class="content">
When using the JetBrains Gateway application the creation of a new CDE is currently not allowed, and you can only connect to already-created development environments.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>This option has no additional prerequisites like having the local OpenShift CLI tool (<strong>oc</strong>) logged in your OpenShift cluster. But if you do log in, the Gateway application will use the CLI&#8217;s login session which means you will not need to enter your login info from the Gateway application every time you use it.</p>
</div>
<div class="paragraph">
<p>How to use it?</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Open the Gateway application and click the <strong>Connect to Dev Spaces</strong> button:</p>
<div class="imageblock">
<div class="content">
<img src="/assets/img/idea-editor/gateway-window.png" alt="Gateway window">
</div>
</div>
</li>
<li>
<p>In the next step, the Gateway plugin will try to detect if your local OpenShift CLI tool (<strong>oc</strong>) is logged into your OpenShift cluster to read the OpenShift API server connection parameters from the CLI config file. You can also provide the connection parameters manually:</p>
<div class="imageblock">
<div class="content">
<img src="/assets/img/idea-editor/login-window.png" alt="Login to API server">
</div>
</div>
<div class="paragraph">
<p>After clicking the <strong>Check connection and continue</strong> button, the plugin will try to read your existing CDEs.</p>
</div>
</li>
<li>
<p>Choose an existing CDE and click the <strong>Connect</strong> button:</p>
<div class="imageblock">
<div class="content">
<img src="/assets/img/idea-editor/select-ds.png" alt="DevWorkspace selection">
</div>
</div>
<div class="admonitionblock warning">
<table>
<tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
Currently, all CDEs are listed regardless of the configured editor. As Eclipse Che doesn’t allow the user to switch the editor for an already running CDE, ensure the right one is chosen.
</td>
</tr>
</table>
</div>
</li>
<li>
<p>Clicking the <strong>Connect</strong> button starts the selected CDE and runs your local IntelliJ IDEA connected to your remote development environment:</p>
<div class="imageblock">
<div class="content">
<img src="/assets/img/idea-editor/connecting.png" alt="Connecting to remote host">
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Integration of Eclipse Che with IntelliJ IDEA Ultimate via JetBrains Gateway enables the user to harness the advantages that remote development provides while retaining the convenience of a local development experience.</p>
</div>
<div class="paragraph">
<p>If you&#8217;re interested in learning more about the technical details of how the described solution works under the hood, check the following links:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://www.jetbrains.com/help/idea/remote-development-overview.html#defs">JetBrains Gateway architecture</a>.</p>
</li>
<li>
<p>Eclipse Che <a href="https://github.com/che-incubator/che-idea-dev-server">editor image</a> that runs InteliJ IDEA dev server.</p>
</li>
<li>
<p>Eclipse Che <a href="https://github.com/eclipse-che/che-operator/blob/main/editors-definitions/che-idea-server-latest.yaml">editor definition for IDEA server</a>.</p>
</li>
<li>
<p><a href="https://github.com/redhat-developer/devspaces-gateway-plugin/">IntelliJ Gateway Connector Plugin</a>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If you found a bug you want to file, or have any idea on improving the described solution, feel free to describe it in <a href="https://github.com/eclipse-che/che/issues">Che&#8217;s main issue tracker</a>.</p>
</div>
<div class="paragraph">
<p>Thank you for reading and happy coding!</p>
</div>
</div>
</div>]]></content><author><name>Artem Zatsarynnyi</name></author><summary type="html"><![CDATA[Integration of Eclipse Che running on OpenShift with IntelliJ IDEA Ultimate using JetBrains Gateway.]]></summary></entry><entry><title type="html">Introducing the Devfile AI Assistant</title><link href="https://che.eclipseprojects.io/2024/06/26/@tolusha-devfile-ai-assistant.html" rel="alternate" type="text/html" title="Introducing the Devfile AI Assistant" /><published>2024-06-26T00:00:00+00:00</published><updated>2024-06-26T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2024/06/26/@tolusha/devfile-ai-assistant</id><content type="html" xml:base="https://che.eclipseprojects.io/2024/06/26/@tolusha-devfile-ai-assistant.html"><![CDATA[<div class="sect1">
<h2 id="_introducing-the-devfile-ai-assistant">Introducing the Devfile AI Assistant</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In software development, it&#8217;s important to be efficient. Whether you&#8217;re an experienced developer or just starting, setting up your development environment can be complex and time-consuming. That&#8217;s where the <a href="https://chatgpt.com/g/g-Bm20CP2Rp-devfile-assistant">Devfile AI Assistant</a> comes in. It&#8217;s designed to help developers create devfiles easily without needing in-depth knowledge of the devfile syntax or structure. It uses a <a href="https://devfile.io">devfile knowledge base</a> to help you craft a devfile, making sure your development environment is set up right.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Another tool that simplifies creating devfile is the <a href="https://github.com/devfile/vscode-walkthrough-extension">VS Code Walkthrough Extension for Devfile</a>. It provides an interactive guide to help users understand and utilize devfiles within Visual Studio Code. Using a wizard, you can easily create a devfile to customize your Cloud Development Environment.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_what-is-a-devfile">What is a devfile?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Devfiles are configuration files that define development environments. They specify the components, commands, events etc. that make up a development workspace. They play a central role in the workflow of Eclipse Che.</p>
</div>
<div class="paragraph">
<p>In Eclipse Che, devfiles are used to automate the setup of development environments. By providing a devfile, developers can ensure a consistent environment across the team, getting rid of the "works on my machine" problems. When a devfile is applied, Eclipse Che provisions the specified containers, clones the necessary repositories, and sets up the workspace with all the tools and dependencies required for development. This makes them an essential tool for modern cloud-based development.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/devfile-ai-assistant/devfile-eclipse-che-cde.png" alt="Devfile&#8594;Eclipse-Che&#8594;CDE">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_step-by-step-example-of-how-to-create-a-devfile">Step-by-step example of how to create a devfile</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Let&#8217;s check out some real-life examples of how the Devfile AI Assistant can help you in creating devfiles for your projects.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Start by providing a basic devfile.</p>
<div class="paragraph">
<p><strong>Request:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code>Provide a basic devfile.</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Response:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">schemaVersion</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2.3.0</span>
<span style="color: #a6e22e">metadata</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">basic-devfile</span>
<span style="color: #a6e22e">components</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">tools</span>
    <span style="color: #a6e22e">container</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">image</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">quay.io/devfile/universal-developer-image:latest</span></code></pre>
</div>
</div>
</li>
<li>
<p>Add a project to the devfile.</p>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<div class="title">Important</div>
</td>
<td class="content">
Even though it is possible to define projects in a devfile explicitly, it is recommended to add <code>.devfile.yaml</code> or <code>devfile.yaml</code> file to the root of the repository which allows skipping the project definition on the devfile level.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p><strong>Request:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code>Add https://github.com/eclipse-che/che-server git project.</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Response:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">schemaVersion</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2.3.0</span>
<span style="color: #a6e22e">metadata</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">basic-devfile</span>
<span style="color: #a6e22e">components</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">tools</span>
    <span style="color: #a6e22e">container</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">image</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">quay.io/devfile/universal-developer-image:latest</span>
<span style="color: #a6e22e">projects</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">che-server</span>
    <span style="color: #a6e22e">git</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">remotes</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">origin</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">https://github.com/eclipse-che/che-server.git</span></code></pre>
</div>
</div>
</li>
<li>
<p>Add a new component to the devfile.</p>
<div class="paragraph">
<p><strong>Request:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code>Add PostgreSQL component.</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Response:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">schemaVersion</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2.3.0</span>
<span style="color: #a6e22e">metadata</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">devfile</span>
<span style="color: #a6e22e">components</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">tools</span>
    <span style="color: #a6e22e">container</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">image</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">quay.io/devfile/universal-developer-image:latest</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">postgres</span>
    <span style="color: #a6e22e">container</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">image</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">postgres:latest</span>
      <span style="color: #a6e22e">env</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">POSTGRES_DB</span>
          <span style="color: #a6e22e">value</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">mydatabase</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">POSTGRES_USER</span>
          <span style="color: #a6e22e">value</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">user</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">POSTGRES_PASSWORD</span>
          <span style="color: #a6e22e">value</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">password</span>
<span style="color: #a6e22e">projects</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">che-server</span>
    <span style="color: #a6e22e">git</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">remotes</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">origin</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">https://github.com/eclipse-che/che-server.git</span></code></pre>
</div>
</div>
</li>
<li>
<p>Add a volume to the devfile.</p>
<div class="paragraph">
<p><strong>Request:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code>Add 2Gi volume in home user directory to store Maven artifacts.</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Response:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">schemaVersion</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2.3.0</span>
<span style="color: #a6e22e">metadata</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">devfile</span>
<span style="color: #a6e22e">components</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">tools</span>
    <span style="color: #a6e22e">container</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">image</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">quay.io/devfile/universal-developer-image:latest</span>
      <span style="color: #a6e22e">volumeMounts</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">maven-artifacts</span>
          <span style="color: #a6e22e">path</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">/home/user/.m2</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">postgres</span>
    <span style="color: #a6e22e">container</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">image</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">postgres:latest</span>
      <span style="color: #a6e22e">env</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">POSTGRES_DB</span>
          <span style="color: #a6e22e">value</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">mydatabase</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">POSTGRES_USER</span>
          <span style="color: #a6e22e">value</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">user</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">POSTGRES_PASSWORD</span>
          <span style="color: #a6e22e">value</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">password</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">maven-artifacts</span>
    <span style="color: #a6e22e">volume</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">size</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2Gi</span>
<span style="color: #a6e22e">projects</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">che-server</span>
    <span style="color: #a6e22e">git</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">remotes</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">origin</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">https://github.com/eclipse-che/che-server.git</span></code></pre>
</div>
</div>
</li>
<li>
<p>Add command to the devfile.</p>
<div class="paragraph">
<p><strong>Request:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code>Add command to build a java project.</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Response:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">schemaVersion</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2.3.0</span>
<span style="color: #a6e22e">metadata</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">devfile</span>
<span style="color: #a6e22e">components</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">tools</span>
    <span style="color: #a6e22e">container</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">image</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">quay.io/devfile/universal-developer-image:latest</span>
      <span style="color: #a6e22e">volumeMounts</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">maven-artifacts</span>
          <span style="color: #a6e22e">path</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">/home/user/.m2</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">postgres</span>
    <span style="color: #a6e22e">container</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">image</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">postgres:latest</span>
      <span style="color: #a6e22e">env</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">POSTGRES_DB</span>
          <span style="color: #a6e22e">value</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">mydatabase</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">POSTGRES_USER</span>
          <span style="color: #a6e22e">value</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">user</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">POSTGRES_PASSWORD</span>
          <span style="color: #a6e22e">value</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">password</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">maven-artifacts</span>
    <span style="color: #a6e22e">volume</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">size</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2Gi</span>
<span style="color: #a6e22e">projects</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">che-server</span>
    <span style="color: #a6e22e">git</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">remotes</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">origin</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">https://github.com/eclipse-che/che-server.git</span>
<span style="color: #a6e22e">commands</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">id</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">build-java-project</span>
    <span style="color: #a6e22e">exec</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">commandLine</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">mvn clean install</span>
      <span style="color: #a6e22e">component</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">tools</span>
      <span style="color: #a6e22e">group</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">kind</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">build</span>
        <span style="color: #a6e22e">isDefault</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #66d9ef">true</span>
      <span style="color: #a6e22e">label</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">Build Java Project</span>
      <span style="color: #a6e22e">workingDir</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">/projects/che-server</span></code></pre>
</div>
</div>
</li>
<li>
<p>Add resource limits to the devfile.</p>
<div class="paragraph">
<p><strong>Request:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code>Add resource limits to all components.</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Response:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">schemaVersion</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2.3.0</span>
<span style="color: #a6e22e">metadata</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">devfile</span>
<span style="color: #a6e22e">components</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">tools</span>
    <span style="color: #a6e22e">container</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">image</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">quay.io/devfile/universal-developer-image:latest</span>
      <span style="color: #a6e22e">volumeMounts</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">maven-artifacts</span>
          <span style="color: #a6e22e">path</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">/home/user/.m2</span>
      <span style="color: #a6e22e">cpuLimit</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #ae81ff">2</span>
      <span style="color: #a6e22e">memoryLimit</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">4Gi</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">postgres</span>
    <span style="color: #a6e22e">container</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">image</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">postgres:latest</span>
      <span style="color: #a6e22e">env</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">POSTGRES_DB</span>
          <span style="color: #a6e22e">value</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">mydatabase</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">POSTGRES_USER</span>
          <span style="color: #a6e22e">value</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">user</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">POSTGRES_PASSWORD</span>
          <span style="color: #a6e22e">value</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">password</span>
      <span style="color: #a6e22e">cpuLimit</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #ae81ff">1</span>
      <span style="color: #a6e22e">memoryLimit</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2Gi</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">maven-artifacts</span>
    <span style="color: #a6e22e">volume</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">size</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2Gi</span>
<span style="color: #a6e22e">projects</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">che-server</span>
    <span style="color: #a6e22e">git</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">remotes</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">origin</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">https://github.com/eclipse-che/che-server.git</span>
<span style="color: #a6e22e">commands</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">id</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">build-java-project</span>
    <span style="color: #a6e22e">exec</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">commandLine</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">mvn clean install</span>
      <span style="color: #a6e22e">component</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">tools</span>
      <span style="color: #a6e22e">group</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">kind</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">build</span>
        <span style="color: #a6e22e">isDefault</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #66d9ef">true</span>
      <span style="color: #a6e22e">label</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">Build Java Project</span>
      <span style="color: #a6e22e">workingDir</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">/projects/che-server</span></code></pre>
</div>
</div>
</li>
<li>
<p>Add metadata to the devfile.</p>
<div class="paragraph">
<p><strong>Request:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code>Add metadata based on the devfile.</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Response:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">schemaVersion</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2.3.0</span>
<span style="color: #a6e22e">metadata</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">devfile</span>
  <span style="color: #a6e22e">displayName</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">Java with PostgreSQL Dev Environment</span>
  <span style="color: #a6e22e">description</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">A development environment for a Java project with PostgreSQL database support.</span>
  <span style="color: #a6e22e">language</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">Java</span>
  <span style="color: #a6e22e">projectType</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">Java Application</span>
  <span style="color: #a6e22e">version</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">1.0.0</span>
  <span style="color: #a6e22e">provider</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">Eclipse Che</span>
  <span style="color: #a6e22e">tags</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">java</span>
    <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">postgres</span>
    <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">maven</span>
    <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">database</span>
<span style="color: #a6e22e">components</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">tools</span>
    <span style="color: #a6e22e">container</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">image</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">quay.io/devfile/universal-developer-image:latest</span>
      <span style="color: #a6e22e">volumeMounts</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">maven-artifacts</span>
          <span style="color: #a6e22e">path</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">/home/user/.m2</span>
      <span style="color: #a6e22e">cpuLimit</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #ae81ff">2</span>
      <span style="color: #a6e22e">memoryLimit</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">4Gi</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">postgres</span>
    <span style="color: #a6e22e">container</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">image</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">postgres:latest</span>
      <span style="color: #a6e22e">env</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">POSTGRES_DB</span>
          <span style="color: #a6e22e">value</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">mydatabase</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">POSTGRES_USER</span>
          <span style="color: #a6e22e">value</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">user</span>
        <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">POSTGRES_PASSWORD</span>
          <span style="color: #a6e22e">value</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">password</span>
      <span style="color: #a6e22e">cpuLimit</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #ae81ff">1</span>
      <span style="color: #a6e22e">memoryLimit</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2Gi</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">maven-artifacts</span>
    <span style="color: #a6e22e">volume</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">size</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2Gi</span>
<span style="color: #a6e22e">projects</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">che-server</span>
    <span style="color: #a6e22e">git</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">remotes</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">origin</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">https://github.com/eclipse-che/che-server.git</span>
<span style="color: #a6e22e">commands</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">id</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">build-java-project</span>
    <span style="color: #a6e22e">exec</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">commandLine</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">mvn clean install</span>
      <span style="color: #a6e22e">component</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">tools</span>
      <span style="color: #a6e22e">group</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">kind</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">build</span>
        <span style="color: #a6e22e">isDefault</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #66d9ef">true</span>
      <span style="color: #a6e22e">label</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">Build Java Project</span>
      <span style="color: #a6e22e">workingDir</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">/projects/che-server</span></code></pre>
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Are you a developer looking to simplify setting up your development environment? The Devfile AI Assistant is here to help! It provides clear and accurate configurations, taking the complexity out of the process. Give the Devfile AI Assistant a try today!</p>
</div>
</div>
</div>]]></content><author><name>Anatolii Bazko</name></author><summary type="html"><![CDATA[The Devfile AI Assistant is an online tool that simplifies the creation of devfiles for developers.]]></summary></entry><entry><title type="html">Developing OpenWRT in QEMU with Eclipse Che</title><link href="https://che.eclipseprojects.io/2024/05/22/@olexii.orel-openwrt-helloworld-package.html" rel="alternate" type="text/html" title="Developing OpenWRT in QEMU with Eclipse Che" /><published>2024-05-22T00:00:00+00:00</published><updated>2024-05-22T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2024/05/22/@olexii.orel/openwrt-helloworld-package</id><content type="html" xml:base="https://che.eclipseprojects.io/2024/05/22/@olexii.orel-openwrt-helloworld-package.html"><![CDATA[<div class="paragraph">
<p><a href="https://openwrt.org/">OpenWrt</a> is a highly extensible GNU/Linux distribution for embedded devices (typically wireless routers). OpenWrt is built from the ground up to be a full-featured, easily modifiable operating system for embedded devices. You can have all the features you need with no bloat, powered by a modern Linux kernel.</p>
</div>
<div class="paragraph">
<p>We can create and develop <a href="https://openwrt.org/docs/guide-developer/creating-a-cmake-package-in-openwrt">OpenWRT CMake packages</a> with Eclipse Che.</p>
</div>
<div class="paragraph">
<p>In this blog post, we will review developing OpenWRT in <a href="https://www.qemu.org/">QEMU</a> with Eclipse Che in 4 parts:</p>
</div>
<div class="paragraph">
<p><a href="#part1">PART 1: Quick start with prebuild resources</a></p>
</div>
<div class="paragraph">
<p><a href="#part2">PART 2: (optional) Build all packages and the kernel</a></p>
</div>
<div class="paragraph">
<p><a href="#part3">PART 3: Run OpenWRT in QEMU</a></p>
</div>
<div class="paragraph">
<p><a href="#part4">PART 4: Debugging helloworld package</a></p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
In this blog post, we will use <a href="https://github.com/che-incubator/openwrt-helloworld-package.git">OpenWrt HelloWorld package</a>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>First of all, we need to create a new workspace from the repo <a href="https://github.com/che-incubator/openwrt-helloworld-package.git">openwrt-helloworld-package</a> with Eclipse Che. The easiest way to do this is to use <a href="https://eclipse.dev/che/docs/stable/hosted-che/hosted-che/">Eclipse Che hosted by Red Hat</a> and create a workspace by navigating to the following URL - <a href="https://workspaces.openshift.com#https://github.com/che-incubator/openwrt-helloworld-package" class="bare">https://workspaces.openshift.com#https://github.com/che-incubator/openwrt-helloworld-package</a>.</p>
</div>
<div class="sect1">
<h2 id="part1">PART 1: Quick start with prebuild resources</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Prebuilt resources could be applied for a quick start with Eclipse Che. We could do this by running the next tasks from the <a href="https://github.com/che-incubator/openwrt-helloworld-package/blob/main/devfile.yaml">devfile</a>:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>Add prebuilt resources</code></p>
</li>
</ol>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
After adding prebuilt resources, we should see the <code>openwrt-*.img.gz</code> file in the <code>output</code> directory. Prebuilt resources were added to the runtime image during the last successful GitHub image build action.
</td>
</tr>
</table>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/developing-openwrt/add-prebuilt-resources.png" alt="Add prebuilt resources">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="part2">PART 2: (optional) Build all packages and the kernel</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Instead of using prebuilt resources from STEP 1, we can install all package definitions, copy <a href="https://github.com/che-incubator/openwrt-helloworld-package/blob/main/configs/.x86-generic.config"><code>.config</code></a> file and build all packages and the kernel. We can do this by running the following tasks from the <a href="https://github.com/che-incubator/openwrt-helloworld-package/blob/main/devfile.yaml">devfile</a>:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>Install all package definitions</code></p>
</li>
<li>
<p><code>Copy diff-config to OpenWRT</code></p>
</li>
<li>
<p><code>Build all packages and the kernel</code></p>
</li>
</ol>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
The build process may take a while, which is why using prebuilt resources from STEP 1 could be more desirable for getting started quickly. After the build is complete, we can see the <code>openwrt-*.img.gz</code> file in the <code>output</code> directory.
</td>
</tr>
</table>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/developing-openwrt/build-all-packages-and-the-kernel.png" alt="Build all packages and the kernel" width="100%">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="part3">PART 3: Run OpenWRT in QEMU</h2>
<div class="sectionbody">
<div class="paragraph">
<p>After adding prebuilt resources or building all packages and the kernel, OpenWRT could be run in the QEMU VM by running the following tasks from the <a href="https://github.com/che-incubator/openwrt-helloworld-package/blob/main/devfile.yaml">devfile</a>:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>Running OpenWRT in a QEMU VM</code></p>
</li>
</ol>
</div>
<div class="paragraph">
<p>After running the task, we see the OpenWRT booting in the QEMU machine emulator and virtualizer.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/developing-openwrt/running-openwrt-in-qemu-vm.png" alt="Running OpenWRT in a QEMU VM">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>We can access the OpenWRT console by running the task <code>Remote access to OpenWRT via SSH</code> and start the helloworld package by running:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash">helloworld</code></pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/developing-openwrt/run-helloworld.png" alt="Run helloworld package">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="part4">PART 4: Debugging helloworld package</h2>
<div class="sectionbody">
<div class="paragraph">
<p>After starting OpenWRT in a QEMU VM, we need to run a remote gdbserver for debugging. We can do this by running the task <code>Start remote GDB Server</code> from the <a href="https://github.com/che-incubator/openwrt-helloworld-package/blob/main/devfile.yaml">devfile</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/developing-openwrt/start-remote-gdbserver.png" alt="Start remote gdbserver">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>Then, we can debug the helloworld package with IDE:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/developing-openwrt/remote-debugging.png" alt="Start remote gdbserver">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
The task <code>Start remote GDB Server</code> should be run before each new debug session.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Thank you for reading. I hope you found this article helpful.</p>
</div>
</div>
</div>]]></content><author><name>Oleksii Orel</name></author><summary type="html"><![CDATA[Developing OpenWRT helloworld package in QEMU machine emulator and virtualizer with Eclipse Che.]]></summary></entry><entry><title type="html">Drive a coupe with the overlay storage driver - a Podman build comparison</title><link href="https://che.eclipseprojects.io/2024/03/28/@david.kwon-fuse-storage-driver.html" rel="alternate" type="text/html" title="Drive a coupe with the overlay storage driver - a Podman build comparison" /><published>2024-03-28T00:00:00+00:00</published><updated>2024-03-28T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2024/03/28/@david.kwon/fuse-storage-driver</id><content type="html" xml:base="https://che.eclipseprojects.io/2024/03/28/@david.kwon-fuse-storage-driver.html"><![CDATA[<div class="paragraph">
<p>With the fuse-overlayfs storage driver, you can enable faster builds and a more optimized storage usage for <code>podman build</code> and <code>buildah</code> within your Eclipse Che cloud development environment (CDE). Before diving into its advantages, let&#8217;s first discuss some prerequisite details about container image layers and storage drivers.</p>
</div>
<div class="paragraph">
<p>Container images consist of <a href="https://docs.docker.com/build/guide/layers">layers</a> which are stored and used for building and running containers. A huge benefit of this layer anatomy is that, assuming that each image layer stores only the file differences compared to the previous layer (i.e. the delta), each layer is small which generally allows time and space savings when building and running containers. This is because layers allow efficient caching and sharing between containers.</p>
</div>
<div class="paragraph">
<p>A <a href="https://docs.docker.com/storage/storagedriver/select-storage-driver">storage driver</a> for Docker and Podman is what manages these image layers upon image pulling, building, and running. By default, Eclipse Che uses the vfs storage driver for Podman in the <a href="https://github.com/devfile/developer-images">Universal Development Image</a>. While vfs is generally considered very stable, the lack of <a href="https://en.wikipedia.org/wiki/Copy-on-write">copy-on-write</a> (CoW) support poses a significant disadvantage compared to other storage drivers like fuse-overlayfs, overlay2, and btrfs.</p>
</div>
<div class="sect1">
<h2 id="_what-is-the-disadvantage-of-vfs">What is the disadvantage of vfs?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>As mentioned previously, having smaller layers allows time and space savings when building and running containers. The disadvantage with vfs&#8217;s lack of CoW is that whenever a new layer is created, a complete copy of the previous layer is created. This can create duplicate and redundant data in each layer, and can quickly fill up your storage space especially when working with larger images. Comparing that with image layers created with CoW-supported storage drivers like fuse-overlayfs, those image layers would typically not contain redundant data and would remain smaller since only the delta is stored in each image layer.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/fuse-storage-driver/layer-diagram.png" alt="layer diagram">
</div>
</div>
<div class="paragraph">
<p>Fig. 1. Example comparison of image layer sizes between vfs and overlay storage drivers. The total size of the image layers created with overlay is about half the size of the image layers created with vfs.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_how-can-we-use-fuse-overlayfs-in-an-eclipse-che-cloud-development-environment">How can we use fuse-overlayfs in an Eclipse Che cloud development environment?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To use fuse-overlayfs in a CDE, the CDE&#8217;s pod requires access to the <code>/dev/fuse</code> device from the host operating system. For Kubernetes, support for this can vary depending on the platform. However, for Openshift, version 4.15 allows access to the <code>/dev/fuse</code> device <a href="https://docs.openshift.com/container-platform/4.15/release_notes/ocp-4-15-release-notes.html#ocp-4-15-nodes-dev-fuse">without any cluster modifications</a>. Here&#8217;s the documentation on how to <a href="https://eclipse.dev/che/docs/stable/end-user-guide/accessing-fuse">enable the overlay storage driver for CDEs running on OpenShift 4.15 and older versions</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_how-does-fuse-overlayfs-compare-to-vfs-in-an-eclipse-che-cde">How does fuse-overlayfs compare to vfs in an Eclipse Che CDE?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A series of tests were performed to measure the build time and storage usage differences between the fuse-overlayfs and vfs storage drivers in an Eclipse Che CDE. For this blog post, I will present the measurements for building a series of different GitHub projects. If you&#8217;re interested, the results for tests that were specifically designed to highlight the characteristics of each storage driver are available in this <a href="https://github.com/dkwon17/storage-driver-test/blob/main/results.md">GitHub repository</a>.</p>
</div>
<div class="paragraph">
<p>All tests presented in Fig. 2. were run on an OpenShift Dedicated 4.15.3 cluster with a productized version of Eclipse Che 7.82.0.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Test name</th>
<th class="tableblock halign-left valign-top">Project URL</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">dashboard</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/eclipse-che/che-dashboard">che-dashboard</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">dashboard-edit</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/eclipse-che/che-dashboard">che-dashboard</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">operator</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/eclipse-che/che-operator">che-operator</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">operator-edit</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/eclipse-che/che-operator">che-operator</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">server</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/eclipse-che/che-server">che-server</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">server-edit</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/eclipse-che/che-server">che-server</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">nginx-alpine</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/nginxinc/docker-nginx/tree/master/stable/alpine">docker-nginx</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">quarkus-api-example</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/che-incubator/quarkus-api-example">quarkus-api-example</a></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Fig. 2. Table of test names name project URLs.</p>
</div>
<div class="paragraph">
<p>For each test apart from the &lt;projectname&gt;-edit tests, the <code>podman system reset</code> command was run before running each test in order to clear the graphroot directory. This removes all image layers, therefore these tests measure a clean-build scenario, just like when a user creates a CDE and runs <code>podman build</code> for the first time.</p>
</div>
<div class="paragraph">
<p>For the &lt;projectname&gt;-edit tests, the image container was built beforehand. The tests measure a rebuild of the image after changing the source code without running <code>podman system reset</code> command. This scenario mimics the case where the developer is running a new build after making code changes in their CDE.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/fuse-storage-driver/image-build-time.png" alt="image build time">
</div>
</div>
<div class="paragraph">
<p>Fig. 3. Container image build time results</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/fuse-storage-driver/graphroot-size.png" alt="graphroot size">
</div>
</div>
<div class="paragraph">
<p>Fig. 4. Graphroot directory size results</p>
</div>
<div class="paragraph">
<p>For all tests, the fuse-overlayfs storage driver had faster build times and significantly smaller storage consumption compared to vfs. The benefits of CoW is especially evident in Fig. 4. For example the operator-edit test showed that by using fuse-overlayfs, the graphroot directory was about 88% smaller, saving about 15GB of storage.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In conclusion, the fuse-overlayfs storage driver should be considered for your Eclipse Che CDEs, saving time and storage thanks to the CoW support. In general, there is no “best” storage driver because performance, stability, and usability of each storage driver is dependent on your specific workload and environment. However, with vfs not supporting CoW, fuse-overlayfs is a much more suitable choice for image layer management.</p>
</div>
<div class="paragraph">
<p>For additional content regarding fuse-overlayfs in Eclipse Che, check out this <a href="https://upstreamwithoutapaddle.com/blog%20post/2023/08/10/Podman-In-Dev-Spaces-With-Fuse-Overlay.html">blog post and demo project</a>.</p>
</div>
<div class="paragraph">
<p>Thank you for reading.</p>
</div>
</div>
</div>]]></content><author><name>David Kwon</name></author><summary type="html"><![CDATA[Enable faster builds and storage optimization with the fuse-overlayfs storage driver in Eclipse Che.]]></summary></entry><entry><title type="html">Customizing Eclipse Che Cloud Development Environments</title><link href="https://che.eclipseprojects.io/2024/02/05/@mario.loriedo-cde-customization.html" rel="alternate" type="text/html" title="Customizing Eclipse Che Cloud Development Environments" /><published>2024-02-05T00:00:00+00:00</published><updated>2024-02-05T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2024/02/05/@mario.loriedo/cde-customization</id><content type="html" xml:base="https://che.eclipseprojects.io/2024/02/05/@mario.loriedo-cde-customization.html"><![CDATA[<div class="paragraph">
<p>Eclipse Che provides Cloud Development Environments (CDEs) with a click. The default container of those CDEs, what we call the <a href="https://github.com/devfile/developer-images/">universal developer image</a>, has a lot of pre-installed development tools but may not have the right version or the right tool for you. If that&#8217;s the case, no worries: one of Eclipse Che CDEs' main assets is configurability!</p>
</div>
<div class="paragraph">
<p>In this blog post we will review Eclipse Che CDEs' customization in 4 parts:</p>
</div>
<div class="paragraph">
<p><a href="#part1">PART 1: Eclipse Che default CDE</a></p>
</div>
<div class="paragraph">
<p><a href="#part2">PART2: Customize the CDE container image</a></p>
</div>
<div class="paragraph">
<p><a href="#part3">PART3: Change CDE properties with a Devfile</a></p>
</div>
<div class="paragraph">
<p><a href="#part4">PART4: Secrets and other CDE configurations that cannot be specified in Devfile</a></p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
To help illustrate this blog post we will use a <a href="https://github.com/l0rd/rails-sample">Ruby on Rails project</a>. Ruby is a good example because the default development container doesn&#8217;t include Ruby development tools at all. For other languages such as Java, Go, NodeJS, Python and .NET, the Eclipse Che default development image includes a few tools, and all the customizations in this blog post may not be necessary.
</td>
</tr>
</table>
</div>
<div class="sect1">
<h2 id="part1">PART 1: Eclipse Che default CDE</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When no Devfile is found in a git repository and the developer doesn&#8217;t provide a URL, Eclipse Che uses a default development environment.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/cde-customization/ruby-sample-main-branch.gif" alt="ruby sample main branch">
</div>
</div>
<div class="paragraph">
<p>&#160;<br>
The <a href="https://github.com/l0rd/rails-sample">rails-sample</a> git repository has no <code>devfile.yaml</code>, and Che informs us about that:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Devfile could not be found in <a href="https://github.com/l0rd/rails-sample" class="bare">https://github.com/l0rd/rails-sample</a>. Applying the default configuration</p>
</div>
</blockquote>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Click <a href="https://workspaces.openshift.com/#https://github.com/l0rd/rails-sample">here</a> to open <a href="https://github.com/l0rd/rails-sample" class="bare">https://github.com/l0rd/rails-sample</a> in the Red Hat Developer Sandbox to try it out.
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="_default-cde-pod-details">Default CDE Pod details</h3>
<div class="paragraph">
<p>Let&#8217;s have a look at the Kubernetes objects that get created when the default Eclipse Che CDE is started. From the Visual Studio Code Terminal we can list Kubernetes Pods:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ kubectl get pod
NAME                                         READY   STATUS    RESTARTS   AGE
workspacef14b414e91574d61-675c894dbb-ch727   2/2     Running   0          2m</pre>
</div>
</div>
<div class="paragraph">
<p>This is the CDE Pod. Then we can look at the images of the containers of the Pod:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ kubectl get pods -o jsonpath='{range ..containers[*]}{.image}{"\n"}{end}'
quay.io/devfile/universal-developer-image:ubi8-latest
quay.io/eclipse/che--traefik:v2.9.10-8d81a9df1435f9f3d...</pre>
</div>
</div>
<div class="paragraph">
<p>The first container image is <code>registry.redhat.io/devspaces/udi-rhel8</code> or <code>UDI</code> (Universal Developer Image) and has a default set of development tools. The second is <code>traefik</code>, a <a href="https://github.com/traefik/traefik/">reverse proxy</a> that Eclipse Che uses to authenticate CDE users.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
You may see a different output. That&#8217;s because Eclipse Che can be configured to use a different default image. For example, on Red Hat Developer Sandbox, the default image is <code>registry.redhat.io/devspaces/udi-rhel8</code>.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_universal-developer-image">Universal Developer Image</h3>
<div class="paragraph">
<p>The default container image, <code>quay.io/devfile/universal-developer-image</code>, includes quite a few development tools: essential CLI tools, popular programming languages and cloud development tools. It&#8217;s called <em>Universal Developer Image</em> and the following diagram summarizes its content.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/cde-customization/udi.png" alt="udi">
</div>
</div>
<div class="paragraph">
<p>&#160;<br>
The Universal Developer Image <a href="https://github.com/devfile/developer-images/blob/main/universal/ubi8/Dockerfile">Dockerfile</a> has the details of all the tools, runtimes, environment variables etc&#8230;&#8203;that are included (<a href="https://github.com/redhat-developer/devspaces-images/blob/devspaces-3-rhel-8/devspaces-udi/Dockerfile">here is the OpenShift Dev Spaces version</a>).</p>
</div>
</div>
<div class="sect2">
<h3 id="_when-the-default-is-not-enough">When the default is not enough</h3>
<div class="paragraph">
<p>The configuration of the <code>rails-sample</code> Cloud Development Environment is good enough for reading the source code and doing some basic editing, but some essential features of the IDE are missing:</p>
</div>
<div class="paragraph">
<p><strong>Starting the rails application fails:</strong> Rails requires Ruby which is not installed in the default container.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/cde-customization/ruby-sample-main-branch-rails-server.png" alt="ruby sample main branch rails server">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p><strong>The <a href="https://marketplace.visualstudio.com/items?itemName=Shopify.ruby-lsp">Ruby LSP extension</a> activation fails:</strong> the extension from Shopify fails because Ruby is not installed.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/cde-customization/ruby-sample-main-branch-ruby-lsp.png" alt="ruby sample main branch ruby lsp">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>In PART2 we are going to address those problems by using a container image with the required development tools.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="part2">PART2: Customize the CDE container image</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In PART 1 we have seen that Eclipse Che CDEs run in a container of a Kubernetes Pod. In this section we are going to see how to replace the default Eclipe Che CDE image with a custom one.</p>
</div>
<div class="sect2">
<h3 id="_the-dockerfile">The Dockerfile</h3>
<div class="paragraph">
<p>We want to build an image with the pre-requisite to run the <a href="https://github.com/l0rd/rails-sample">ruby on rails example</a> seen in PART 1. The following Dockerfile provides the specification of such image.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="docker"><span style="color: #66d9ef;font-weight: bold">FROM</span><span style="color: #e6db74"> quay.io/devfile/universal-developer-image:latest</span>

<span style="color: #75715e;font-style: italic"># Switching to root user (setting UID to 0) because next</span>
<span style="color: #75715e;font-style: italic"># commands require root privileges. Universal Developer</span>
<span style="color: #75715e;font-style: italic"># Image default user has UID set to 10001.</span>
<span style="color: #66d9ef;font-weight: bold">USER</span><span style="color: #e6db74"> 0</span>

<span style="color: #75715e;font-style: italic"># Install a recent version of ruby</span>
<span style="color: #66d9ef;font-weight: bold">ENV</span><span style="color: #e6db74"> RUBY_VERSION 3.1.2</span>
<span style="color: #66d9ef;font-weight: bold">RUN </span>dnf <span style="color: #f92672">-y</span> update <span style="color: #f92672;font-weight: bold">&amp;&amp;</span> <span style="color: #ae81ff">\
</span>    dnf <span style="color: #f92672">-y</span> <span style="color: #f8f8f2">install </span>rbenv ruby-build sqlite <span style="color: #f92672;font-weight: bold">&amp;&amp;</span> <span style="color: #ae81ff">\
</span>    dnf <span style="color: #f92672">-y</span> clean all <span style="color: #f92672">--enablerepo</span><span style="color: #f92672;font-weight: bold">=</span><span style="color: #e6db74">'*'</span> <span style="color: #f92672;font-weight: bold">&amp;&amp;</span> <span style="color: #ae81ff">\
</span>    rbenv <span style="color: #f8f8f2">install</span> <span style="color: #f8f8f2">$RUBY_VERSION</span> <span style="color: #f92672;font-weight: bold">&amp;&amp;</span> <span style="color: #ae81ff">\
</span>    rbenv global <span style="color: #f8f8f2">$RUBY_VERSION</span> <span style="color: #f92672;font-weight: bold">&amp;&amp;</span> <span style="color: #ae81ff">\
</span>    <span style="color: #f8f8f2">echo</span> <span style="color: #e6db74">'eval "$(rbenv init - bash)"'</span> <span style="color: #f92672;font-weight: bold">&gt;&gt;</span> <span style="color: #f8f8f2">$HOME</span>/.bashrc <span style="color: #f92672;font-weight: bold">&amp;&amp;</span> <span style="color: #ae81ff">\
</span>    <span style="color: #f8f8f2">echo</span> <span style="color: #e6db74">'eval "$(rbenv init - sh)"'</span> <span style="color: #f92672;font-weight: bold">&gt;</span> /etc/profile.d/rbenv.sh

<span style="color: #66d9ef;font-weight: bold">ENV</span><span style="color: #e6db74"> PATH="${HOME}/.rbenv/shims:${PATH}" ENV="/etc/profile"</span>

<span style="color: #75715e;font-style: italic"># Install rails</span>
<span style="color: #66d9ef;font-weight: bold">RUN </span>gem <span style="color: #f8f8f2">install </span>rails

<span style="color: #75715e;font-style: italic"># Switch back to default user</span>
<span style="color: #66d9ef;font-weight: bold">USER</span><span style="color: #e6db74"> 10001</span>

<span style="color: #75715e;font-style: italic"># Set bundle config</span>
<span style="color: #66d9ef;font-weight: bold">RUN </span>bundle config <span style="color: #f92672">--global</span> path <span style="color: #f8f8f2">$HOME</span>/.bundle</code></pre>
</div>
</div>
<div class="paragraph">
<p>The base image in the Dockerfile above is Eclipse Che Universal Developer Image (<code>quay.io/devfile/universal-developer-image:latest</code>). The remaining instructions in the Dockerfile install <code>ruby</code> and <code>rails</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
It&#8217;s not necessary to use the Eclipse Che default image as the base image. I am maintaining <a href="https://github.com/devfile/developer-images/">a repository with a list of Dockerfiles for Che CDEs</a> using popular base images.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_build-and-publish-the-custom-image">Build and publish the custom image</h3>
<div class="paragraph">
<p>The Dockerfile can be built locally (on your laptop) and pushed to a remote registry such as Docker Hub or Quay.io. That requires <code>docker</code> or <code>podman</code> and a good Internet connection (the base image, UDI, has a size of a few Gigabytes).</p>
</div>
<div class="paragraph">
<p>Another option is to build and push the <code>Dockerfile</code> without leaving the <code>ruby-sample</code> CDE started in STEP1. <code>podman</code> is included in the universal developer image and can be used to build and push the Dockerfile above.</p>
</div>
<div class="paragraph">
<p>My preferred alternative though, and the one used in <a href="https://github.com/l0rd/rails-sample/blob/dockerfile/.devfile.Dockerfile">branch <code>dockerfile</code> of the ruby-sample repository</a>, is to leverage GitHub actions to automatically build and push the image:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Add the Dockerfile to the git repository as <code>.devfile.Dockerfile</code></p>
</li>
<li>
<p>Add a GitHub workflow to build and push the image automatically (<a href="https://github.com/l0rd/rails-sample/blob/dockerfile/.github/workflows/image-build.yaml">see an example here</a>)</p>
</li>
<li>
<p>Push both files to a remote branch of the git repository</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Last step will trigger the GitHub action job that builds the image:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/cde-customization/github-action.png" alt="github action">
</div>
</div>
<div class="paragraph">
<p>&#160;<br>
As a result the image will be built and published on <code>quay.io</code> automatically after every push to the repository. The job in the <a href="https://github.com/l0rd/rails-sample/blob/dockerfile/.github/workflows/image-build.yaml#L29">branch <code>dockerfile</code> of the ruby-sample repository</a> builds and publishes the image <code>quay.io/mloriedo/rails-blog-cde:latest</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
I have named the file as <code>.devfile.Dockerfile</code>: even though any name is ok, I like to use the <code>.devfile</code> prefix as these images are usually used in devfiles (as we will do STEP 3).
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_start-a-new-cde-using-the-custom-image">Start a new CDE using the custom image</h3>
<div class="paragraph">
<p>The simplest way to start a workspace using a new custom image is to use Eclispe Che URL parameter <a href="https://eclipse.dev/che/docs/stable/end-user-guide/url-parameter-for-container-image/"><code>?image=&lt;image-name&gt;</code></a>.</p>
</div>
<div class="paragraph">
<p>For example, to start a CDE using the custom image <code>quay.io/mloriedo/rails-blog-cde</code> and cloning rails-sample, the following string can be used in the "Create Workspace" page:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>https://github.com/l0rd/rails-sample&amp;image=quay.io/mloriedo/rails-blog-cde</pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/cde-customization/image-url-parameter.png" alt="image url parameter">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>Clicking <a href="https://workspaces.openshift.com/#https://github.com/l0rd/rails-sample&amp;image=quay.io/mloriedo/rails-blog-cde">on this URL</a> automatically starts the customized CDE on the Red Hat Developer Sandbox.</p>
</div>
</div>
<div class="sect2">
<h3 id="_verify-the-new-cde-pod-image">Verify the new CDE Pod image</h3>
<div class="paragraph">
<p>The CDE Pod now uses a <code>rails-blog-cde</code> container rather than the Eclipse Che default universal developer image. To verify it open a Terminal from Visual Studio Code and run <code>kubectl</code>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ kubectl get pods -o jsonpath='{range ..containers[*]}{.image}{"\n"}{end}'
quay.io/mloriedo/rails-blog-cde:latest
quay.io/eclipse/che--traefik:v2.9.10-8d81a9df1435f9f3d...</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_run-ruby-on-rails-from-the-terminal">Run Ruby on Rails from the Terminal</h3>
<div class="paragraph">
<p>We can verify that the <code>rails-sample</code> application starts successfully from the Visual Studio Code Terminal:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ bundle install &amp;&amp; ./bin/rails server
(...)
=&gt; Booting Puma
=&gt; Rails 7.0.8 application starting in development
=&gt; Run `bin/rails server --help` for more startup options
Puma starting in single mode...
* Puma version: 5.6.8 (ruby 3.1.2-p20) ("Birdie's Version")
*  Min threads: 5
*  Max threads: 5
*  Environment: development
*          PID: 4119
* Listening on http://127.0.0.1:3000
* Listening on http://[::1]:3000
Use Ctrl-C to stop</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_install-ruby-lsp-visual-studio-code-extension">Install <code>ruby-lsp</code> Visual Studio Code extension</h3>
<div class="paragraph">
<p>Finally, the Ruby LSP extension, which failed to activate in STEP1, is now fully working:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/cde-customization/ruby-lsp-extension-fully-functional.png" alt="ruby lsp extension fully functional">
</div>
</div>
<div class="paragraph">
<p>&#160;<br>
Replacing the Eclipse Che default image with a custom one allowed us to include the right pre-requisites (ruby and rails) to the CDE. With that, we are able to run the application and the Visual Studio Code ruby extension.</p>
</div>
<div class="paragraph">
<p>But there are still some issues with the CDE that we would like to fix (e.g. CPU and memory are not enough, running the application is not automated, the application dependencies are not pre-fetch at startup etc&#8230;&#8203;). We will cover those in the next session where we will use the Devfile to perform more advanced configurations for the CDE.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
<div class="paragraph">
<p>We have seen how to replace the image of the CDE using a URL parameter. We will see in the next section that it can be done with a Devfile too. A third alternative is changing the image "on the fly" using <code>kubectl patch</code> against the DevWorkspace object:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash"><span style="color: #f8f8f2">DW_NAME</span><span style="color: #f92672;font-weight: bold">=</span><span style="color: #e6db74">"rails-sample"</span> <span style="color: #f92672;font-weight: bold">&amp;&amp;</span> <span style="color: #ae81ff">\</span>
<span style="color: #f8f8f2">IMAGE</span><span style="color: #f92672;font-weight: bold">=</span><span style="color: #e6db74">"quay.io/mloriedo/rails-blog-cde:latest"</span> <span style="color: #f92672;font-weight: bold">&amp;&amp;</span> <span style="color: #ae81ff">\</span>
kubectl patch dw <span style="color: #e6db74">"</span><span style="color: #66d9ef;font-weight: bold">${</span><span style="color: #f8f8f2">DW_NAME</span><span style="color: #66d9ef;font-weight: bold">}</span><span style="color: #e6db74">"</span> <span style="color: #f92672">--type</span><span style="color: #f92672;font-weight: bold">=</span><span style="color: #e6db74">'merge'</span> <span style="color: #ae81ff">\</span>
      <span style="color: #f92672">-p</span> <span style="color: #e6db74">'{"spec":
            {"template":
              {"components":
                [
                  { "name":"universal-developer-image",
                    "container":{"image":"'</span><span style="color: #f8f8f2">$IMAGE</span><span style="color: #e6db74">'"} }
                ]
              }
            }
          }'</span></code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="part3">PART3: Change CDE properties with a Devfile</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In Part 2 we have seen how to customize a CDE with a new container image. That helps to include some development tools that are not in Eclipse Che default environment.</p>
</div>
<div class="paragraph">
<p>But what about properties such as the required memory or CPU, the containers to run in the CDE Pod (a CDE can have multiple containers!), the exposed endpoints, the commands triggered at startup, at shutdown? These properties can be customized using a Devfile and in this Part 3 we are reviewing how to do that.</p>
</div>
<div class="sect2">
<h3 id="_define-a-devfile-for-an-eclipse-che-cde">Define a Devfile for an Eclipse Che CDE</h3>
<div class="paragraph">
<p>A Devfile is an <a href="https://www.cncf.io/projects/devfile/">open standard</a> to define Cloud Development Environments. It&#8217;s a YAML file used to configure Eclipse Che CDEs.</p>
</div>
<div class="paragraph">
<p>Here is a simple Devfile that specifies the container image built in STEP 2:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">schemaVersion</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2.2.0</span>
<span style="color: #a6e22e">metadata</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">rails-sample</span>
<span style="color: #a6e22e">components</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">devtools</span>
    <span style="color: #a6e22e">container</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">image</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">quay.io/mloriedo/rails-blog-cde:latest</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>It&#8217;s recommended to add the Devfile in the same git repository of the application being developed using the name <code>.devfile.yaml</code> (as in the <a href="https://github.com/l0rd/rails-sample/tree/devfile"><code>devfile</code> branch of the <code>rails-sample</code></a>). A Devfile in the git repository will evolve along with the application and will be applied automatically whenever a developer provides the git repository URL to start a CDE.</p>
</div>
<div class="paragraph">
<p>When it&#8217;s not possible to add a <code>.devfile.yaml</code> in the git repository, there is still the option to publish it (in a gist, pastebin or another git repository) and <a href="https://eclipse.dev/che/docs/stable/end-user-guide/starting-a-workspace-from-a-raw-devfile-url/">start the CDE by providing the raw URL to it</a>.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
To change the configuration of a running CDE, add a new <code>.devfile.yaml</code> (or edit the existing one), and restart the CDE using the command <code>Eclipse Che: Restart Workspace from Local Devfile</code> from the Visual Studio Code command palette. This command is also quickly accessible by clicking on the bottom-left corner of Visual Studio Code.
</td>
</tr>
</table>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
<a href="https://open-vsx.org/extension/Devfile/vscode-devfile">The Devfile Visual Studio Code walkthrough extension</a> helps generating a Devfile using a GUI wizard.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_step-by-step-guide-to-an-optimal-devfile">Step by step guide to an optimal Devfile</h3>
<div class="paragraph">
<p>The <a href="https://devfile.io/docs/2.2.2/what-is-a-devfile">documentation website</a> includes a detailed Devfiles syntax reference. In this section I will share a practical step by step guide to write an optimal Devfile for the <a href="https://github.com/l0rd/rails-sample/"><code>rails-sample</code></a>.</p>
</div>
<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8">
  <title>Iterative devfile Creation</title>
  <link rel="stylesheet" href="/assets/html/cde-customization/devfile-table.css">
</head>
<body>
<!-- partial:index.partial.html -->
<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script> -->
<fieldset>
  <legend>Iterative Devfile Creation</legend>
  <div class="flex-wrap">
    <div class="steps">
      <input type="radio" name="devfile" value="simplest" checked="checked" />
      <label>1. The simplest `.devfile.yaml`: only the name of the CDE is specified</label><br />

      <input type="radio" name="devfile" value="image" />
      <label>2. Customize CDE main container image</label><br />

      <input type="radio" name="devfile" value="commands" />
      <label>3. Set some predefined commands (in VS Code: Terminal =&gt; Run Tasks =&gt; Devfile)</label><br />

      <input type="radio" name="devfile" value="resources" />
      <label>3. Adjust memory and CPU requirements</label><br />

      <input type="radio" name="devfile" value="poststart" />
      <label>4. Execute commands at CDE start</label><br />

      <input type="radio" name="devfile" value="volume" />
      <label>5. Persist folders after CDE restart</label><br />

      <input type="radio" name="devfile" value="env" />
      <label>6. Configure the application runtime through environment variables</label><br />

      <input type="radio" name="devfile" value="endpoint" />
      <label>7. Expose the application endpoints: port, path and protocol</label><br />

    </div>
    <div class="devfiles">
      <div class="area" id="simplest" style="display: block">
        <pre>
    <code>
<ins>schemaVersion: 2.2.0
metadata:
  name: rails-blog
</ins>
    </code>
  </pre>
      </div>

      <div class="area" id="image">
        <pre>
    <code>
schemaVersion: 2.2.0
metadata:
  name: rails-blog
<ins>components:
  - name: devtools
    container:
      image: quay.io/mloriedo/rails-blog-cde:latest
</ins>
    </code>
  </pre>
      </div>

      <div class="area" id="commands">
        <pre>
    <code>
schemaVersion: 2.2.0
metadata:
  name: rails-blog
components:
  - name: devtools
    container:
      image: quay.io/mloriedo/rails-blog-cde:latest
<ins>commands:
  - id: bundle-install
    exec:
      component: devtools
      commandLine: bundle install
      workingDir: ${PROJECT_SOURCE}
  - id: server-start
    exec:
      component: devtools
      commandLine: |
        ./bin/rails server --binding 0.0.0.0
  - id: server-kill
    exec:
      component: devtools
      commandLine: kill $(pidof "ruby")
</ins>
    </code>
    </pre>
      </div>

      <div class="area" id="resources">
        <pre>
    <code>
schemaVersion: 2.2.0
metadata:
  name: rails-blog
components:
  - name: devtools
    container:
      image: quay.io/mloriedo/rails-blog-cde:latest
<ins>      memoryRequest: 2G
      memoryLimit: 4G
      cpuRequest: '1'
      cpuLimit: '2'
</ins>commands:
  - id: bundle-install
    exec:
      component: devtools
      commandLine: bundle install
      workingDir: ${PROJECT_SOURCE}
  - id: server-start
    exec:
      component: devtools
      commandLine: |
        ./bin/rails server --binding 0.0.0.0
  - id: server-kill
    exec:
      component: devtools
      commandLine: kill $(pidof "ruby")
    </code>
    </pre>
      </div>

      <div class="area" id="poststart">
        <pre>
    <code>
schemaVersion: 2.2.0
metadata:
  name: rails-blog
components:
  - name: devtools
    container:
      image: quay.io/mloriedo/rails-blog-cde:latest
      memoryRequest: 2G
      memoryLimit: 4G
      cpuRequest: '1'
      cpuLimit: '2'
commands:
  - id: bundle-install
    exec:
      component: devtools
      commandLine: bundle install
      workingDir: ${PROJECT_SOURCE}
  - id: server-start
    exec:
      component: devtools
      commandLine: |
        ./bin/rails server --binding 0.0.0.0
  - id: server-kill
    exec:
      component: devtools
      commandLine: kill $(pidof "ruby")
<ins>events:
  postStart:
    - bundle-install
</ins>
</code>
    </pre>
      </div>

      <div class="area" id="volume">
        <pre>
    <code>
schemaVersion: 2.2.0
metadata:
  name: rails-blog
components:
<ins>  - name: bundle-volume
    volume:
      size: 1G
</ins>  - name: devtools
    container:
      image: quay.io/mloriedo/rails-blog-cde:latest
      memoryRequest: 2G
      memoryLimit: 4G
      cpuRequest: '1'
      cpuLimit: '2'
<ins>      volumeMounts:
        - name: bundle-volume
          path: /home/user/.bundle/vendor
</ins>commands:
  - id: bundle-install
    exec:
      component: devtools
      commandLine: bundle install
      workingDir: ${PROJECT_SOURCE}
  - id: server-start
    exec:
      component: devtools
      commandLine: |
        ./bin/rails server --binding 0.0.0.0
  - id: server-kill
    exec:
      component: devtools
      commandLine: kill $(pidof "ruby")
events:
  postStart:
    - bundle-install
    </code>
    </pre>
      </div>

      <div class="area" id="env">
        <pre>
    <code>
schemaVersion: 2.2.0
metadata:
  name: rails-blog
components:
  - name: bundle-volume
    volume:
      size: 1G
  - name: devtools
    container:
      image: quay.io/mloriedo/rails-blog-cde:latest
      memoryRequest: 2G
      memoryLimit: 4G
      cpuRequest: '1'
      cpuLimit: '2'
      volumeMounts:
        - name: bundle-volume
          path: /home/user/.bundle/vendor
commands:
  - id: bundle-install
    exec:
      component: devtools
      commandLine: bundle install
      workingDir: ${PROJECT_SOURCE}
  - id: server-start
    exec:
      component: devtools
      commandLine: |
<ins>        export RAILS_DEVELOPMENT_HOSTS="${CHE_DASHBOARD_URL/https:\/\/devspaces/}" &&
</ins>        ./bin/rails server --binding 0.0.0.0
  - id: server-kill
    exec:
      component: devtools
      commandLine: kill $(pidof "ruby")
events:
  postStart:
    - bundle-install
    </code>
    </pre>
      </div>

      <div class="area" id="endpoint">
        <pre>
    <code>
schemaVersion: 2.2.0
metadata:
  name: rails-blog
components:
  - name: bundle-volume
    volume:
      size: 1G
  - name: devtools
    container:
      image: quay.io/mloriedo/rails-blog-cde:latest
      memoryRequest: 2G
      memoryLimit: 4G
      cpuRequest: '1'
      cpuLimit: '2'
      volumeMounts:
        - name: bundle-volume
          path: /home/user/.bundle/vendor
<ins>      endpoints:
        - name: blog
          exposure: public
          protocol: https
          targetPort: 3000
          path: /articles</ins>commands:
  - id: bundle-install
    exec:
      component: devtools
      commandLine: bundle install
      workingDir: ${PROJECT_SOURCE}
  - id: server-start
    exec:
      component: devtools
      commandLine: |
        export RAILS_DEVELOPMENT_HOSTS="${CHE_DASHBOARD_URL/https:\/\/devspaces/}" &&
        ./bin/rails server --binding 0.0.0.0
  - id: server-kill
    exec:
      component: devtools
      commandLine: kill $(pidof "ruby")
events:
  postStart:
    - bundle-install
    </code>
    </pre>
      </div>
    </div>
  </div>

</fieldset>
<!-- partial -->
  <script  src="/assets/html/cde-customization/devfile-table.js"></script>

</body>
</html>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>These steps can be tested iteratively from a running CDE using the "Eclipse Che: Restart Workspace from Local Devfile" command in Visual Studio Code. You get the best experience installing <a href="https://open-vsx.org/extension/redhat/vscode-yaml">Visual Studio Code YAML extension</a> that provides code completion when editing a Devfile.</p>
</div>
<div class="paragraph">
<p>After the last step, the CDE will be fully functional. After the Devfile has been pushed to the git repository any new contributor will be able to run the application, do some changes, and debug them in a flash.</p>
</div>
<div class="paragraph">
<p>For example you can use <a href="https://workspaces.openshift.com/#https://github.com/l0rd/rails-sample/tree/devfile">this link</a> to test the rails-sample using the Devfile in step 7. After the workspace has started, use task <code>server-start</code> in VS Code (Terminal &#8658; Run Tasks &#8658; Devfile) to start the Ruby on Rails application. And install the VS Code extension <code>ruby-lsp</code> to get full language support.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="part4">PART4: Secrets and other CDE configurations that cannot be specified in Devfile</h2>
<div class="sectionbody">
<div class="paragraph">
<p>There are some properties of your CDE that you don&#8217;t want to specify in a Devfile. Either because they contain sensitive information (like a password or an SSH private key), or because you want to customize your CDE without affecting the rest of the team. In any case the Devfile, which is a shared in the git repository, cannot be used. In this section we will go through a few techniques to add user specific configurations.</p>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<div class="title">Important</div>
</td>
<td class="content">
Secrets, ConfigMaps and other Kubernetes objects mentioned in this PART are supposed to be created, by a developer, in the developer namespace. This is not admin tasks. Other developers using the same Eclipse Che instance won&#8217;t "see" those objects and their CDEs won&#8217;t be affected.
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="_add-environment-variables-using-kubernetes-configmaps-and-secrets">Add environment variables using Kubernetes <code>ConfigMaps</code> and <code>Secrets</code></h3>
<div class="paragraph">
<p>The Devfile allows to specify environment variables but in some situations you don&#8217;t want to add them there. Eclipse Che provides a mechanism to automatically add variables to CDEs containers without Devfiles but using Kubernetes ConfigMaps or Secrets.</p>
</div>
<div class="sect3">
<h4 id="_using-configmaps">Using <code>ConfigMaps</code></h4>
<div class="paragraph">
<p>It&#8217;s possible to use a Devfile to add an environment variable such as <code>RAILS_DEVELOPMENT_HOSTS=.apps.che-dev.x6e0.p1.openshiftapps.com</code> that holds the URL of your specific Kubernetes cluster. But that would make the Devfile less portable.</p>
</div>
<div class="paragraph">
<p>A better approach is to create, in your namespace (the developer namespace where your CDE are created), a <code>ConfigMap</code> with labels <code>controller.devfile.io/mount-to-devworkspace: "true"</code> and <code>controller.devfile.io/watch-configmap: "true"</code> and with the annotation <code>controller.devfile.io/mount-as: env</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash">kubectl apply <span style="color: #f92672">-f</span> - <span style="color: #f92672;font-weight: bold">&lt;&lt;</span> <span style="color: #66d9ef">EOF</span><span style="color: #e6db74">
apiVersion: v1
kind: ConfigMap
metadata:
  name: workspaces-env-vars
  labels:
    controller.devfile.io/mount-to-devworkspace: "true"
    controller.devfile.io/watch-configmap: "true"
  annotations:
    controller.devfile.io/mount-as: env
data:
  RAILS_DEVELOPMENT_HOSTS: ".apps.che-dev.x6e0.p1.openshiftapps.com"
EOF</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The environment variables specified in the <code>data</code> field of the <code>ConfigMap</code> (in this case <code>RAILS_DEVELOPMENT_HOSTS=.apps.che-dev.x6e0.p1.openshiftapps.com</code>) will be added automatically to every CDE created in the same namespace.</p>
</div>
</div>
<div class="sect3">
<h4 id="_using-secrets">Using <code>Secrets</code></h4>
<div class="paragraph">
<p>An example of environment variables holding sensitive information are those that specify developers' tokens (for example <code>GITHUB_TOKEN</code> used by the GitHub CLI).</p>
</div>
<div class="paragraph">
<p>In this case, we can create a <code>Secret</code> with labels <code>controller.devfile.io/mount-to-devworkspace: "true"</code> and <code>controller.devfile.io/watch-secret: "true"</code> and with the annotation <code>controller.devfile.io/mount-as: env</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash">kubectl apply <span style="color: #f92672">-f</span> - <span style="color: #f92672;font-weight: bold">&lt;&lt;</span> <span style="color: #66d9ef">EOF</span><span style="color: #e6db74">
apiVersion: v1
kind: Secret
metadata:
  name: workspaces-env-vars
  labels:
    controller.devfile.io/mount-to-devworkspace: "true"
    controller.devfile.io/watch-secret: "true"
  annotations:
    controller.devfile.io/mount-as: env
stringData:
  GITHUB_TOKEN: "&lt;your token&gt;"
EOF</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The environment variable specified in the <code>stringData</code> field of the <code>Secret</code> (in this case <code>GITHUB_TOKEN=&lt;your token&gt;</code>) will be added automatically to every CDE created in the same namespace.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
These ConfigMap and Secret should be created in the developer namespace. The variables specified in <code>data</code> will be added to the CDEs of the owner of the namespace only. Eclipse Che uses namespaces to isolate developers CDEs: it&#8217;s critical to allow read access to the objects in the namespaces only to the developer owning it.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_add-files-to-a-cde-using-kubernetes-configmaps-and-secrets">Add files to a CDE using Kubernetes <code>ConfigMaps</code> and <code>Secrets</code></h3>
<div class="paragraph">
<p>Regular files can be projected into CDEs using <code>ConfigMaps</code> and <code>Secrets</code> too. In this case the required annotation is <code>controller.devfile.io/mount-as: file</code>.</p>
</div>
<div class="paragraph">
<p>When projecting files, there are two extra annotations read by Eclipse Che: <code>controller.devfile.io/mount-path: &lt;container-path&gt;</code> specifies the projected file folder, and <code>controller.devfile.io/mount-access-mode</code> specifies the projected file&#8217;s access mode.</p>
</div>
<div class="sect3">
<h4 id="_using-configmaps-2">Using <code>ConfigMaps</code></h4>
<div class="paragraph">
<p>The following <code>ConfigMap</code> projects a Visual Studio Code <code>settings.json</code> file (remote VS Code data folder is <code>/checode/remote/data/machine</code>) that specifies a couple of Visual Studio Code Terminal settings:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash">kubectl apply <span style="color: #f92672">-f</span> - <span style="color: #f92672;font-weight: bold">&lt;&lt;</span> <span style="color: #66d9ef">EOF</span><span style="color: #e6db74">
apiVersion: v1
kind: ConfigMap
metadata:
  name: vscode-settings
  labels:
    controller.devfile.io/mount-to-devworkspace: "true"
    controller.devfile.io/watch-configmap: "true"
  annotations:
    controller.devfile.io/mount-as: file
    controller.devfile.io/mount-path: /checode/remote/data/Machine/
    controller.devfile.io/mount-access-mode: "511"
data:
  settings.json: |
    {
        "terminal.integrated.copyOnSelection": true,
        "terminal.integrated.cursorBlinking": true
    }
EOF</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_using-secrets-2">Using <code>Secrets</code></h4>
<div class="paragraph">
<p>The following <code>Secret</code> projects file <code>credentials</code> in fodler <code>/home/user/.aws</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash">kubectl apply <span style="color: #f92672">-f</span> - <span style="color: #f92672;font-weight: bold">&lt;&lt;</span> <span style="color: #66d9ef">EOF</span><span style="color: #e6db74">
apiVersion: v1
kind: Secret
metadata:
  name: aws-credentials
  labels:
    controller.devfile.io/mount-to-devworkspace: "true"
    controller.devfile.io/watch-secret: "true"
  annotations:
    controller.devfile.io/mount-as: file
    controller.devfile.io/mount-path: /home/user/.aws/
    controller.devfile.io/mount-access-mode: "511"
stringData:
  credentials: |
     [default]
     aws_access_key_id     = ABCDEFGHILMNOPQRSTUVZ
     aws_secret_access_key = ABCDEFGHILMNOPQRSTUVZ123456789+abcdefg
EOF</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_override-defaults-configurations-using-a-devworkspace-operator-configuration">Override defaults configurations using a DevWorkspace Operator Configuration</h3>
<div class="paragraph">
<p>In this last section we want to show a mechanism that a developer can use to override CDEs' default properties. In this case, by using a <a href="https://doc.crds.dev/github.com/devfile/devworkspace-operator">DevWorkspaceOperatorConfig Custom Resource</a>.</p>
</div>
<div class="paragraph">
<p><code>DevWorkspaceOperatorConfig</code> objects specify advanced CDE properties such as the <code>Pod</code> <code>schedulerName</code>, whether the <code>/home/user</code> folder will persist after a restart or not, and many more.</p>
</div>
<div class="paragraph">
<p>Applying a particular <code>DevWorkspaceOperatorConfig</code> to a CDEs takes 2 steps:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Create the <code>DevWorkspaceOperatorConfig</code> custom resource in the Kubernetes cluster</p>
</li>
<li>
<p>Edit the Devfile to apply that specific configuration</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>For example the following <code>DevWorkspaceOperatorConfig</code> override CDEs Pod <code>schedulerName</code> configuration:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash">kubectl apply <span style="color: #f92672">-f</span> - <span style="color: #f92672;font-weight: bold">&lt;&lt;</span> <span style="color: #66d9ef">EOF</span><span style="color: #e6db74">
apiVersion: controller.devfile.io/v1alpha1
kind: DevWorkspaceOperatorConfig
metadata:
  name: custom-dwoc
  namespace: &lt;namespace-name&gt;
config:
  workspace:
    schedulerName: my-scheduler
EOF</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To use this configuration a Devfile needs to reference it. For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="diff"><span style="color: #f8f8f2;background-color: #49483e">schemaVersion: 2.2.0
metadata:
</span>  name: rails-blog
<span style="color: #ffffff;background-color: #324932">+ attributes:
+   controller.devfile.io/devworkspace-config:
+     name: custom-dwoc
+     namespace: &lt;namespace-name&gt;
</span><span style="color: #f8f8f2;background-color: #49483e">components:
</span><span style="color: #960050;background-color: #1e0010">...</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>With that attribute, the CDE started using this devfile will use the scheduler <code>my-scheduler</code> (if it exists) rather than the default Kubernetes scheduler.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
If the DevWorkspaceOpenratorConfig referenced in a Devfile doesn&#8217;t exist in the Kubernetes cluster, then Che will silently ignore it.
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Most of the time, the Eclipse Che default Cloud Development Environment (CDE) that we have covered in <a href="#part1">PART 1: Eclipse Che default CDE</a>, is good enough to start navigating and doing some simple editing of the source code.</p>
</div>
<div class="paragraph">
<p>To build and run an application in a CDE, it may be necessary to create a custom container image to replace the default one. This is described in <a href="#part2">PART2: Customize the CDE container image</a>.</p>
</div>
<div class="paragraph">
<p>But it&#8217;s in <a href="#part3">PART3: Change CDE properties with a Devfile</a> that we shared how to make to most out of Eclipse Che development environments. The Devfile allows us to specify development environments as code and share it with the rest of the team.</p>
</div>
<div class="paragraph">
<p>Finally, in <a href="#part4">PART4: Secrets and other CDE configurations that cannot be specified in Devfile</a>, some more advanced techniques to configure development environments, beyond the devfile, are reviewed.</p>
</div>
</div>
</div>]]></content><author><name>Mario Loriedo</name></author><summary type="html"><![CDATA[In this article we review the different ways to customize an Eclipse Che Cloud Development Environment]]></summary></entry><entry><title type="html">Configuring Granular Access for Eclipse Che Authorized Users</title><link href="https://che.eclipseprojects.io/2024/01/29/@ilya.buziuk-advanced-authorization.html" rel="alternate" type="text/html" title="Configuring Granular Access for Eclipse Che Authorized Users" /><published>2024-01-29T00:00:00+00:00</published><updated>2024-01-29T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2024/01/29/@ilya.buziuk/advanced-authorization</id><content type="html" xml:base="https://che.eclipseprojects.io/2024/01/29/@ilya.buziuk-advanced-authorization.html"><![CDATA[<div class="paragraph">
<p>Even though the current trend is to split an infrastructure into a number of 'Fit For Purpose' clusters instead of having a gigantic monolith Kubernetes cluster, administrators still want to provide granular access and restrict certain functionality for particular users.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
A 'Fit For Purpose' Kubernetes cluster refers to a cluster that is specifically designed and configured to meet the requirements and goals of a particular use case or workload, tailored to optimize performance, resource utilization, and other factors based on the characteristics of the workloads it will be managing. For Eclipse&#160;Che it is recommended to have this type of cluster provisioned.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Previously, all users provisioned on a Kubernetes cluster had access to Eclipse&#160;Che, and it was difficult to restrict the usage for certain accounts. One of the options for administrators was to remove permissions for namespace / project creation on the Kubernetes level, and disable automatic namespace provisioning for Eclipse&#160;Che:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">devEnvironments</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">defaultNamespace</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #a6e22e">autoProvision</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #66d9ef">false</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Considering this, new optional properties that allow setting up granular access for different groups and users have been added to the Eclipse&#160;Che Custom Resource: <code>allowUsers</code>, <code>allowGroups</code>, <code>denyUsers</code>, and <code>denyGroups</code>. Below you can find an illustration exemplifying the configuration:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"> <span style="color: #a6e22e">networking</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #a6e22e">auth</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">advancedAuthorization</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">allowUsers</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">user-a</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">user-b</span>
        <span style="color: #a6e22e">denyUsers</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">user-c</span>
        <span style="color: #a6e22e">allowGroups</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">team-a</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">team-b</span>
        <span style="color: #a6e22e">denyGroups</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">team-c</span></code></pre>
</div>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<div class="title">Important</div>
</td>
<td class="content">
<code>AllowGroups</code> and <code>DenyGroups</code> properties are only supported on OpenShift.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Users who are not allowed will not be able to use Eclipse&#160;Che and will see the following warning when trying to access the User Dashboard:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/advanced-authorization/warning.png" alt="User might not be allowed warning">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="sect1">
<h2 id="_dogfooding-in-action">Dogfooding In Action</h2>
<div class="sectionbody">
<div class="paragraph">
<p>For internal development and dogfooding purposes we use an <a href="https://www.redhat.com/en/technologies/cloud-computing/openshift/dedicated">OpenShift Dedicated</a> cluster with GitHub identity provider setup. Under the <code>Users</code> tab, all the accounts that have access to the cluster are listed e.g.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/advanced-authorization/user.png" alt="OpenShift User">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>There are a few teams working on Eclipse&#160;Che with the corresponding OpenShift Groups created and managed on the cluster:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/advanced-authorization/groups.png" alt="OpenShift Groups">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>Each OpenShift group explicitly defines a set of users that belong to it:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">kind</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">Group</span>
<span style="color: #a6e22e">apiVersion</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">user.openshift.io/v1</span>
<span style="color: #a6e22e">metadata</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">che-team-a</span>
<span style="color: #a6e22e">users</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">ibuziuk</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">...</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>advancedAuthorization</code> property of the Eclipse&#160;Che Custom Resource explicitly defines the groups which are allowed:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml">  <span style="color: #a6e22e">networking</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #a6e22e">auth</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">advancedAuthorization</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">allowGroups</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">che-team-a</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">che-team-b</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">che-docs</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Users who do not belong to the groups from the list above are not allowed to use Eclipse&#160;Che. This configuration allows the cluster administrator to explicitly manage the onboarding and curate the access.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>More details about advanced authorization can be found in the <a href="https://eclipse.dev/che/docs/stable/administration-guide/configuring-advanced-authorization/">official documentation</a>. As always, we look forward to your valuable feedback, comments, remarks, and proposals on this work or anything else related to the project, through our <a href="https://accounts.eclipse.org/mailing-list/che-dev">mailing list</a>, <a href="https://github.com/eclipse/che/issues">GitHub</a>, or <a href="https://ecd-tools.slack.com/archives/C05SD64M85R">Slack</a>.
&#160;<br>
We wish you an enjoyable and productive coding experience with Eclipse&#160;Che!</p>
</div>
</div>
</div>]]></content><author><name>Ilya Buziuk</name></author><summary type="html"><![CDATA[The article describes how to configure advanced authorization in Eclipse Che]]></summary></entry><entry><title type="html">Decommissioning the PostgreSQL database</title><link href="https://che.eclipseprojects.io/2023/03/20/@ilya.buziuk-decommissioning-postgresql-database.html" rel="alternate" type="text/html" title="Decommissioning the PostgreSQL database" /><published>2023-03-20T00:00:00+00:00</published><updated>2023-03-20T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2023/03/20/@ilya.buziuk/decommissioning-postgresql-database</id><content type="html" xml:base="https://che.eclipseprojects.io/2023/03/20/@ilya.buziuk-decommissioning-postgresql-database.html"><![CDATA[<div class="paragraph">
<p>Historically Eclipse&#160;Che used a PostgreSQL database for storing relevant information about the users, workspaces, devfiles, preferences, SSH keys, etc.
Overall there were dozens of tables in the database which represent the state of the Eclipse&#160;Che instance:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash">psql <span style="color: #f92672;font-weight: bold">(</span>13.7<span style="color: #f92672;font-weight: bold">)</span>
Type <span style="color: #e6db74">"help"</span> <span style="color: #66d9ef;font-weight: bold">for </span>help.

<span style="color: #f8f8f2">dbche</span><span style="color: #f92672;font-weight: bold">=&gt;</span> <span style="color: #ae81ff">\d</span>t
                            List of relations
 Schema |                      Name                       | Type  | Owner
<span style="color: #f92672">--------</span>+-------------------------------------------------+-------+-------
 public | account                                         | table | pgche
 public | che_factory                                     | table | pgche
 public | che_factory_action                              | table | pgche
 public | che_factory_action_properties                   | table | pgche
 public | che_factory_ide                                 | table | pgche
 public | che_factory_on_app_closed_action                | table | pgche
 public | che_factory_on_app_closed_action_value          | table | pgche
 public | che_factory_on_app_loaded_action                | table | pgche
 public | che_factory_on_app_loaded_action_value          | table | pgche
 public | che_factory_on_projects_loaded_action           | table | pgche
 public | che_factory_on_projects_loaded_action_value     | table | pgche
 public | che_free_resources_limit                        | table | pgche
 public | che_free_resources_limit_resource               | table | pgche
 public | che_k8s_machine                                 | table | pgche
 public | che_k8s_machine_attributes                      | table | pgche
 public | che_k8s_runtime                                 | table | pgche
 public | che_k8s_server                                  | table | pgche
 public | che_k8s_server_attributes                       | table | pgche
 public | che_member                                      | table | pgche
 public | che_member_actions                              | table | pgche
 public | che_organization                                | table | pgche
 public | che_organization_distributed_resources          | table | pgche
 public | che_organization_distributed_resources_resource | table | pgche
 public | che_resource                                    | table | pgche
 public | che_sign_key                                    | table | pgche
 public | che_sign_key_pair                               | table | pgche
 public | che_system_permissions                          | table | pgche
 public | che_system_permissions_actions                  | table | pgche
 public | che_userdevfile_permissions                     | table | pgche
 public | che_userdevfile_permissions_actions             | table | pgche
 public | che_worker                                      | table | pgche
 public | che_worker_actions                              | table | pgche
 public | che_workspace_activity                          | table | pgche
 public | che_workspace_cfg_attributes                    | table | pgche
 public | <span style="color: #f8f8f2">command</span>                                         | table | pgche
 public | command_attributes                              | table | pgche
 public | devfile                                         | table | pgche
 public | devfile_action                                  | table | pgche
 public | devfile_attributes                              | table | pgche
 public | devfile_command                                 | table | pgche
 public | devfile_command_attributes                      | table | pgche
 public | devfile_component                               | table | pgche
 public | devfile_component_arg                           | table | pgche
 public | devfile_component_command                       | table | pgche
 public | devfile_component_preferences                   | table | pgche
 public | devfile_component_selector                      | table | pgche
 public | devfile_endpoint                                | table | pgche
 public | devfile_endpoint_attributes                     | table | pgche
 public | devfile_entrypoint                              | table | pgche
 public | devfile_entrypoint_arg                          | table | pgche
 public | devfile_entrypoint_commands                     | table | pgche
 public | devfile_entrypoint_selector                     | table | pgche
 public | devfile_env                                     | table | pgche
 public | devfile_project                                 | table | pgche
 public | devfile_volume                                  | table | pgche
 public | environment                                     | table | pgche
 public | externalmachine                                 | table | pgche
 public | externalmachine_attributes                      | table | pgche
 public | externalmachine_env                             | table | pgche
 public | k8s_runtime_command                             | table | pgche
 public | k8s_runtime_command_attributes                  | table | pgche
 public | machine_volume                                  | table | pgche
 public | preference                                      | table | pgche
 public | preference_preferences                          | table | pgche
 public | profile                                         | table | pgche
 public | profile_attributes                              | table | pgche
 public | projectattribute                                | table | pgche
 public | projectattribute_values                         | table | pgche
 public | projectconfig                                   | table | pgche
 public | projectconfig_mixins                            | table | pgche
 public | schema_version                                  | table | pgche
 public | sequence                                        | table | pgche
 public | serverconf                                      | table | pgche
 public | serverconf_attributes                           | table | pgche
 public | serverconf_properties                           | table | pgche
 public | sourcestorage                                   | table | pgche
 public | sourcestorage_parameters                        | table | pgche
 public | sshkeypair                                      | table | pgche
 public | user_aliases                                    | table | pgche
 public | userdevfile                                     | table | pgche
 public | usr                                             | table | pgche
 public | workspace                                       | table | pgche
 public | workspace_attributes                            | table | pgche
 public | workspaceconfig                                 | table | pgche
<span style="color: #f92672;font-weight: bold">(</span>84 rows<span style="color: #f92672;font-weight: bold">)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>However, with the switch to <a href="https://che.eclipseprojects.io/2021/10/12/@mario.loriedo-devfile-v2-and-the-devworkspace-operator-p1.html">DevWorkspace Operator and Devfile v2</a>, all this data becomes irrelevant since we started using native Kubernetes resources instead.</p>
</div>
<div class="paragraph">
<p>The data is now stored and managed as Kubernetes resources such as Secrets and ConfigMaps in the user namespaces:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/decommissioning-postgresql-database/secrets.png" alt="Secrets from the user namespace">
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/decommissioning-postgresql-database/configmaps.png" alt="ConfigMaps from the user namespace">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>As an example, SSH keys are now configured using the dedicated <a href="https://github.com/devfile/devworkspace-operator/blob/main/docs/additional-configuration.adoc#configuring-devworkspaces-to-use-ssh-keys-for-git-operations">secret</a>.</p>
</div>
<div class="paragraph">
<p>Starting from the Eclipse&#160;Che <code>7.62.0</code> release, the PostgreSQL deployment has ceased to exist, resulting in only 5 operands: Che Server, User Dashboard, Plugin Registry, Devfile Registry, and Gateway.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/decommissioning-postgresql-database/operands.png" alt="Eclipse Che operands">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<div class="title">Important</div>
</td>
<td class="content">
No manual migration steps or action items are required for this change to take effect. The PostgreSQL deployment will be gracefully terminated and removed during the update. All the obsolete data stored in the database will be removed.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>It is also worth mentioning that most of the <code><a href="https://&lt;che_fqdn&gt;/swagger" class="bare">https://&lt;che_fqdn&gt;/swagger</a></code> endpoints are now deprecated and going to be removed in future releases. The only endpoints that are still used are related to the namespace provisioning, Git OAuth configuration, and the factory flow:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>/kubernetes/namespace/*</code></p>
</li>
<li>
<p><code>/oauth/*</code></p>
</li>
<li>
<p><code>/factory/*</code></p>
</li>
</ul>
</div>
<div class="sect1">
<h2 id="_next-steps">Next steps</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Decommissioning the PostgreSQL database in favor of native Kubernetes resources provides several benefits, including: improved scalability, flexibility, and easier management.</p>
</div>
<div class="paragraph">
<p>Ultimately, moving away from traditional database architectures and embracing Kubernetes makes Eclipse&#160;Che agile and competitive in an increasingly complex and demanding technology landscape.
For example, in the next Eclipse&#160;Che releases we plan to make it possible to configure a number of replicas for operands from the CheCluster CustomResource, which was not possible before due to the PostgreSQL database dependency:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">spec</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">components</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #a6e22e">cheServer</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">deployment</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">replicas</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #ae81ff">1</span>
    <span style="color: #a6e22e">dashboard</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">deployment</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">replicas</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #ae81ff">1</span>
    <span style="color: #a6e22e">devfileRegistry</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">deployment</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">replicas</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #ae81ff">1</span>
    <span style="color: #a6e22e">pluginRegistry</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">deployment</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">replicas</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">1</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The progress of this particular feature can be tracked in the upstream <a href="https://github.com/eclipse/che/issues/22067">issue</a>.
As always, we look forward to your valuable feedback, comments, remarks, and proposals on this work or anything else related to the project, through our <a href="https://accounts.eclipse.org/mailing-list/che-dev">mailing list</a>, <a href="https://github.com/eclipse/che/issues">GitHub</a>, or <a href="https://mattermost.eclipse.org/eclipse/channels/eclipse-che">Mattermost</a>.
&#160;<br>
We wish you an enjoyable and productive coding experience with Eclipse&#160;Che!</p>
</div>
</div>
</div>]]></content><author><name>Ilya Buziuk</name></author><summary type="html"><![CDATA[The article describes how the PostgreSQL database dependency has been removed in Eclipse Che]]></summary></entry></feed>