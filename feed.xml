<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://che.eclipseprojects.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://che.eclipseprojects.io/" rel="alternate" type="text/html" /><updated>2024-05-22T13:12:25+00:00</updated><id>https://che.eclipseprojects.io/feed.xml</id><title type="html">Eclipse Che Blog</title><subtitle>Eclipse Che runs IDEs in Kubernetes.</subtitle><entry><title type="html">Developing OpenWRT in QEMU with Eclipse Che</title><link href="https://che.eclipseprojects.io/2024/05/22/@olexii.orel-openwrt-helloworld-package.html" rel="alternate" type="text/html" title="Developing OpenWRT in QEMU with Eclipse Che" /><published>2024-05-22T00:00:00+00:00</published><updated>2024-05-22T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2024/05/22/@olexii.orel/openwrt-helloworld-package</id><content type="html" xml:base="https://che.eclipseprojects.io/2024/05/22/@olexii.orel-openwrt-helloworld-package.html"><![CDATA[<div class="paragraph">
<p><a href="https://openwrt.org/">OpenWrt</a> is a highly extensible GNU/Linux distribution for embedded devices (typically wireless routers). OpenWrt is built from the ground up to be a full-featured, easily modifiable operating system for embedded devices. You can have all the features you need with no bloat, powered by a modern Linux kernel.</p>
</div>
<div class="paragraph">
<p>We can create and develop <a href="https://openwrt.org/docs/guide-developer/creating-a-cmake-package-in-openwrt">OpenWRT CMake packages</a> with Eclipse Che.</p>
</div>
<div class="paragraph">
<p>In this blog post, we will review developing OpenWRT in <a href="https://www.qemu.org/">QEMU</a> with Eclipse Che in 4 parts:</p>
</div>
<div class="paragraph">
<p><a href="#part1">PART 1: Quick start with prebuild resources</a></p>
</div>
<div class="paragraph">
<p><a href="#part2">PART 2: (optional) Build all packages and the kernel</a></p>
</div>
<div class="paragraph">
<p><a href="#part3">PART 3: Run OpenWRT in QEMU</a></p>
</div>
<div class="paragraph">
<p><a href="#part4">PART 4: Debugging helloworld package</a></p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
In this blog post, we will use <a href="https://github.com/che-incubator/openwrt-helloworld-package.git">OpenWrt HelloWorld package</a>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>First of all, we need to create a new workspace from the repo <a href="https://github.com/che-incubator/openwrt-helloworld-package.git">openwrt-helloworld-package</a> with Eclipse Che. The easiest way to do this is to use <a href="https://eclipse.dev/che/docs/stable/hosted-che/hosted-che/">Eclipse Che hosted by Red Hat</a> and create a workspace by navigating to the following URL - <a href="https://workspaces.openshift.com#https://github.com/che-incubator/openwrt-helloworld-package" class="bare">https://workspaces.openshift.com#https://github.com/che-incubator/openwrt-helloworld-package</a>.</p>
</div>
<div class="sect1">
<h2 id="part1">PART 1: Quick start with prebuild resources</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Prebuilt resources could be applied for a quick start with Eclipse Che. We could do this by running the next tasks from the <a href="https://github.com/che-incubator/openwrt-helloworld-package/blob/main/devfile.yaml">devfile</a>:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>Add prebuilt resources</code></p>
</li>
</ol>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
After adding prebuilt resources, we should see the <code>openwrt-*.img.gz</code> file in the <code>output</code> directory. Prebuilt resources were added to the runtime image during the last successful GitHub image build action.
</td>
</tr>
</table>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/developing-openwrt/add-prebuilt-resources.png" alt="Add prebuilt resources">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="part2">PART 2: (optional) Build all packages and the kernel</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Instead of using prebuilt resources from STEP 1, we can install all package definitions, copy <a href="https://github.com/che-incubator/openwrt-helloworld-package/blob/main/configs/.x86-generic.config"><code>.config</code></a> file and build all packages and the kernel. We can do this by running the following tasks from the <a href="https://github.com/che-incubator/openwrt-helloworld-package/blob/main/devfile.yaml">devfile</a>:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>Install all package definitions</code></p>
</li>
<li>
<p><code>Copy diff-config to OpenWRT</code></p>
</li>
<li>
<p><code>Build all packages and the kernel</code></p>
</li>
</ol>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
The build process may take a while, which is why using prebuilt resources from STEP 1 could be more desirable for getting started quickly. After the build is complete, we can see the <code>openwrt-*.img.gz</code> file in the <code>output</code> directory.
</td>
</tr>
</table>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/developing-openwrt/build-all-packages-and-the-kernel.png" alt="Build all packages and the kernel" width="100%">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="part3">PART 3: Run OpenWRT in QEMU</h2>
<div class="sectionbody">
<div class="paragraph">
<p>After adding prebuilt resources or building all packages and the kernel, OpenWRT could be run in the QEMU VM by running the following tasks from the <a href="https://github.com/che-incubator/openwrt-helloworld-package/blob/main/devfile.yaml">devfile</a>:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>Running OpenWRT in a QEMU VM</code></p>
</li>
</ol>
</div>
<div class="paragraph">
<p>After running the task, we see the OpenWRT booting in the QEMU machine emulator and virtualizer.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/developing-openwrt/running-openwrt-in-qemu-vm.png" alt="Running OpenWRT in a QEMU VM">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>We can access the OpenWRT console by running the task <code>Remote access to OpenWRT via SSH</code> and start the helloworld package by running:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash">helloworld</code></pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/developing-openwrt/run-helloworld.png" alt="Run helloworld package">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="part4">PART 4: Debugging helloworld package</h2>
<div class="sectionbody">
<div class="paragraph">
<p>After starting OpenWRT in a QEMU VM, we need to run a remote gdbserver for debugging. We can do this by running the task <code>Start remote GDB Server</code> from the <a href="https://github.com/che-incubator/openwrt-helloworld-package/blob/main/devfile.yaml">devfile</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/developing-openwrt/start-remote-gdbserver.png" alt="Start remote gdbserver">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>Then, we can debug the helloworld package with IDE:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/developing-openwrt/remote-debugging.png" alt="Start remote gdbserver">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
The task <code>Start remote GDB Server</code> should be run before each new debug session.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Thank you for reading. I hope you found this article helpful.</p>
</div>
</div>
</div>]]></content><author><name>Oleksii Orel</name></author><summary type="html"><![CDATA[Developing OpenWRT helloworld package in QEMU machine emulator and virtualizer with Eclipse Che.]]></summary></entry><entry><title type="html">Drive a coupe with the overlay storage driver - a Podman build comparison</title><link href="https://che.eclipseprojects.io/2024/03/28/@david.kwon-fuse-storage-driver.html" rel="alternate" type="text/html" title="Drive a coupe with the overlay storage driver - a Podman build comparison" /><published>2024-03-28T00:00:00+00:00</published><updated>2024-03-28T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2024/03/28/@david.kwon/fuse-storage-driver</id><content type="html" xml:base="https://che.eclipseprojects.io/2024/03/28/@david.kwon-fuse-storage-driver.html"><![CDATA[<div class="paragraph">
<p>With the fuse-overlayfs storage driver, you can enable faster builds and a more optimized storage usage for <code>podman build</code> and <code>buildah</code> within your Eclipse Che cloud development environment (CDE). Before diving into its advantages, let&#8217;s first discuss some prerequisite details about container image layers and storage drivers.</p>
</div>
<div class="paragraph">
<p>Container images consist of <a href="https://docs.docker.com/build/guide/layers">layers</a> which are stored and used for building and running containers. A huge benefit of this layer anatomy is that, assuming that each image layer stores only the file differences compared to the previous layer (i.e. the delta), each layer is small which generally allows time and space savings when building and running containers. This is because layers allow efficient caching and sharing between containers.</p>
</div>
<div class="paragraph">
<p>A <a href="https://docs.docker.com/storage/storagedriver/select-storage-driver">storage driver</a> for Docker and Podman is what manages these image layers upon image pulling, building, and running. By default, Eclipse Che uses the vfs storage driver for Podman in the <a href="https://github.com/devfile/developer-images">Universal Development Image</a>. While vfs is generally considered very stable, the lack of <a href="https://en.wikipedia.org/wiki/Copy-on-write">copy-on-write</a> (CoW) support poses a significant disadvantage compared to other storage drivers like fuse-overlayfs, overlay2, and btrfs.</p>
</div>
<div class="sect1">
<h2 id="_what-is-the-disadvantage-of-vfs">What is the disadvantage of vfs?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>As mentioned previously, having smaller layers allows time and space savings when building and running containers. The disadvantage with vfs&#8217;s lack of CoW is that whenever a new layer is created, a complete copy of the previous layer is created. This can create duplicate and redundant data in each layer, and can quickly fill up your storage space especially when working with larger images. Comparing that with image layers created with CoW-supported storage drivers like fuse-overlayfs, those image layers would typically not contain redundant data and would remain smaller since only the delta is stored in each image layer.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/fuse-storage-driver/layer-diagram.png" alt="layer diagram">
</div>
</div>
<div class="paragraph">
<p>Fig. 1. Example comparison of image layer sizes between vfs and overlay storage drivers. The total size of the image layers created with overlay is about half the size of the image layers created with vfs.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_how-can-we-use-fuse-overlayfs-in-an-eclipse-che-cloud-development-environment">How can we use fuse-overlayfs in an Eclipse Che cloud development environment?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To use fuse-overlayfs in a CDE, the CDE&#8217;s pod requires access to the <code>/dev/fuse</code> device from the host operating system. For Kubernetes, support for this can vary depending on the platform. However, for Openshift, version 4.15 allows access to the <code>/dev/fuse</code> device <a href="https://docs.openshift.com/container-platform/4.15/release_notes/ocp-4-15-release-notes.html#ocp-4-15-nodes-dev-fuse">without any cluster modifications</a>. Here&#8217;s the documentation on how to <a href="https://eclipse.dev/che/docs/stable/end-user-guide/accessing-fuse">enable the overlay storage driver for CDEs running on OpenShift 4.15 and older versions</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_how-does-fuse-overlayfs-compare-to-vfs-in-an-eclipse-che-cde">How does fuse-overlayfs compare to vfs in an Eclipse Che CDE?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A series of tests were performed to measure the build time and storage usage differences between the fuse-overlayfs and vfs storage drivers in an Eclipse Che CDE. For this blog post, I will present the measurements for building a series of different GitHub projects. If you&#8217;re interested, the results for tests that were specifically designed to highlight the characteristics of each storage driver are available in this <a href="https://github.com/dkwon17/storage-driver-test/blob/main/results.md">GitHub repository</a>.</p>
</div>
<div class="paragraph">
<p>All tests presented in Fig. 2. were run on an OpenShift Dedicated 4.15.3 cluster with a productized version of Eclipse Che 7.82.0.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Test name</th>
<th class="tableblock halign-left valign-top">Project URL</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">dashboard</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/eclipse-che/che-dashboard">che-dashboard</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">dashboard-edit</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/eclipse-che/che-dashboard">che-dashboard</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">operator</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/eclipse-che/che-operator">che-operator</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">operator-edit</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/eclipse-che/che-operator">che-operator</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">server</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/eclipse-che/che-server">che-server</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">server-edit</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/eclipse-che/che-server">che-server</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">nginx-alpine</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/nginxinc/docker-nginx/tree/master/stable/alpine">docker-nginx</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">quarkus-api-example</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/che-incubator/quarkus-api-example">quarkus-api-example</a></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Fig. 2. Table of test names name project URLs.</p>
</div>
<div class="paragraph">
<p>For each test apart from the &lt;projectname&gt;-edit tests, the <code>podman system reset</code> command was run before running each test in order to clear the graphroot directory. This removes all image layers, therefore these tests measure a clean-build scenario, just like when a user creates a CDE and runs <code>podman build</code> for the first time.</p>
</div>
<div class="paragraph">
<p>For the &lt;projectname&gt;-edit tests, the image container was built beforehand. The tests measure a rebuild of the image after changing the source code without running <code>podman system reset</code> command. This scenario mimics the case where the developer is running a new build after making code changes in their CDE.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/fuse-storage-driver/image-build-time.png" alt="image build time">
</div>
</div>
<div class="paragraph">
<p>Fig. 3. Container image build time results</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/fuse-storage-driver/graphroot-size.png" alt="graphroot size">
</div>
</div>
<div class="paragraph">
<p>Fig. 4. Graphroot directory size results</p>
</div>
<div class="paragraph">
<p>For all tests, the fuse-overlayfs storage driver had faster build times and significantly smaller storage consumption compared to vfs. The benefits of CoW is especially evident in Fig. 4. For example the operator-edit test showed that by using fuse-overlayfs, the graphroot directory was about 88% smaller, saving about 15GB of storage.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In conclusion, the fuse-overlayfs storage driver should be considered for your Eclipse Che CDEs, saving time and storage thanks to the CoW support. In general, there is no “best” storage driver because performance, stability, and usability of each storage driver is dependent on your specific workload and environment. However, with vfs not supporting CoW, fuse-overlayfs is a much more suitable choice for image layer management.</p>
</div>
<div class="paragraph">
<p>For additional content regarding fuse-overlayfs in Eclipse Che, check out this <a href="https://upstreamwithoutapaddle.com/blog%20post/2023/08/10/Podman-In-Dev-Spaces-With-Fuse-Overlay.html">blog post and demo project</a>.</p>
</div>
<div class="paragraph">
<p>Thank you for reading.</p>
</div>
</div>
</div>]]></content><author><name>David Kwon</name></author><summary type="html"><![CDATA[Enable faster builds and storage optimization with the fuse-overlayfs storage driver in Eclipse Che.]]></summary></entry><entry><title type="html">Customizing Eclipse Che Cloud Development Environments</title><link href="https://che.eclipseprojects.io/2024/02/05/@mario.loriedo-cde-customization.html" rel="alternate" type="text/html" title="Customizing Eclipse Che Cloud Development Environments" /><published>2024-02-05T00:00:00+00:00</published><updated>2024-02-05T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2024/02/05/@mario.loriedo/cde-customization</id><content type="html" xml:base="https://che.eclipseprojects.io/2024/02/05/@mario.loriedo-cde-customization.html"><![CDATA[<div class="paragraph">
<p>Eclipse Che provides Cloud Development Environments (CDEs) with a click. The default container of those CDEs, what we call the <a href="https://github.com/devfile/developer-images/">universal developer image</a>, has a lot of pre-installed development tools but may not have the right version or the right tool for you. If that&#8217;s the case, no worries: one of Eclipse Che CDEs' main assets is configurability!</p>
</div>
<div class="paragraph">
<p>In this blog post we will review Eclipse Che CDEs' customization in 4 parts:</p>
</div>
<div class="paragraph">
<p><a href="#part1">PART 1: Eclipse Che default CDE</a></p>
</div>
<div class="paragraph">
<p><a href="#part2">PART2: Customize the CDE container image</a></p>
</div>
<div class="paragraph">
<p><a href="#part3">PART3: Change CDE properties with a Devfile</a></p>
</div>
<div class="paragraph">
<p><a href="#part4">PART4: Secrets and other CDE configurations that cannot be specified in Devfile</a></p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
To help illustrate this blog post we will use a <a href="https://github.com/l0rd/rails-sample">Ruby on Rails project</a>. Ruby is a good example because the default development container doesn&#8217;t include Ruby development tools at all. For other languages such as Java, Go, NodeJS, Python and .NET, the Eclipse Che default development image includes a few tools, and all the customizations in this blog post may not be necessary.
</td>
</tr>
</table>
</div>
<div class="sect1">
<h2 id="part1">PART 1: Eclipse Che default CDE</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When no Devfile is found in a git repository and the developer doesn&#8217;t provide a URL, Eclipse Che uses a default development environment.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/cde-customization/ruby-sample-main-branch.gif" alt="ruby sample main branch">
</div>
</div>
<div class="paragraph">
<p>&#160;<br>
The <a href="https://github.com/l0rd/rails-sample">rails-sample</a> git repository has no <code>devfile.yaml</code>, and Che informs us about that:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Devfile could not be found in <a href="https://github.com/l0rd/rails-sample" class="bare">https://github.com/l0rd/rails-sample</a>. Applying the default configuration</p>
</div>
</blockquote>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Click <a href="https://workspaces.openshift.com/#https://github.com/l0rd/rails-sample">here</a> to open <a href="https://github.com/l0rd/rails-sample" class="bare">https://github.com/l0rd/rails-sample</a> in the Red Hat Developer Sandbox to try it out.
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="_default-cde-pod-details">Default CDE Pod details</h3>
<div class="paragraph">
<p>Let&#8217;s have a look at the Kubernetes objects that get created when the default Eclipse Che CDE is started. From the Visual Studio Code Terminal we can list Kubernetes Pods:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ kubectl get pod
NAME                                         READY   STATUS    RESTARTS   AGE
workspacef14b414e91574d61-675c894dbb-ch727   2/2     Running   0          2m</pre>
</div>
</div>
<div class="paragraph">
<p>This is the CDE Pod. Then we can look at the images of the containers of the Pod:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ kubectl get pods -o jsonpath='{range ..containers[*]}{.image}{"\n"}{end}'
quay.io/devfile/universal-developer-image:ubi8-latest
quay.io/eclipse/che--traefik:v2.9.10-8d81a9df1435f9f3d...</pre>
</div>
</div>
<div class="paragraph">
<p>The first container image is <code>registry.redhat.io/devspaces/udi-rhel8</code> or <code>UDI</code> (Universal Developer Image) and has a default set of development tools. The second is <code>traefik</code>, a <a href="https://github.com/traefik/traefik/">reverse proxy</a> that Eclipse Che uses to authenticate CDE users.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
You may see a different output. That&#8217;s because Eclipse Che can be configured to use a different default image. For example, on Red Hat Developer Sandbox, the default image is <code>registry.redhat.io/devspaces/udi-rhel8</code>.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_universal-developer-image">Universal Developer Image</h3>
<div class="paragraph">
<p>The default container image, <code>quay.io/devfile/universal-developer-image</code>, includes quite a few development tools: essential CLI tools, popular programming languages and cloud development tools. It&#8217;s called <em>Universal Developer Image</em> and the following diagram summarizes its content.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/cde-customization/udi.png" alt="udi">
</div>
</div>
<div class="paragraph">
<p>&#160;<br>
The Universal Developer Image <a href="https://github.com/devfile/developer-images/blob/main/universal/ubi8/Dockerfile">Dockerfile</a> has the details of all the tools, runtimes, environment variables etc&#8230;&#8203;that are included (<a href="https://github.com/redhat-developer/devspaces-images/blob/devspaces-3-rhel-8/devspaces-udi/Dockerfile">here is the OpenShift Dev Spaces version</a>).</p>
</div>
</div>
<div class="sect2">
<h3 id="_when-the-default-is-not-enough">When the default is not enough</h3>
<div class="paragraph">
<p>The configuration of the <code>rails-sample</code> Cloud Development Environment is good enough for reading the source code and doing some basic editing, but some essential features of the IDE are missing:</p>
</div>
<div class="paragraph">
<p><strong>Starting the rails application fails:</strong> Rails requires Ruby which is not installed in the default container.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/cde-customization/ruby-sample-main-branch-rails-server.png" alt="ruby sample main branch rails server">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p><strong>The <a href="https://marketplace.visualstudio.com/items?itemName=Shopify.ruby-lsp">Ruby LSP extension</a> activation fails:</strong> the extension from Shopify fails because Ruby is not installed.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/cde-customization/ruby-sample-main-branch-ruby-lsp.png" alt="ruby sample main branch ruby lsp">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>In PART2 we are going to address those problems by using a container image with the required development tools.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="part2">PART2: Customize the CDE container image</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In PART 1 we have seen that Eclipse Che CDEs run in a container of a Kubernetes Pod. In this section we are going to see how to replace the default Eclipe Che CDE image with a custom one.</p>
</div>
<div class="sect2">
<h3 id="_the-dockerfile">The Dockerfile</h3>
<div class="paragraph">
<p>We want to build an image with the pre-requisite to run the <a href="https://github.com/l0rd/rails-sample">ruby on rails example</a> seen in PART 1. The following Dockerfile provides the specification of such image.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="docker"><span style="color: #66d9ef;font-weight: bold">FROM</span><span style="color: #e6db74"> quay.io/devfile/universal-developer-image:latest</span>

<span style="color: #75715e;font-style: italic"># Switching to root user (setting UID to 0) because next</span>
<span style="color: #75715e;font-style: italic"># commands require root privileges. Universal Developer</span>
<span style="color: #75715e;font-style: italic"># Image default user has UID set to 10001.</span>
<span style="color: #66d9ef;font-weight: bold">USER</span><span style="color: #e6db74"> 0</span>

<span style="color: #75715e;font-style: italic"># Install a recent version of ruby</span>
<span style="color: #66d9ef;font-weight: bold">ENV</span><span style="color: #e6db74"> RUBY_VERSION 3.1.2</span>
<span style="color: #66d9ef;font-weight: bold">RUN </span>dnf <span style="color: #f92672">-y</span> update <span style="color: #f92672;font-weight: bold">&amp;&amp;</span> <span style="color: #ae81ff">\
</span>    dnf <span style="color: #f92672">-y</span> <span style="color: #f8f8f2">install </span>rbenv ruby-build sqlite <span style="color: #f92672;font-weight: bold">&amp;&amp;</span> <span style="color: #ae81ff">\
</span>    dnf <span style="color: #f92672">-y</span> clean all <span style="color: #f92672">--enablerepo</span><span style="color: #f92672;font-weight: bold">=</span><span style="color: #e6db74">'*'</span> <span style="color: #f92672;font-weight: bold">&amp;&amp;</span> <span style="color: #ae81ff">\
</span>    rbenv <span style="color: #f8f8f2">install</span> <span style="color: #f8f8f2">$RUBY_VERSION</span> <span style="color: #f92672;font-weight: bold">&amp;&amp;</span> <span style="color: #ae81ff">\
</span>    rbenv global <span style="color: #f8f8f2">$RUBY_VERSION</span> <span style="color: #f92672;font-weight: bold">&amp;&amp;</span> <span style="color: #ae81ff">\
</span>    <span style="color: #f8f8f2">echo</span> <span style="color: #e6db74">'eval "$(rbenv init - bash)"'</span> <span style="color: #f92672;font-weight: bold">&gt;&gt;</span> <span style="color: #f8f8f2">$HOME</span>/.bashrc <span style="color: #f92672;font-weight: bold">&amp;&amp;</span> <span style="color: #ae81ff">\
</span>    <span style="color: #f8f8f2">echo</span> <span style="color: #e6db74">'eval "$(rbenv init - sh)"'</span> <span style="color: #f92672;font-weight: bold">&gt;</span> /etc/profile.d/rbenv.sh

<span style="color: #66d9ef;font-weight: bold">ENV</span><span style="color: #e6db74"> PATH="${HOME}/.rbenv/shims:${PATH}" ENV="/etc/profile"</span>

<span style="color: #75715e;font-style: italic"># Install rails</span>
<span style="color: #66d9ef;font-weight: bold">RUN </span>gem <span style="color: #f8f8f2">install </span>rails

<span style="color: #75715e;font-style: italic"># Switch back to default user</span>
<span style="color: #66d9ef;font-weight: bold">USER</span><span style="color: #e6db74"> 10001</span>

<span style="color: #75715e;font-style: italic"># Set bundle config</span>
<span style="color: #66d9ef;font-weight: bold">RUN </span>bundle config <span style="color: #f92672">--global</span> path <span style="color: #f8f8f2">$HOME</span>/.bundle</code></pre>
</div>
</div>
<div class="paragraph">
<p>The base image in the Dockerfile above is Eclipse Che Universal Developer Image (<code>quay.io/devfile/universal-developer-image:latest</code>). The remaining instructions in the Dockerfile install <code>ruby</code> and <code>rails</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
It&#8217;s not necessary to use the Eclipse Che default image as the base image. I am maintaining <a href="https://github.com/devfile/developer-images/">a repository with a list of Dockerfiles for Che CDEs</a> using popular base images.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_build-and-publish-the-custom-image">Build and publish the custom image</h3>
<div class="paragraph">
<p>The Dockerfile can be built locally (on your laptop) and pushed to a remote registry such as Docker Hub or Quay.io. That requires <code>docker</code> or <code>podman</code> and a good Internet connection (the base image, UDI, has a size of a few Gigabytes).</p>
</div>
<div class="paragraph">
<p>Another option is to build and push the <code>Dockerfile</code> without leaving the <code>ruby-sample</code> CDE started in STEP1. <code>podman</code> is included in the universal developer image and can be used to build and push the Dockerfile above.</p>
</div>
<div class="paragraph">
<p>My preferred alternative though, and the one used in <a href="https://github.com/l0rd/rails-sample/blob/dockerfile/.devfile.Dockerfile">branch <code>dockerfile</code> of the ruby-sample repository</a>, is to leverage GitHub actions to automatically build and push the image:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Add the Dockerfile to the git repository as <code>.devfile.Dockerfile</code></p>
</li>
<li>
<p>Add a GitHub workflow to build and push the image automatically (<a href="https://github.com/l0rd/rails-sample/blob/dockerfile/.github/workflows/image-build.yaml">see an example here</a>)</p>
</li>
<li>
<p>Push both files to a remote branch of the git repository</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Last step will trigger the GitHub action job that builds the image:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/cde-customization/github-action.png" alt="github action">
</div>
</div>
<div class="paragraph">
<p>&#160;<br>
As a result the image will be built and published on <code>quay.io</code> automatically after every push to the repository. The job in the <a href="https://github.com/l0rd/rails-sample/blob/dockerfile/.github/workflows/image-build.yaml#L29">branch <code>dockerfile</code> of the ruby-sample repository</a> builds and publishes the image <code>quay.io/mloriedo/rails-blog-cde:latest</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
I have named the file as <code>.devfile.Dockerfile</code>: even though any name is ok, I like to use the <code>.devfile</code> prefix as these images are usually used in devfiles (as we will do STEP 3).
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_start-a-new-cde-using-the-custom-image">Start a new CDE using the custom image</h3>
<div class="paragraph">
<p>The simplest way to start a workspace using a new custom image is to use Eclispe Che URL parameter <a href="https://eclipse.dev/che/docs/stable/end-user-guide/url-parameter-for-container-image/"><code>?image=&lt;image-name&gt;</code></a>.</p>
</div>
<div class="paragraph">
<p>For example, to start a CDE using the custom image <code>quay.io/mloriedo/rails-blog-cde</code> and cloning rails-sample, the following string can be used in the "Create Workspace" page:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>https://github.com/l0rd/rails-sample&amp;image=quay.io/mloriedo/rails-blog-cde</pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/cde-customization/image-url-parameter.png" alt="image url parameter">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>Clicking <a href="https://workspaces.openshift.com/#https://github.com/l0rd/rails-sample&amp;image=quay.io/mloriedo/rails-blog-cde">on this URL</a> automatically starts the customized CDE on the Red Hat Developer Sandbox.</p>
</div>
</div>
<div class="sect2">
<h3 id="_verify-the-new-cde-pod-image">Verify the new CDE Pod image</h3>
<div class="paragraph">
<p>The CDE Pod now uses a <code>rails-blog-cde</code> container rather than the Eclipse Che default universal developer image. To verify it open a Terminal from Visual Studio Code and run <code>kubectl</code>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ kubectl get pods -o jsonpath='{range ..containers[*]}{.image}{"\n"}{end}'
quay.io/mloriedo/rails-blog-cde:latest
quay.io/eclipse/che--traefik:v2.9.10-8d81a9df1435f9f3d...</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_run-ruby-on-rails-from-the-terminal">Run Ruby on Rails from the Terminal</h3>
<div class="paragraph">
<p>We can verify that the <code>rails-sample</code> application starts successfully from the Visual Studio Code Terminal:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ bundle install &amp;&amp; ./bin/rails server
(...)
=&gt; Booting Puma
=&gt; Rails 7.0.8 application starting in development
=&gt; Run `bin/rails server --help` for more startup options
Puma starting in single mode...
* Puma version: 5.6.8 (ruby 3.1.2-p20) ("Birdie's Version")
*  Min threads: 5
*  Max threads: 5
*  Environment: development
*          PID: 4119
* Listening on http://127.0.0.1:3000
* Listening on http://[::1]:3000
Use Ctrl-C to stop</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_install-ruby-lsp-visual-studio-code-extension">Install <code>ruby-lsp</code> Visual Studio Code extension</h3>
<div class="paragraph">
<p>Finally, the Ruby LSP extension, which failed to activate in STEP1, is now fully working:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/cde-customization/ruby-lsp-extension-fully-functional.png" alt="ruby lsp extension fully functional">
</div>
</div>
<div class="paragraph">
<p>&#160;<br>
Replacing the Eclipse Che default image with a custom one allowed us to include the right pre-requisites (ruby and rails) to the CDE. With that, we are able to run the application and the Visual Studio Code ruby extension.</p>
</div>
<div class="paragraph">
<p>But there are still some issues with the CDE that we would like to fix (e.g. CPU and memory are not enough, running the application is not automated, the application dependencies are not pre-fetch at startup etc&#8230;&#8203;). We will cover those in the next session where we will use the Devfile to perform more advanced configurations for the CDE.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
<div class="paragraph">
<p>We have seen how to replace the image of the CDE using a URL parameter. We will see in the next section that it can be done with a Devfile too. A third alternative is changing the image "on the fly" using <code>kubectl patch</code> against the DevWorkspace object:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash"><span style="color: #f8f8f2">DW_NAME</span><span style="color: #f92672;font-weight: bold">=</span><span style="color: #e6db74">"rails-sample"</span> <span style="color: #f92672;font-weight: bold">&amp;&amp;</span> <span style="color: #ae81ff">\</span>
<span style="color: #f8f8f2">IMAGE</span><span style="color: #f92672;font-weight: bold">=</span><span style="color: #e6db74">"quay.io/mloriedo/rails-blog-cde:latest"</span> <span style="color: #f92672;font-weight: bold">&amp;&amp;</span> <span style="color: #ae81ff">\</span>
kubectl patch dw <span style="color: #e6db74">"</span><span style="color: #66d9ef;font-weight: bold">${</span><span style="color: #f8f8f2">DW_NAME</span><span style="color: #66d9ef;font-weight: bold">}</span><span style="color: #e6db74">"</span> <span style="color: #f92672">--type</span><span style="color: #f92672;font-weight: bold">=</span><span style="color: #e6db74">'merge'</span> <span style="color: #ae81ff">\</span>
      <span style="color: #f92672">-p</span> <span style="color: #e6db74">'{"spec":
            {"template":
              {"components":
                [
                  { "name":"universal-developer-image",
                    "container":{"image":"'</span><span style="color: #f8f8f2">$IMAGE</span><span style="color: #e6db74">'"} }
                ]
              }
            }
          }'</span></code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="part3">PART3: Change CDE properties with a Devfile</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In Part 2 we have seen how to customize a CDE with a new container image. That helps to include some development tools that are not in Eclipse Che default environment.</p>
</div>
<div class="paragraph">
<p>But what about properties such as the required memory or CPU, the containers to run in the CDE Pod (a CDE can have multiple containers!), the exposed endpoints, the commands triggered at startup, at shutdown? These properties can be customized using a Devfile and in this Part 3 we are reviewing how to do that.</p>
</div>
<div class="sect2">
<h3 id="_define-a-devfile-for-an-eclipse-che-cde">Define a Devfile for an Eclipse Che CDE</h3>
<div class="paragraph">
<p>A Devfile is an <a href="https://www.cncf.io/projects/devfile/">open standard</a> to define Cloud Development Environments. It&#8217;s a YAML file used to configure Eclipse Che CDEs.</p>
</div>
<div class="paragraph">
<p>Here is a simple Devfile that specifies the container image built in STEP 2:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">schemaVersion</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2.2.0</span>
<span style="color: #a6e22e">metadata</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">rails-sample</span>
<span style="color: #a6e22e">components</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">devtools</span>
    <span style="color: #a6e22e">container</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">image</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">quay.io/mloriedo/rails-blog-cde:latest</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>It&#8217;s recommended to add the Devfile in the same git repository of the application being developed using the name <code>.devfile.yaml</code> (as in the <a href="https://github.com/l0rd/rails-sample/tree/devfile"><code>devfile</code> branch of the <code>rails-sample</code></a>). A Devfile in the git repository will evolve along with the application and will be applied automatically whenever a developer provides the git repository URL to start a CDE.</p>
</div>
<div class="paragraph">
<p>When it&#8217;s not possible to add a <code>.devfile.yaml</code> in the git repository, there is still the option to publish it (in a gist, pastebin or another git repository) and <a href="https://eclipse.dev/che/docs/stable/end-user-guide/starting-a-workspace-from-a-raw-devfile-url/">start the CDE by providing the raw URL to it</a>.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
To change the configuration of a running CDE, add a new <code>.devfile.yaml</code> (or edit the existing one), and restart the CDE using the command <code>Eclipse Che: Restart Workspace from Local Devfile</code> from the Visual Studio Code command palette. This command is also quickly accessible by clicking on the bottom-left corner of Visual Studio Code.
</td>
</tr>
</table>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
<a href="https://open-vsx.org/extension/Devfile/vscode-devfile">The Devfile Visual Studio Code walkthrough extension</a> helps generating a Devfile using a GUI wizard.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_step-by-step-guide-to-an-optimal-devfile">Step by step guide to an optimal Devfile</h3>
<div class="paragraph">
<p>The <a href="https://devfile.io/docs/2.2.2/what-is-a-devfile">documentation website</a> includes a detailed Devfiles syntax reference. In this section I will share a practical step by step guide to write an optimal Devfile for the <a href="https://github.com/l0rd/rails-sample/"><code>rails-sample</code></a>.</p>
</div>
<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8">
  <title>Iterative devfile Creation</title>
  <link rel="stylesheet" href="/assets/html/cde-customization/devfile-table.css">
</head>
<body>
<!-- partial:index.partial.html -->
<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script> -->
<fieldset>
  <legend>Iterative Devfile Creation</legend>
  <div class="flex-wrap">
    <div class="steps">
      <input type="radio" name="devfile" value="simplest" checked="checked" />
      <label>1. The simplest `.devfile.yaml`: only the name of the CDE is specified</label><br />

      <input type="radio" name="devfile" value="image" />
      <label>2. Customize CDE main container image</label><br />

      <input type="radio" name="devfile" value="commands" />
      <label>3. Set some predefined commands (in VS Code: Terminal =&gt; Run Tasks =&gt; Devfile)</label><br />

      <input type="radio" name="devfile" value="resources" />
      <label>3. Adjust memory and CPU requirements</label><br />

      <input type="radio" name="devfile" value="poststart" />
      <label>4. Execute commands at CDE start</label><br />

      <input type="radio" name="devfile" value="volume" />
      <label>5. Persist folders after CDE restart</label><br />

      <input type="radio" name="devfile" value="env" />
      <label>6. Configure the application runtime through environment variables</label><br />

      <input type="radio" name="devfile" value="endpoint" />
      <label>7. Expose the application endpoints: port, path and protocol</label><br />

    </div>
    <div class="devfiles">
      <div class="area" id="simplest" style="display: block">
        <pre>
    <code>
<ins>schemaVersion: 2.2.0
metadata:
  name: rails-blog
</ins>
    </code>
  </pre>
      </div>

      <div class="area" id="image">
        <pre>
    <code>
schemaVersion: 2.2.0
metadata:
  name: rails-blog
<ins>components:
  - name: devtools
    container:
      image: quay.io/mloriedo/rails-blog-cde:latest
</ins>
    </code>
  </pre>
      </div>

      <div class="area" id="commands">
        <pre>
    <code>
schemaVersion: 2.2.0
metadata:
  name: rails-blog
components:
  - name: devtools
    container:
      image: quay.io/mloriedo/rails-blog-cde:latest
<ins>commands:
  - id: bundle-install
    exec:
      component: devtools
      commandLine: bundle install
      workingDir: ${PROJECT_SOURCE}
  - id: server-start
    exec:
      component: devtools
      commandLine: |
        ./bin/rails server --binding 0.0.0.0
  - id: server-kill
    exec:
      component: devtools
      commandLine: kill $(pidof "ruby")
</ins>
    </code>
    </pre>
      </div>

      <div class="area" id="resources">
        <pre>
    <code>
schemaVersion: 2.2.0
metadata:
  name: rails-blog
components:
  - name: devtools
    container:
      image: quay.io/mloriedo/rails-blog-cde:latest
<ins>      memoryRequest: 2G
      memoryLimit: 4G
      cpuRequest: '1'
      cpuLimit: '2'
</ins>commands:
  - id: bundle-install
    exec:
      component: devtools
      commandLine: bundle install
      workingDir: ${PROJECT_SOURCE}
  - id: server-start
    exec:
      component: devtools
      commandLine: |
        ./bin/rails server --binding 0.0.0.0
  - id: server-kill
    exec:
      component: devtools
      commandLine: kill $(pidof "ruby")
    </code>
    </pre>
      </div>

      <div class="area" id="poststart">
        <pre>
    <code>
schemaVersion: 2.2.0
metadata:
  name: rails-blog
components:
  - name: devtools
    container:
      image: quay.io/mloriedo/rails-blog-cde:latest
      memoryRequest: 2G
      memoryLimit: 4G
      cpuRequest: '1'
      cpuLimit: '2'
commands:
  - id: bundle-install
    exec:
      component: devtools
      commandLine: bundle install
      workingDir: ${PROJECT_SOURCE}
  - id: server-start
    exec:
      component: devtools
      commandLine: |
        ./bin/rails server --binding 0.0.0.0
  - id: server-kill
    exec:
      component: devtools
      commandLine: kill $(pidof "ruby")
<ins>events:
  postStart:
    - bundle-install
</ins>
</code>
    </pre>
      </div>

      <div class="area" id="volume">
        <pre>
    <code>
schemaVersion: 2.2.0
metadata:
  name: rails-blog
components:
<ins>  - name: bundle-volume
    volume:
      size: 1G
</ins>  - name: devtools
    container:
      image: quay.io/mloriedo/rails-blog-cde:latest
      memoryRequest: 2G
      memoryLimit: 4G
      cpuRequest: '1'
      cpuLimit: '2'
<ins>      volumeMounts:
        - name: bundle-volume
          path: /home/user/.bundle/vendor
</ins>commands:
  - id: bundle-install
    exec:
      component: devtools
      commandLine: bundle install
      workingDir: ${PROJECT_SOURCE}
  - id: server-start
    exec:
      component: devtools
      commandLine: |
        ./bin/rails server --binding 0.0.0.0
  - id: server-kill
    exec:
      component: devtools
      commandLine: kill $(pidof "ruby")
events:
  postStart:
    - bundle-install
    </code>
    </pre>
      </div>

      <div class="area" id="env">
        <pre>
    <code>
schemaVersion: 2.2.0
metadata:
  name: rails-blog
components:
  - name: bundle-volume
    volume:
      size: 1G
  - name: devtools
    container:
      image: quay.io/mloriedo/rails-blog-cde:latest
      memoryRequest: 2G
      memoryLimit: 4G
      cpuRequest: '1'
      cpuLimit: '2'
      volumeMounts:
        - name: bundle-volume
          path: /home/user/.bundle/vendor
commands:
  - id: bundle-install
    exec:
      component: devtools
      commandLine: bundle install
      workingDir: ${PROJECT_SOURCE}
  - id: server-start
    exec:
      component: devtools
      commandLine: |
<ins>        export RAILS_DEVELOPMENT_HOSTS="${CHE_DASHBOARD_URL/https:\/\/devspaces/}" &&
</ins>        ./bin/rails server --binding 0.0.0.0
  - id: server-kill
    exec:
      component: devtools
      commandLine: kill $(pidof "ruby")
events:
  postStart:
    - bundle-install
    </code>
    </pre>
      </div>

      <div class="area" id="endpoint">
        <pre>
    <code>
schemaVersion: 2.2.0
metadata:
  name: rails-blog
components:
  - name: bundle-volume
    volume:
      size: 1G
  - name: devtools
    container:
      image: quay.io/mloriedo/rails-blog-cde:latest
      memoryRequest: 2G
      memoryLimit: 4G
      cpuRequest: '1'
      cpuLimit: '2'
      volumeMounts:
        - name: bundle-volume
          path: /home/user/.bundle/vendor
<ins>      endpoints:
        - name: blog
          exposure: public
          protocol: https
          targetPort: 3000
          path: /articles</ins>commands:
  - id: bundle-install
    exec:
      component: devtools
      commandLine: bundle install
      workingDir: ${PROJECT_SOURCE}
  - id: server-start
    exec:
      component: devtools
      commandLine: |
        export RAILS_DEVELOPMENT_HOSTS="${CHE_DASHBOARD_URL/https:\/\/devspaces/}" &&
        ./bin/rails server --binding 0.0.0.0
  - id: server-kill
    exec:
      component: devtools
      commandLine: kill $(pidof "ruby")
events:
  postStart:
    - bundle-install
    </code>
    </pre>
      </div>
    </div>
  </div>

</fieldset>
<!-- partial -->
  <script  src="/assets/html/cde-customization/devfile-table.js"></script>

</body>
</html>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>These steps can be tested iteratively from a running CDE using the "Eclipse Che: Restart Workspace from Local Devfile" command in Visual Studio Code. You get the best experience installing <a href="https://open-vsx.org/extension/redhat/vscode-yaml">Visual Studio Code YAML extension</a> that provides code completion when editing a Devfile.</p>
</div>
<div class="paragraph">
<p>After the last step, the CDE will be fully functional. After the Devfile has been pushed to the git repository any new contributor will be able to run the application, do some changes, and debug them in a flash.</p>
</div>
<div class="paragraph">
<p>For example you can use <a href="https://workspaces.openshift.com/#https://github.com/l0rd/rails-sample/tree/devfile">this link</a> to test the rails-sample using the Devfile in step 7. After the workspace has started, use task <code>server-start</code> in VS Code (Terminal &#8658; Run Tasks &#8658; Devfile) to start the Ruby on Rails application. And install the VS Code extension <code>ruby-lsp</code> to get full language support.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="part4">PART4: Secrets and other CDE configurations that cannot be specified in Devfile</h2>
<div class="sectionbody">
<div class="paragraph">
<p>There are some properties of your CDE that you don&#8217;t want to specify in a Devfile. Either because they contain sensitive information (like a password or an SSH private key), or because you want to customize your CDE without affecting the rest of the team. In any case the Devfile, which is a shared in the git repository, cannot be used. In this section we will go through a few techniques to add user specific configurations.</p>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<div class="title">Important</div>
</td>
<td class="content">
Secrets, ConfigMaps and other Kubernetes objects mentioned in this PART are supposed to be created, by a developer, in the developer namespace. This is not admin tasks. Other developers using the same Eclipse Che instance won&#8217;t "see" those objects and their CDEs won&#8217;t be affected.
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="_add-environment-variables-using-kubernetes-configmaps-and-secrets">Add environment variables using Kubernetes <code>ConfigMaps</code> and <code>Secrets</code></h3>
<div class="paragraph">
<p>The Devfile allows to specify environment variables but in some situations you don&#8217;t want to add them there. Eclipse Che provides a mechanism to automatically add variables to CDEs containers without Devfiles but using Kubernetes ConfigMaps or Secrets.</p>
</div>
<div class="sect3">
<h4 id="_using-configmaps">Using <code>ConfigMaps</code></h4>
<div class="paragraph">
<p>It&#8217;s possible to use a Devfile to add an environment variable such as <code>RAILS_DEVELOPMENT_HOSTS=.apps.che-dev.x6e0.p1.openshiftapps.com</code> that holds the URL of your specific Kubernetes cluster. But that would make the Devfile less portable.</p>
</div>
<div class="paragraph">
<p>A better approach is to create, in your namespace (the developer namespace where your CDE are created), a <code>ConfigMap</code> with labels <code>controller.devfile.io/mount-to-devworkspace: "true"</code> and <code>controller.devfile.io/watch-configmap: "true"</code> and with the annotation <code>controller.devfile.io/mount-as: env</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash">kubectl apply <span style="color: #f92672">-f</span> - <span style="color: #f92672;font-weight: bold">&lt;&lt;</span> <span style="color: #66d9ef">EOF</span><span style="color: #e6db74">
apiVersion: v1
kind: ConfigMap
metadata:
  name: workspaces-env-vars
  labels:
    controller.devfile.io/mount-to-devworkspace: "true"
    controller.devfile.io/watch-configmap: "true"
  annotations:
    controller.devfile.io/mount-as: env
data:
  RAILS_DEVELOPMENT_HOSTS: ".apps.che-dev.x6e0.p1.openshiftapps.com"
EOF</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The environment variables specified in the <code>data</code> field of the <code>ConfigMap</code> (in this case <code>RAILS_DEVELOPMENT_HOSTS=.apps.che-dev.x6e0.p1.openshiftapps.com</code>) will be added automatically to every CDE created in the same namespace.</p>
</div>
</div>
<div class="sect3">
<h4 id="_using-secrets">Using <code>Secrets</code></h4>
<div class="paragraph">
<p>An example of environment variables holding sensitive information are those that specify developers' tokens (for example <code>GITHUB_TOKEN</code> used by the GitHub CLI).</p>
</div>
<div class="paragraph">
<p>In this case, we can create a <code>Secret</code> with labels <code>controller.devfile.io/mount-to-devworkspace: "true"</code> and <code>controller.devfile.io/watch-secret: "true"</code> and with the annotation <code>controller.devfile.io/mount-as: env</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash">kubectl apply <span style="color: #f92672">-f</span> - <span style="color: #f92672;font-weight: bold">&lt;&lt;</span> <span style="color: #66d9ef">EOF</span><span style="color: #e6db74">
apiVersion: v1
kind: Secret
metadata:
  name: workspaces-env-vars
  labels:
    controller.devfile.io/mount-to-devworkspace: "true"
    controller.devfile.io/watch-secret: "true"
  annotations:
    controller.devfile.io/mount-as: env
stringData:
  GITHUB_TOKEN: "&lt;your token&gt;"
EOF</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The environment variable specified in the <code>stringData</code> field of the <code>Secret</code> (in this case <code>GITHUB_TOKEN=&lt;your token&gt;</code>) will be added automatically to every CDE created in the same namespace.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
These ConfigMap and Secret should be created in the developer namespace. The variables specified in <code>data</code> will be added to the CDEs of the owner of the namespace only. Eclipse Che uses namespaces to isolate developers CDEs: it&#8217;s critical to allow read access to the objects in the namespaces only to the developer owning it.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_add-files-to-a-cde-using-kubernetes-configmaps-and-secrets">Add files to a CDE using Kubernetes <code>ConfigMaps</code> and <code>Secrets</code></h3>
<div class="paragraph">
<p>Regular files can be projected into CDEs using <code>ConfigMaps</code> and <code>Secrets</code> too. In this case the required annotation is <code>controller.devfile.io/mount-as: file</code>.</p>
</div>
<div class="paragraph">
<p>When projecting files, there are two extra annotations read by Eclipse Che: <code>controller.devfile.io/mount-path: &lt;container-path&gt;</code> specifies the projected file folder, and <code>controller.devfile.io/mount-access-mode</code> specifies the projected file&#8217;s access mode.</p>
</div>
<div class="sect3">
<h4 id="_using-configmaps-2">Using <code>ConfigMaps</code></h4>
<div class="paragraph">
<p>The following <code>ConfigMap</code> projects a Visual Studio Code <code>settings.json</code> file (remote VS Code data folder is <code>/checode/remote/data/machine</code>) that specifies a couple of Visual Studio Code Terminal settings:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash">kubectl apply <span style="color: #f92672">-f</span> - <span style="color: #f92672;font-weight: bold">&lt;&lt;</span> <span style="color: #66d9ef">EOF</span><span style="color: #e6db74">
apiVersion: v1
kind: ConfigMap
metadata:
  name: vscode-settings
  labels:
    controller.devfile.io/mount-to-devworkspace: "true"
    controller.devfile.io/watch-configmap: "true"
  annotations:
    controller.devfile.io/mount-as: file
    controller.devfile.io/mount-path: /checode/remote/data/Machine/
    controller.devfile.io/mount-access-mode: "511"
data:
  settings.json: |
    {
        "terminal.integrated.copyOnSelection": true,
        "terminal.integrated.cursorBlinking": true
    }
EOF</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_using-secrets-2">Using <code>Secrets</code></h4>
<div class="paragraph">
<p>The following <code>Secret</code> projects file <code>credentials</code> in fodler <code>/home/user/.aws</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash">kubectl apply <span style="color: #f92672">-f</span> - <span style="color: #f92672;font-weight: bold">&lt;&lt;</span> <span style="color: #66d9ef">EOF</span><span style="color: #e6db74">
apiVersion: v1
kind: Secret
metadata:
  name: aws-credentials
  labels:
    controller.devfile.io/mount-to-devworkspace: "true"
    controller.devfile.io/watch-secret: "true"
  annotations:
    controller.devfile.io/mount-as: file
    controller.devfile.io/mount-path: /home/user/.aws/
    controller.devfile.io/mount-access-mode: "511"
stringData:
  credentials: |
     [default]
     aws_access_key_id     = ABCDEFGHILMNOPQRSTUVZ
     aws_secret_access_key = ABCDEFGHILMNOPQRSTUVZ123456789+abcdefg
EOF</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_override-defaults-configurations-using-a-devworkspace-operator-configuration">Override defaults configurations using a DevWorkspace Operator Configuration</h3>
<div class="paragraph">
<p>In this last section we want to show a mechanism that a developer can use to override CDEs' default properties. In this case, by using a <a href="https://doc.crds.dev/github.com/devfile/devworkspace-operator">DevWorkspaceOperatorConfig Custom Resource</a>.</p>
</div>
<div class="paragraph">
<p><code>DevWorkspaceOperatorConfig</code> objects specify advanced CDE properties such as the <code>Pod</code> <code>schedulerName</code>, whether the <code>/home/user</code> folder will persist after a restart or not, and many more.</p>
</div>
<div class="paragraph">
<p>Applying a particular <code>DevWorkspaceOperatorConfig</code> to a CDEs takes 2 steps:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Create the <code>DevWorkspaceOperatorConfig</code> custom resource in the Kubernetes cluster</p>
</li>
<li>
<p>Edit the Devfile to apply that specific configuration</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>For example the following <code>DevWorkspaceOperatorConfig</code> override CDEs Pod <code>schedulerName</code> configuration:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash">kubectl apply <span style="color: #f92672">-f</span> - <span style="color: #f92672;font-weight: bold">&lt;&lt;</span> <span style="color: #66d9ef">EOF</span><span style="color: #e6db74">
apiVersion: controller.devfile.io/v1alpha1
kind: DevWorkspaceOperatorConfig
metadata:
  name: custom-dwoc
  namespace: &lt;namespace-name&gt;
config:
  workspace:
    schedulerName: my-scheduler
EOF</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To use this configuration a Devfile needs to reference it. For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="diff"><span style="color: #f8f8f2;background-color: #49483e">schemaVersion: 2.2.0
metadata:
</span>  name: rails-blog
<span style="color: #ffffff;background-color: #324932">+ attributes:
+   controller.devfile.io/devworkspace-config:
+     name: custom-dwoc
+     namespace: &lt;namespace-name&gt;
</span><span style="color: #f8f8f2;background-color: #49483e">components:
</span><span style="color: #960050;background-color: #1e0010">...</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>With that attribute, the CDE started using this devfile will use the scheduler <code>my-scheduler</code> (if it exists) rather than the default Kubernetes scheduler.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
If the DevWorkspaceOpenratorConfig referenced in a Devfile doesn&#8217;t exist in the Kubernetes cluster, then Che will silently ignore it.
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Most of the time, the Eclipse Che default Cloud Development Environment (CDE) that we have covered in <a href="#part1">PART 1: Eclipse Che default CDE</a>, is good enough to start navigating and doing some simple editing of the source code.</p>
</div>
<div class="paragraph">
<p>To build and run an application in a CDE, it may be necessary to create a custom container image to replace the default one. This is described in <a href="#part2">PART2: Customize the CDE container image</a>.</p>
</div>
<div class="paragraph">
<p>But it&#8217;s in <a href="#part3">PART3: Change CDE properties with a Devfile</a> that we shared how to make to most out of Eclipse Che development environments. The Devfile allows us to specify development environments as code and share it with the rest of the team.</p>
</div>
<div class="paragraph">
<p>Finally, in <a href="#part4">PART4: Secrets and other CDE configurations that cannot be specified in Devfile</a>, some more advanced techniques to configure development environments, beyond the devfile, are reviewed.</p>
</div>
</div>
</div>]]></content><author><name>Mario Loriedo</name></author><summary type="html"><![CDATA[In this article we review the different ways to customize an Eclipse Che Cloud Development Environment]]></summary></entry><entry><title type="html">Configuring Granular Access for Eclipse Che Authorized Users</title><link href="https://che.eclipseprojects.io/2024/01/29/@ilya.buziuk-advanced-authorization.html" rel="alternate" type="text/html" title="Configuring Granular Access for Eclipse Che Authorized Users" /><published>2024-01-29T00:00:00+00:00</published><updated>2024-01-29T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2024/01/29/@ilya.buziuk/advanced-authorization</id><content type="html" xml:base="https://che.eclipseprojects.io/2024/01/29/@ilya.buziuk-advanced-authorization.html"><![CDATA[<div class="paragraph">
<p>Even though the current trend is to split an infrastructure into a number of 'Fit For Purpose' clusters instead of having a gigantic monolith Kubernetes cluster, administrators still want to provide granular access and restrict certain functionality for particular users.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
A 'Fit For Purpose' Kubernetes cluster refers to a cluster that is specifically designed and configured to meet the requirements and goals of a particular use case or workload, tailored to optimize performance, resource utilization, and other factors based on the characteristics of the workloads it will be managing. For Eclipse&#160;Che it is recommended to have this type of cluster provisioned.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Previously, all users provisioned on a Kubernetes cluster had access to Eclipse&#160;Che, and it was difficult to restrict the usage for certain accounts. One of the options for administrators was to remove permissions for namespace / project creation on the Kubernetes level, and disable automatic namespace provisioning for Eclipse&#160;Che:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">devEnvironments</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">defaultNamespace</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #a6e22e">autoProvision</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #66d9ef">false</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Considering this, new optional properties that allow setting up granular access for different groups and users have been added to the Eclipse&#160;Che Custom Resource: <code>allowUsers</code>, <code>allowGroups</code>, <code>denyUsers</code>, and <code>denyGroups</code>. Below you can find an illustration exemplifying the configuration:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"> <span style="color: #a6e22e">networking</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #a6e22e">auth</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">advancedAuthorization</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">allowUsers</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">user-a</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">user-b</span>
        <span style="color: #a6e22e">denyUsers</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">user-c</span>
        <span style="color: #a6e22e">allowGroups</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">team-a</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">team-b</span>
        <span style="color: #a6e22e">denyGroups</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">team-c</span></code></pre>
</div>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<div class="title">Important</div>
</td>
<td class="content">
<code>AllowGroups</code> and <code>DenyGroups</code> properties are only supported on OpenShift.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Users who are not allowed will not be able to use Eclipse&#160;Che and will see the following warning when trying to access the User Dashboard:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/advanced-authorization/warning.png" alt="User might not be allowed warning">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="sect1">
<h2 id="_dogfooding-in-action">Dogfooding In Action</h2>
<div class="sectionbody">
<div class="paragraph">
<p>For internal development and dogfooding purposes we use an <a href="https://www.redhat.com/en/technologies/cloud-computing/openshift/dedicated">OpenShift Dedicated</a> cluster with GitHub identity provider setup. Under the <code>Users</code> tab, all the accounts that have access to the cluster are listed e.g.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/advanced-authorization/user.png" alt="OpenShift User">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>There are a few teams working on Eclipse&#160;Che with the corresponding OpenShift Groups created and managed on the cluster:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/advanced-authorization/groups.png" alt="OpenShift Groups">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>Each OpenShift group explicitly defines a set of users that belong to it:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">kind</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">Group</span>
<span style="color: #a6e22e">apiVersion</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">user.openshift.io/v1</span>
<span style="color: #a6e22e">metadata</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">che-team-a</span>
<span style="color: #a6e22e">users</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">ibuziuk</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">...</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>advancedAuthorization</code> property of the Eclipse&#160;Che Custom Resource explicitly defines the groups which are allowed:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml">  <span style="color: #a6e22e">networking</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #a6e22e">auth</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">advancedAuthorization</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">allowGroups</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">che-team-a</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">che-team-b</span>
          <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #e6db74">che-docs</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Users who do not belong to the groups from the list above are not allowed to use Eclipse&#160;Che. This configuration allows the cluster administrator to explicitly manage the onboarding and curate the access.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>More details about advanced authorization can be found in the <a href="https://eclipse.dev/che/docs/stable/administration-guide/configuring-advanced-authorization/">official documentation</a>. As always, we look forward to your valuable feedback, comments, remarks, and proposals on this work or anything else related to the project, through our <a href="https://accounts.eclipse.org/mailing-list/che-dev">mailing list</a>, <a href="https://github.com/eclipse/che/issues">GitHub</a>, or <a href="https://ecd-tools.slack.com/archives/C05SD64M85R">Slack</a>.
&#160;<br>
We wish you an enjoyable and productive coding experience with Eclipse&#160;Che!</p>
</div>
</div>
</div>]]></content><author><name>Ilya Buziuk</name></author><summary type="html"><![CDATA[The article describes how to configure advanced authorization in Eclipse Che]]></summary></entry><entry><title type="html">Decommissioning the PostgreSQL database</title><link href="https://che.eclipseprojects.io/2023/03/20/@ilya.buziuk-decommissioning-postgresql-database.html" rel="alternate" type="text/html" title="Decommissioning the PostgreSQL database" /><published>2023-03-20T00:00:00+00:00</published><updated>2023-03-20T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2023/03/20/@ilya.buziuk/decommissioning-postgresql-database</id><content type="html" xml:base="https://che.eclipseprojects.io/2023/03/20/@ilya.buziuk-decommissioning-postgresql-database.html"><![CDATA[<div class="paragraph">
<p>Historically Eclipse&#160;Che used a PostgreSQL database for storing relevant information about the users, workspaces, devfiles, preferences, SSH keys, etc.
Overall there were dozens of tables in the database which represent the state of the Eclipse&#160;Che instance:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash">psql <span style="color: #f92672;font-weight: bold">(</span>13.7<span style="color: #f92672;font-weight: bold">)</span>
Type <span style="color: #e6db74">"help"</span> <span style="color: #66d9ef;font-weight: bold">for </span>help.

<span style="color: #f8f8f2">dbche</span><span style="color: #f92672;font-weight: bold">=&gt;</span> <span style="color: #ae81ff">\d</span>t
                            List of relations
 Schema |                      Name                       | Type  | Owner
<span style="color: #f92672">--------</span>+-------------------------------------------------+-------+-------
 public | account                                         | table | pgche
 public | che_factory                                     | table | pgche
 public | che_factory_action                              | table | pgche
 public | che_factory_action_properties                   | table | pgche
 public | che_factory_ide                                 | table | pgche
 public | che_factory_on_app_closed_action                | table | pgche
 public | che_factory_on_app_closed_action_value          | table | pgche
 public | che_factory_on_app_loaded_action                | table | pgche
 public | che_factory_on_app_loaded_action_value          | table | pgche
 public | che_factory_on_projects_loaded_action           | table | pgche
 public | che_factory_on_projects_loaded_action_value     | table | pgche
 public | che_free_resources_limit                        | table | pgche
 public | che_free_resources_limit_resource               | table | pgche
 public | che_k8s_machine                                 | table | pgche
 public | che_k8s_machine_attributes                      | table | pgche
 public | che_k8s_runtime                                 | table | pgche
 public | che_k8s_server                                  | table | pgche
 public | che_k8s_server_attributes                       | table | pgche
 public | che_member                                      | table | pgche
 public | che_member_actions                              | table | pgche
 public | che_organization                                | table | pgche
 public | che_organization_distributed_resources          | table | pgche
 public | che_organization_distributed_resources_resource | table | pgche
 public | che_resource                                    | table | pgche
 public | che_sign_key                                    | table | pgche
 public | che_sign_key_pair                               | table | pgche
 public | che_system_permissions                          | table | pgche
 public | che_system_permissions_actions                  | table | pgche
 public | che_userdevfile_permissions                     | table | pgche
 public | che_userdevfile_permissions_actions             | table | pgche
 public | che_worker                                      | table | pgche
 public | che_worker_actions                              | table | pgche
 public | che_workspace_activity                          | table | pgche
 public | che_workspace_cfg_attributes                    | table | pgche
 public | <span style="color: #f8f8f2">command</span>                                         | table | pgche
 public | command_attributes                              | table | pgche
 public | devfile                                         | table | pgche
 public | devfile_action                                  | table | pgche
 public | devfile_attributes                              | table | pgche
 public | devfile_command                                 | table | pgche
 public | devfile_command_attributes                      | table | pgche
 public | devfile_component                               | table | pgche
 public | devfile_component_arg                           | table | pgche
 public | devfile_component_command                       | table | pgche
 public | devfile_component_preferences                   | table | pgche
 public | devfile_component_selector                      | table | pgche
 public | devfile_endpoint                                | table | pgche
 public | devfile_endpoint_attributes                     | table | pgche
 public | devfile_entrypoint                              | table | pgche
 public | devfile_entrypoint_arg                          | table | pgche
 public | devfile_entrypoint_commands                     | table | pgche
 public | devfile_entrypoint_selector                     | table | pgche
 public | devfile_env                                     | table | pgche
 public | devfile_project                                 | table | pgche
 public | devfile_volume                                  | table | pgche
 public | environment                                     | table | pgche
 public | externalmachine                                 | table | pgche
 public | externalmachine_attributes                      | table | pgche
 public | externalmachine_env                             | table | pgche
 public | k8s_runtime_command                             | table | pgche
 public | k8s_runtime_command_attributes                  | table | pgche
 public | machine_volume                                  | table | pgche
 public | preference                                      | table | pgche
 public | preference_preferences                          | table | pgche
 public | profile                                         | table | pgche
 public | profile_attributes                              | table | pgche
 public | projectattribute                                | table | pgche
 public | projectattribute_values                         | table | pgche
 public | projectconfig                                   | table | pgche
 public | projectconfig_mixins                            | table | pgche
 public | schema_version                                  | table | pgche
 public | sequence                                        | table | pgche
 public | serverconf                                      | table | pgche
 public | serverconf_attributes                           | table | pgche
 public | serverconf_properties                           | table | pgche
 public | sourcestorage                                   | table | pgche
 public | sourcestorage_parameters                        | table | pgche
 public | sshkeypair                                      | table | pgche
 public | user_aliases                                    | table | pgche
 public | userdevfile                                     | table | pgche
 public | usr                                             | table | pgche
 public | workspace                                       | table | pgche
 public | workspace_attributes                            | table | pgche
 public | workspaceconfig                                 | table | pgche
<span style="color: #f92672;font-weight: bold">(</span>84 rows<span style="color: #f92672;font-weight: bold">)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>However, with the switch to <a href="https://che.eclipseprojects.io/2021/10/12/@mario.loriedo-devfile-v2-and-the-devworkspace-operator-p1.html">DevWorkspace Operator and Devfile v2</a>, all this data becomes irrelevant since we started using native Kubernetes resources instead.</p>
</div>
<div class="paragraph">
<p>The data is now stored and managed as Kubernetes resources such as Secrets and ConfigMaps in the user namespaces:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/decommissioning-postgresql-database/secrets.png" alt="Secrets from the user namespace">
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/decommissioning-postgresql-database/configmaps.png" alt="ConfigMaps from the user namespace">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="paragraph">
<p>As an example, SSH keys are now configured using the dedicated <a href="https://github.com/devfile/devworkspace-operator/blob/main/docs/additional-configuration.adoc#configuring-devworkspaces-to-use-ssh-keys-for-git-operations">secret</a>.</p>
</div>
<div class="paragraph">
<p>Starting from the Eclipse&#160;Che <code>7.62.0</code> release, the PostgreSQL deployment has ceased to exist, resulting in only 5 operands: Che Server, User Dashboard, Plugin Registry, Devfile Registry, and Gateway.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/decommissioning-postgresql-database/operands.png" alt="Eclipse Che operands">
</div>
</div>
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<div class="title">Important</div>
</td>
<td class="content">
No manual migration steps or action items are required for this change to take effect. The PostgreSQL deployment will be gracefully terminated and removed during the update. All the obsolete data stored in the database will be removed.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>It is also worth mentioning that most of the <code><a href="https://&lt;che_fqdn&gt;/swagger" class="bare">https://&lt;che_fqdn&gt;/swagger</a></code> endpoints are now deprecated and going to be removed in future releases. The only endpoints that are still used are related to the namespace provisioning, Git OAuth configuration, and the factory flow:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>/kubernetes/namespace/*</code></p>
</li>
<li>
<p><code>/oauth/*</code></p>
</li>
<li>
<p><code>/factory/*</code></p>
</li>
</ul>
</div>
<div class="sect1">
<h2 id="_next-steps">Next steps</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Decommissioning the PostgreSQL database in favor of native Kubernetes resources provides several benefits, including: improved scalability, flexibility, and easier management.</p>
</div>
<div class="paragraph">
<p>Ultimately, moving away from traditional database architectures and embracing Kubernetes makes Eclipse&#160;Che agile and competitive in an increasingly complex and demanding technology landscape.
For example, in the next Eclipse&#160;Che releases we plan to make it possible to configure a number of replicas for operands from the CheCluster CustomResource, which was not possible before due to the PostgreSQL database dependency:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">spec</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">components</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #a6e22e">cheServer</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">deployment</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">replicas</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #ae81ff">1</span>
    <span style="color: #a6e22e">dashboard</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">deployment</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">replicas</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #ae81ff">1</span>
    <span style="color: #a6e22e">devfileRegistry</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">deployment</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">replicas</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #ae81ff">1</span>
    <span style="color: #a6e22e">pluginRegistry</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">deployment</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">replicas</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">1</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The progress of this particular feature can be tracked in the upstream <a href="https://github.com/eclipse/che/issues/22067">issue</a>.
As always, we look forward to your valuable feedback, comments, remarks, and proposals on this work or anything else related to the project, through our <a href="https://accounts.eclipse.org/mailing-list/che-dev">mailing list</a>, <a href="https://github.com/eclipse/che/issues">GitHub</a>, or <a href="https://mattermost.eclipse.org/eclipse/channels/eclipse-che">Mattermost</a>.
&#160;<br>
We wish you an enjoyable and productive coding experience with Eclipse&#160;Che!</p>
</div>
</div>
</div>]]></content><author><name>Ilya Buziuk</name></author><summary type="html"><![CDATA[The article describes how the PostgreSQL database dependency has been removed in Eclipse Che]]></summary></entry><entry><title type="html">Building Containers in Rootless Mode on OpenShift</title><link href="https://che.eclipseprojects.io/2022/10/10/@mloriedo-building-container-images.html" rel="alternate" type="text/html" title="Building Containers in Rootless Mode on OpenShift" /><published>2022-10-10T00:00:00+00:00</published><updated>2022-10-10T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2022/10/10/@mloriedo/building-container-images</id><content type="html" xml:base="https://che.eclipseprojects.io/2022/10/10/@mloriedo-building-container-images.html"><![CDATA[<div class="imageblock">
<div class="content">
<img src="/assets/img/building-container-images/che-inner-loop-optimized.png" alt="Developer inner loop including a container build">
</div>
</div>
<div class="paragraph">
<p>&#160;<br>
&#160;<br>
Nowadays the typical developer flow, the inner-loop, quite often includes the building of a <code>Dockerfile</code>. Despite that Eclipse Che did not support building container images on OpenShift. That is because it involved granting permissive OpenShift privileges to Che users and we did not want to require that.</p>
</div>
<div class="paragraph">
<p>The good news is that today a few options are available to build containers without compromising the underlying OpenShift cluster security. One of these is running in rootless mode and that is what we are going to discuss in this short blog post.</p>
</div>
<div class="paragraph">
<p>Although it&#8217;s now easy to <a href="https://github.com/containers/buildah/blob/main/docs/tutorials/05-openshift-rootless-build.md">run <code>buildah</code> or <code>podman build</code> in rootless mode</a>, on OpenShift it requires granting some non-default <a href="https://man7.org/linux/man-pages/man7/capabilities.7.html">Linux capabilities</a>: <code>CAP_SETGID</code> and <code>CAP_SETUID</code>. It is possible to provide those capabilities to an Eclipse Che workspace following these steps:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><a href="#step_1">STEP 1: Creating an OpenShift Security Context Constraint</a></p>
</li>
<li>
<p><a href="#step_2">STEP 2: Grant privileges to the DevWorkspace controller Service Account</a></p>
</li>
<li>
<p><a href="#step_3">STEP 3: Grant privileges to developer accounts</a></p>
</li>
<li>
<p><a href="#step_4">STEP 4: Include the <code>scc</code> attribute in Devfiles</a></p>
</li>
</ol>
</div>
<div class="paragraph">
<p>The first 3 steps setup the OpenShift cluster and Eclipse Che. These are administration tasks. The last step is for users that start a workspace: every workspace that requires the <code>CAP_SETGID</code> and <code>CAP_SETUID</code> capability needs that Devfile attribute.</p>
</div>
<div class="sect1">
<h2 id="step_1">STEP 1: Creating an OpenShift Security Context Constraint</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In OpenShift, permissions for Pods are controlled with <a href="https://docs.openshift.com/container-platform/latest/authentication/managing-security-context-constraints.html">security context constraints (SCC)</a>. OpenShift includes some pre-defined SCCs but the <code>restricted</code> SCC (the default one) does not provide enough capabilities and the <code>non-root</code> SCC provides more capabilities than required. To be able to build containers but avoid granting unrequired privileges we need to define an ad-hoc SCC that we call <code>container-build</code>.</p>
</div>
<div class="paragraph">
<p>Use an admin account to create it on an OpenShift cluster with the following command:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash">kubectl apply <span style="color: #f92672">-f</span> - <span style="color: #f92672;font-weight: bold">&lt;&lt;</span><span style="color: #66d9ef">EOF</span><span style="color: #e6db74">
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: container-build
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegeEscalation: true
allowPrivilegedContainer: false
allowedCapabilities:
  - SETUID
  - SETGID
defaultAddCapabilities: null
fsGroup:
  type: MustRunAs
# Temporary workaround for https://github.com/devfile/devworkspace-operator/issues/884
priority: 20
readOnlyRootFilesystem: false
requiredDropCapabilities:
  - KILL
  - MKNOD
runAsUser:
  type: MustRunAsRange
seLinuxContext:
  type: MustRunAs
supplementalGroups:
  type: RunAsAny
users: []
groups: []
volumes:
  - configMap
  - downwardAPI
  - emptyDir
  - persistentVolumeClaim
  - projected
  - secret
EOF</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="step_2">STEP 2: Grant privileges to the DevWorkspace controller Service Account</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The DevWorkspace controller provisions Che workspaces Pods and it uses Service Account <code>system:serviceaccount:openshift-operators:devworkspace-controller-serviceaccount</code>.</p>
</div>
<div class="paragraph">
<p>Execute the following commands to grant <code>get</code> and <code>update</code> privileges for the <code>container-build</code> SCC to the Service Account :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash"><span style="color: #75715e;font-style: italic"># Create the cluster role get-n-update-container-build-scc</span>
kubectl apply <span style="color: #f92672">-f</span> - <span style="color: #f92672;font-weight: bold">&lt;&lt;</span><span style="color: #66d9ef">EOF</span><span style="color: #e6db74">
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: get-n-update-container-build-scc
rules:
- apiGroups:
  - "security.openshift.io"
  resources:
  - "securitycontextconstraints"
  resourceNames:
  - "container-build"
  verbs:
  - "get"
  - "update"
</span><span style="color: #66d9ef">EOF

</span><span style="color: #75715e;font-style: italic"># Add the role to the DevWorkspace controller Service Account</span>
oc adm policy add-cluster-role-to-user <span style="color: #ae81ff">\</span>
       get-n-update-container-build-scc <span style="color: #ae81ff">\</span>
       system:serviceaccount:openshift-operators:devworkspace-controller-serviceaccount</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="step_3">STEP 3: Grant privileges to developer accounts</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To avoid a privilege escalation, when provisioning the workspace Pod, the DevWorkspace controller checks that the developer is allowed to use the <code>container-build</code> SCC. An administrator needs to grant such privileges. Here is an example of the command to add the <code>container-build</code> SCC to the user <code>janedoe</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash">oc adm policy add-scc-to-user container-build janedoe</code></pre>
</div>
</div>
<div class="paragraph">
<p>If this step is skipped, and the developer account is not allowed to use <code>CAP_SETGID</code> and <code>CAP_SETUID</code>, Che will fail to start a workspace using the <code>container-build</code> SCC.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="step_4">STEP 4: Include the <code>scc</code> attribute in Devfiles</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The last requirement to build containers from an Eclipse Che workspace, is adding the <code>controller.devfile.io/scc: container-build</code> attribute in the Devfile as in the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">schemaVersion</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2.1.0</span>
<span style="color: #a6e22e">metadata</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">build-test</span>
<span style="color: #a6e22e">attributes</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">controller.devfile.io/scc</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">container-build</span>
<span style="color: #a6e22e">projects</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
<span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">dockerfile-hello-world</span>
  <span style="color: #a6e22e">git</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #a6e22e">remotes</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">origin</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">https://github.com/l0rd/dockerfile-hello-world</span>
<span style="color: #a6e22e">components</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
<span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">devtooling-container</span>
  <span style="color: #a6e22e">container</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #a6e22e">image</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">quay.io/devspaces/udi-rhel8:next</span>
    <span style="color: #a6e22e">memoryLimit</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">1Gi</span>
    <span style="color: #a6e22e">cpuLimit</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">1000m</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>When this attribute is included in the Devfile, the resulting workspace Pod will have the <code>openshift.io/scc: container-build</code> annotation:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="bash"><span style="color: #f8f8f2">$ </span>oc get pod workspace52aa1da24d244cef <span style="color: #f92672">-o</span> yaml
apiVersion: v1
kind: Pod
metadata:
  annotations:
    openshift.io/scc: container-build
<span style="color: #f92672;font-weight: bold">(</span>...<span style="color: #f92672;font-weight: bold">)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>And it&#8217;s now possible to open a terminal and build a Dockerfile:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/building-container-images/podman-build.gif" alt="Running Podman build">
</div>
<div class="title">Figure 1. Running Podman build</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_current-limitations-and-next-steps">Current limitations and next steps</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The first 3 steps mentioned in this post are manual and can be error-prone. In the next releases of Eclipse Che, we want to add a CheCluster field that controls if Eclipse Che is capable of building containers or not. When enabled, Eclipse Che Operator automatically applies <a href="#step_1">STEP 1: Creating an OpenShift Security Context Constraint</a>, <a href="#step_2">STEP 2: Grant privileges to the DevWorkspace controller Service Account</a> and <a href="#step_3">STEP 3: Grant privileges to developer accounts</a>.</p>
</div>
<div class="paragraph">
<p>Step 4, <a href="#step_4">STEP 4: Include the <code>scc</code> attribute in Devfiles</a>, should not be required. When container build is enabled, every workspace Pod should have the required capabilities.</p>
</div>
<div class="paragraph">
<p>The Universal Developer Image, the default image used in Che workspaces, uses Podman and Buildah with a VFS file system. But for better performance, <code>fuse-overlay</code> is recommended.</p>
</div>
<div class="paragraph">
<p>The Universal Developer Image is also not configured to run Docker BuildKit in rootless mode and <code>docker build</code> doesn&#8217;t work on OpenShift yet.</p>
</div>
<div class="paragraph">
<p>Other than rootless mode, we are investigating the use of user namespaces in Kubernetes to build containers.</p>
</div>
</div>
</div>]]></content><author><name>Mario Loriedo</name></author><summary type="html"><![CDATA[In this blog post, we are going to see how to configure Eclispe Che to run `podman build` from a remote development environment.]]></summary></entry><entry><title type="html">Installing Eclipse Che on the Azure Kubernetes Service (AKS)</title><link href="https://che.eclipseprojects.io/2022/07/25/@karatkep-installing-eclipse-che-on-aks.html" rel="alternate" type="text/html" title="Installing Eclipse Che on the Azure Kubernetes Service (AKS)" /><published>2022-07-25T00:00:00+00:00</published><updated>2022-07-25T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2022/07/25/@karatkep/installing-eclipse-che-on-aks</id><content type="html" xml:base="https://che.eclipseprojects.io/2022/07/25/@karatkep-installing-eclipse-che-on-aks.html"><![CDATA[<div class="paragraph">
<p>We installed Eclipse&#160;Che on AKS (Azure Kubernetes Service) cluster integrated with AAD (Azure Active Directory) according to <a href="https://www.eclipse.org/che/docs/che-7/installation-guide/installing-che-on-microsoft-azure/">these old (7.41) instructions</a> (there is no recent version of AKS installation documentation). And to our surprise it did not work. Here at Epam Systems we love complex challenges, so we decided not to stop and deep dived into Eclipse&#160;Che world to improve interaction with Microsoft Azure.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Taking into account that Eclipse&#160;Che calls Kubernetes API server using user&#8217;s identity tokens generated by Identity Provider, AKS needs to be integrated with AAD, otherwise AKS will reject the token. Details how to integrate AKS with AAD can be found <a href="https://docs.microsoft.com/en-us/azure/aks/managed-aad">here</a>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Architecture diagram below can be used to get a context about our case. Please note that some of the components are omitted for the sake of simplicity. But it should be enough to get up to speed and dive into Eclipse&#160;Che world together with us.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/installing-eclipse-che-on-aks/che-in-aks.png" alt="Eclipse Che components deployed on AKS">
</div>
<div class="title">Figure 1. Eclipse Che components deployed on AKS</div>
</div>
<div class="sect1">
<h2 id="_challenge-1-aks-does-not-accept-id_token">Challenge 1: AKS does not accept <code>id_token</code></h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://oauth2-proxy.github.io/oauth2-proxy/">OAuth2 Proxy</a> is configured to send an <code>id_token</code> to Traefik for installations made for Kubernetes. <a href="https://traefik.io/traefik/">Traefik</a>, in turn, sends the <code>id_token</code> to all upstream services, including components such as Che server and User Dashboard. Che server and User Dashboard call AKS API Server using the provided <code>id_token</code>. But when AKS is configured to use AAD, its API Server does not accept <code>id_token</code> (it only accepts <code>access_token</code>).</p>
</div>
<div class="sect2">
<h3 id="_how-did-we-solve-the-first-challenge">How did we solve the first challenge</h3>
<div class="paragraph">
<p>We need a way to ask OAuth2 Proxy to send an <code>access_token</code> instead of an <code>id_token</code>. Token replacement is a OAuth2 Proxy alpha feature, hence it cannot be used in production. The alternative is to configure it to pass <code>access_token</code> via X-Forwarded-Access-Token header, but the <code>id_token</code> in the Authorization header won&#8217;t be replaced. So, first step is to add <code>access_token</code> via X-Forwarded-Access-Token header:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code>pass_access_token = true</code></pre>
</div>
</div>
<div class="paragraph">
<p>Then we need somehow to replace Authorization header on X-Forwarded-Access-Token header. Fortunately, we have Traefik in place. So, let&#8217;s ask Traefik to make a necessary replacement:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">http</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">middlewares</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #a6e22e">che-header-rewrite</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">plugin</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">header-rewrite</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
          <span style="color: #a6e22e">from</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">X-Forwarded-Access-Token</span>
          <span style="color: #a6e22e">prefix</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">'</span><span style="color: #e6db74">Bearer</span><span style="color: #f8f8f2"> </span><span style="color: #e6db74">'</span>
          <span style="color: #a6e22e">to</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">Authorization</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>And voila, we made it work, like magic. But how can we make it usable for other users who wants to install Eclipse&#160;Che on AKS? We already mentioned, that at Epam Systems we love complex challenges. And of course we love coding. So, we opened the <a href="https://github.com/eclipse/che/issues/21450">che-operator enhancements</a> and proposed the <a href="https://github.com/eclipse-che/che-operator/pull/1400">improvements</a>.</p>
</div>
<div class="paragraph">
<p>As a consequence of the proposed improvements, a new configuration field <code>identityToken</code> has been introduced into Eclipse&#160;Che starting from version 7.50. A Eclipse&#160;Che administrator can easily configure what token will be passed to upstream servicees in CheCluster CR (Custom Resource):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">spec</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">networking</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #a6e22e">auth</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">identityToken</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">access_token</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>There are two types of token supported: <code>id_token</code> and <code>access_token</code>. Default value is <code>id_token</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
The field <code>identityToken</code> is specific to Eclipse&#160;Che installations made for Kubernetes only and ignored for OpenShift.
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_challenge-2-no-way-to-obtain-a-proper-access-token-accepted-by-aks">Challenge 2: No way to obtain a proper access token accepted by AKS</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This is a follow up of Challenge 1: after configuring Eclipse&#160;Che to pass an <code>access_token</code> instead of an <code>id_token</code> we need to make sure that AKS considers it valid.</p>
</div>
<div class="paragraph">
<p>When AKS integration with AAD is enabled, AKS expects OpenID Connect (OIDC) tokens to be issued from an application, pre-registered in AAD: 'Azure Kubernetes Service AAD Server'.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/installing-eclipse-che-on-aks/aks-aad-server-app.png" alt="Azure Kubernetes Service AAD Server">
</div>
<div class="title">Figure 2. Azure Kubernetes Service AAD Server application</div>
</div>
<div class="paragraph">
<p>Eclipse&#160;Che Gateway OAuth2 Proxy with the default settings uses a standard set of OIDC scopes and AAD will return an <code>access_token</code> that can be used against Microsoft Graph but not against AKS.</p>
</div>
<div class="paragraph">
<p>In order to return a token that will be accepted by AKS, OAuth2 Proxy should be configured with an additional OIDC scope, representing Azure Kubernetes Service AAD Server application:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #e6db74">6dae42f8-4368-4678-94ff-3960e28e3630/user.read</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>where the ID is the Application ID of the AKS instance registered in AAD.</p>
</div>
<div class="sect2">
<h3 id="_how-did-we-solve-the-second-challenge">How did we solve the second challenge</h3>
<div class="paragraph">
<p>A new configuration field named <code>oAuthScope</code> has been introduced into Eclipse&#160;Che starting from version 7.50. That has been specified by the already opened <a href="https://github.com/eclipse/che/issues/21450">che-operator enhancements</a> and implemented through the provided <a href="https://github.com/eclipse-che/che-operator/pull/1400">improvement</a>. An Eclipse&#160;Che administrator can easily configure authorization scopes in CheCluster CR:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">spec</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">networking</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #a6e22e">auth</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">oAuthScope</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">openid email profile 6dae42f8-4368-4678-94ff-3960e28e3630/user.read</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
The field <code>oAuthScope</code> is specific to Eclipse&#160;Che installations made for Kubernetes only and ignored for OpenShift.
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_challenge-3-che-server-requires-mandatory-email-claim-which-is-absent-in-aks-access_token">Challenge 3: Che server requires mandatory 'email' claim which is absent in AKS access_token</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Besides passing OIDC token to AKS for authorization purposes, Che server also uses it for creating a 'user' record in PostgreSQL database. There are two pieces of information (claims) about current user that Che server expects to extract from the token: name and email. Che allows configuring of user name claim via CheCluster CR in AKS (<code>CHE_OIDC_USERNAME__CLAIM</code> according to <a href="https://www.eclipse.org/che/docs/next/administration-guide/advanced-configuration-options-for-the-che-server-component/#_che_oidc_username_claim">documentation</a>), but email claim name is hardcoded to <code>email</code> and cannot be changed. This hardcode becomes a problem for AKS setup since <code>access_token</code> returned by AAD for AKS does not contain <code>email</code> claim (see current structure below), and customization is not possible here since AKS application registration in AAD is maintained by Microsoft.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="jwt">{
  "typ": "JWT",
  "alg": "RS256",
  "x5t": "2ZQpJ3UpbjAYXYGaXEJl8lV0TOI",
  "kid": "2ZQpJ3UpbjAYXYGaXEJl8lV0TOI"
}.{
  "aud": "6dae42f8-4368-4678-94ff-3960e28e3630",
  "iss": "https://sts.windows.net/f974903a-f693-4ca2-aa63-45e5bd2d1318/",
  "iat": 1656412511,
  "nbf": 1656412511,
  "exp": 1656417802,
  "acr": "1",
  "aio": "AUQAu/8TAABB1o0F/h6L8SJWLibrQqPKrVF7qpdIFiQ0qeIj/wNUfcLkM87v+wgvQ+I8uj0WC2Y6WEoHlBcsJdt0m+kJ4dFeNw==",
  "amr": [
    "pwd"
  ],
  "appid": "1c0b88a0-8ec2-4cca-a2b0-4f468110ef86",
  "appidacr": "1",
  "family_name": "Kluklu",
  "given_name": "Tratata",
  "groups": [
    "73fdccdf-e10d-45f9-b7f6-31848842999f",
    "5988d043-3af9-4e81-b041-90b3456f9f4e",
    "bddcb049-0337-4dec-bbaf-7600b8c12623"
  ],
  "ipaddr": "10.123.51.3",
  "name": "Tratata Kluklu",
  "oid": "2cf0521c-c76d-4e7c-b41f-863674057db3",
  "onprem_sid": "S-2-4-31-6364504-298352422-13854118-387761",
  "puid": "3213CDFA3CAF2IA5",
  "rh": "0.AQkA1NIbtJ39JkuKaqbJ82fCHscCrm1oG3hTlP47YOQHDjAJAHg.",
  "scp": "user.read",
  "sub": "qweBLvHX49QA5WlXpJzq_erXQ2NldnSqpgY93oALLDY",
  "tid": "a385e78a-aedc-4033-82ba-e6ef88120591",
  "unique_name": "Tratata.Kluklu@gmail.com",
  "upn": "Tratata.Kluklu@gmail.com",
  "uti": "lfZmPsgcWmS3dG78GpMjRA",
  "ver": "1.0",
  "wids": [
    "c79abafb-610b-4a34-82e2-ef7a293db6ca"
  ]
}.[Signature]</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_how-did-we-solve-the-third-challenge">How did we solve the third challenge</h3>
<div class="paragraph">
<p>As for the previous challenges, we need some enhancements on Eclipse&#160;Che side here too. We want to allow administrators to configure what token claim need to be used to extract user email. As we did it before, we opened the <a href="https://github.com/eclipse/che/issues/21515">che-server enhancement</a> and proposed the <a href="https://github.com/eclipse-che/che-server/pull/324">improvement</a>.</p>
</div>
<div class="paragraph">
<p>Now Eclipse&#160;Che adminstrators can configure the email claim to be used when parsing the JWT token:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">spec</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">components</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #a6e22e">cheServer</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">extraProperties</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">CHE_OIDC_EMAIL__CLAIM</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">unique_name</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If not defined, the fallback value is <code>email</code>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In this post, we walked through the challenges we faced to install Eclipse&#160;Che on AKS and how we contributed back to the project to address the issues.</p>
</div>
<div class="paragraph">
<p>Now, user has all needed things configurable to be able to run successfully Eclipse&#160;Che on AKS. For example, in our particular case we prepared yaml file that overrides the default values in CheCluster CR.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">spec</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">networking</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #a6e22e">auth</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">identityProviderURL</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">https://sts.windows.net/{TENANT_ID}/v2.0/</span>
      <span style="color: #a6e22e">identityToken</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">access_token</span>
      <span style="color: #a6e22e">oAuthClientName</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #f8f8f2;background-color: #49483e">{</span><span style="color: #f8f8f2">CLIENT_ID</span><span style="color: #f8f8f2;background-color: #49483e">}</span>
      <span style="color: #a6e22e">oAuthSecret</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #f8f8f2;background-color: #49483e">{</span><span style="color: #f8f8f2">CLIENT_SECRET</span><span style="color: #f8f8f2;background-color: #49483e">}</span>
      <span style="color: #a6e22e">oAuthScope</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">openid email profile 6dae42f8-4368-4678-94ff-3960e28e3630/user.read</span>
  <span style="color: #a6e22e">components</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #a6e22e">cheServer</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">extraProperties</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
        <span style="color: #a6e22e">CHE_OIDC_AUTH__SERVER__URL</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">https://sts.windows.net/{TENANT_ID}/v2.0/</span>
        <span style="color: #a6e22e">CHE_OIDC_EMAIL__CLAIM</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">unique_name</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>TENANT_ID</code> - Directory (tenant) ID, see Figure 3.</p>
</li>
<li>
<p><code>CLIENT_ID</code> - Application (client) ID, see Figure 3.</p>
</li>
<li>
<p><code>CLIENT_SECRET</code> - Client secret, you can manage it in 'Certificates &amp; secret' section</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/installing-eclipse-che-on-aks/azure-che-demo-app.png" alt="Registered Che application">
</div>
<div class="title">Figure 3. Registered Che application</div>
</div>
<div class="admonitionblock warning">
<table>
<tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
Don&#8217;t forget to configure API permissions to authorize your application to call AKS Server API.
</td>
</tr>
</table>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/installing-eclipse-che-on-aks/aks-api-permissions.png" alt="AKS API permissions">
</div>
<div class="title">Figure 4. AKS API permissions</div>
</div>
<div class="paragraph">
<p>After the Eclipse&#160;Che App configuration in Azure is completed, the command <code>chectl server:deploy</code> can be used to install Eclipse&#160;Che on AKS using the <code>YAML</code> file above:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="shell">chectl server:deploy <span style="color: #ae81ff">\</span>
       <span style="color: #f92672">--platform</span><span style="color: #f92672;font-weight: bold">=</span>k8s <span style="color: #ae81ff">\</span>
       <span style="color: #f92672">--installer</span><span style="color: #f92672;font-weight: bold">=</span>operator <span style="color: #ae81ff">\</span>
       <span style="color: #f92672">--che-operator-cr-patch-yaml</span><span style="color: #f92672;font-weight: bold">=</span>che.yaml <span style="color: #ae81ff">\</span>
       <span style="color: #f92672">--skip-oidc-provider-check</span> <span style="color: #ae81ff">\</span>
       <span style="color: #f92672">--skip-cert-manager</span> <span style="color: #ae81ff">\</span>
       <span style="color: #f92672">--domain</span><span style="color: #f92672;font-weight: bold">=</span>eclipse-che-demo.mydomain.com</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
In our case we already configured <code>cert-manager</code> and created <code>domain</code> according to the <a href="https://www.eclipse.org/che/docs/che-7/installation-guide/installing-che-on-microsoft-azure/">old (7.41) instructions</a>.
</td>
</tr>
</table>
</div>
</div>
</div>]]></content><author><name>Serguei Gorokhov and Piotr Karatkevich</name></author><summary type="html"><![CDATA[In this blog post, we'll tell the story how we installed Eclipse Che on Microsoft Azure, what challenges we met and how solved them.]]></summary></entry><entry><title type="html">Pair programming using VS Code</title><link href="https://che.eclipseprojects.io/2022/04/01/@florent.benoit-pair-programming-using-vscode-editor.html" rel="alternate" type="text/html" title="Pair programming using VS Code" /><published>2022-04-01T00:00:00+00:00</published><updated>2022-04-01T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2022/04/01/@florent.benoit/pair-programming-using-vscode-editor</id><content type="html" xml:base="https://che.eclipseprojects.io/2022/04/01/@florent.benoit-pair-programming-using-vscode-editor.html"><![CDATA[<div class="paragraph">
<p>One of Eclipse Che most requested feature is to be able to do pair programming.</p>
</div>
<div class="paragraph">
<p>This blog post describes how it is possible to achieve that by using <a href="https://open-vsx.org/extension/genuitecllc/codetogether">CodeTogether</a>, a third-party VS Code extension.</p>
</div>
<div class="paragraph">
<p>There are different pricing plans available for this extension, but there is one free item when connecting to a maximum of 60 minutes and 3 shares which may be enough for most use cases.</p>
</div>
<div class="paragraph">
<p>This is only possible using Eclipse Che starting with 7.46+ and using Visual Studio Code editor, not Che-Theia.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/pair-programming-vscode/pair-programming-vscode.gif" alt="Pair programming using Che">
</div>
</div>
<div class="sect1">
<h2 id="_quick-start-from-an-example">Quick start from an example</h2>
<div class="sectionbody">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Go to Eclipse Che dashboard page. The URL looks like <a href="https://eclipse-che-my-instance.com/dashboard/#/" class="bare">https://eclipse-che-my-instance.com/dashboard/#/</a></p>
</li>
<li>
<p>Replace the last part of the URL containing <code>/dashboard/#</code> with <code>#https://github.com/benoitf/codetogether-che-petclinic</code> and press enter.</p>
</li>
<li>
<p>A workspace starts and Visual Studio Code loads with a sample based on the <code>Petclinic</code> application.</p>
</li>
<li>
<p>As <a href="https://open-vsx.org/extension/genuitecllc/codetogether">CodeTogether</a> is a recommended extension, accept the prompt asking to install this extension.</p>
</li>
<li>
<p>CodeTogether will ask to access Visual Studio Code, click on <code>No</code></p>
</li>
<li>
<p>A new prompt will ask to redirect port 1593: Click on <code>No</code></p>
</li>
<li>
<p>Open the command palette (pressing <code>F1</code> for example) and select <code>CodeTogether: Start Hosting Session</code></p>
</li>
<li>
<p>Keep the defaults for all properties and click on the <code>start</code> button</p>
</li>
<li>
<p>A <code>Pair programming</code> link is then available in the clipboard.</p>
</li>
<li>
<p>You can share this link with your team members. They will be able to join your workspace.</p>
</li>
<li>
<p>It is possible to use this link to join from different IDEs or from a running Eclipse Che workspace (like the one we are using). To do that select 'CodeTogether: Join Session' rather than starting a new session.</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_enabling-pair-programming-settings-on-your-own-example">Enabling pair programming settings on your own example</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In the previous section, a pre-configured repository was used but it is also possible to use your own git repository.</p>
</div>
<div class="paragraph">
<p>This feature works only with Visual Studio Code IDE (not for example with Che-Theia).</p>
</div>
<div class="sect2">
<h3 id="_use-visual-studio-code-as-the-ide-of-an-eclipse-che-workspace">Use Visual Studio Code as the IDE of an Eclipse Che workspace</h3>
<div class="paragraph">
<p>There are 2 ways to use Visual Studio Code IDE in a Che workspace:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Add <code>?che-editor=che-incubator/che-code/insiders</code> at the end of the workspace URL</p>
</li>
<li>
<p>Add a <code>.che/che-editor.yaml</code> file with the following content:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">id</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">che-incubator/che-code/insiders</span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_recommend-the-installation-of-codetogether">Recommend the installation of CodeTogether</h3>
<div class="paragraph">
<p>Include CodeTogether among the recommended extension.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Create the file <code>.vscode/extensions.json</code> with the following content:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="json"><span style="color: #f8f8f2">  </span><span style="color: #f8f8f2;background-color: #49483e">{</span><span style="color: #f8f8f2">
    </span><span style="color: #f8f8f2;font-weight: bold">"recommendations"</span><span style="color: #f8f8f2;background-color: #49483e">:</span><span style="color: #f8f8f2"> </span><span style="color: #f8f8f2;background-color: #49483e">[</span><span style="color: #f8f8f2">
      </span><span style="color: #e6db74">"genuitecllc.codetogether"</span><span style="color: #f8f8f2;background-color: #49483e">,</span><span style="color: #f8f8f2">
    </span><span style="color: #f8f8f2;background-color: #49483e">]</span><span style="color: #f8f8f2">
  </span><span style="color: #f8f8f2;background-color: #49483e">}</span></code></pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>That will trigger a prompt to install CodeTogether at workspace startup.</p>
</div>
</div>
<div class="sect2">
<h3 id="_add-a-devfile">Add a Devfile</h3>
<div class="paragraph">
<p>If you don&#8217;t have a Devfile at the root of your repository you should add one with a <a href="https://github.com/devfile/developer-images/">Universal Developer Image</a> component (it includes the most popular development tools and languages).</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Create a <code>.devfile.yaml</code> file with the following content:</p>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">schemaVersion</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2.1.0</span>
<span style="color: #a6e22e">metadata</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">my-workspace</span>
<span style="color: #a6e22e">components</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
  <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">tools</span>
    <span style="color: #a6e22e">container</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">image</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">quay.io/devfile/universal-developer-image:ubi8-0e189d9</span>
      <span style="color: #a6e22e">memoryLimit</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">3Gi</span></code></pre>
</div>
</div>
</li>
<li>
<p>Do not forget to update the <code>name</code> attribute of the devfile to match your project.</p>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="_share-your-workspace">Share your workspace</h3>
<div class="paragraph">
<p>Once you have committed these changes on a repository, you can share your workspace URL with your team.</p>
</div>
<div class="paragraph">
<p>The URL looks like this: <code><a href="https://eclipse-che-my-instance.com#https://github.com/&lt;your-repository&gt" class="bare">https://eclipse-che-my-instance.com#https://github.com/&lt;your-repository&gt</a>;</code></p>
</div>
<div class="paragraph">
<p>Or to share the pair-programming link, start your workspace first and then start a CodeTogether session.</p>
</div>
</div>
</div>
</div>]]></content><author><name>Florent Benoit</name></author><summary type="html"><![CDATA[How to do pair programming using a VS Code extension.]]></summary></entry><entry><title type="html">Reviewing pull requests</title><link href="https://che.eclipseprojects.io/2022/02/16/@david.kwon-reviewing-pull-requests.html" rel="alternate" type="text/html" title="Reviewing pull requests" /><published>2022-02-16T00:00:00+00:00</published><updated>2022-02-16T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2022/02/16/@david.kwon/reviewing-pull-requests</id><content type="html" xml:base="https://che.eclipseprojects.io/2022/02/16/@david.kwon-reviewing-pull-requests.html"><![CDATA[<div class="paragraph">
<p>Reviewing pull requests for a GitHub project integrated with Eclipse&#160;Che.</p>
</div>
<div class="sect1">
<h2 id="_demo-video">Demo Video</h2>
<div class="sectionbody">
<div class="videoblock">
<div class="content">
<iframe width="480" height="270" src="https://www.youtube.com/embed/GpxdvDkMWlU?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_using-eclipseche-to-review-pull-requests">Using Eclipse&#160;Che to review pull requests</h2>
<div class="sectionbody">
<div class="paragraph">
<p>With Google Chrome, Eclipse&#160;Che makes it possible to review a pull request (PR) without setting up runtimes, build tools, or any extra software on the local machine.</p>
</div>
<div class="paragraph">
<p>This blog post will showcase the typical workflow of reviewing PRs of a GitHub project that is well-integrated with Eclipse Che. Here is the GitHub project used in this blog post: <a href="https://github.com/che-incubator/quarkus-api-example">www.github.com/che-incubator/quarkus-api-example</a>.</p>
</div>
<div class="paragraph">
<p>You can refer to these articles on how to set up your project with Eclipse&#160;Che:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="../../01/11/@ilya.buziuk-contributing-for-the-first-time-to-a-project.html#set-up-project">How can maintainers set up their projects to use Eclipse Che?</a></p>
</li>
<li>
<p><a href="https://www.eclipse.org/che/docs/che-7/end-user-guide/authoring-devfiles-version-2">Authoring a devfile v2</a></p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Your project must contain a well-defined <code>devfile.yaml</code> file to make the most out of your development experience with Eclipse&#160;Che. Use the devfile to define your project’s development environment such as development commands, containers, endpoints, and so on.
</td>
</tr>
</table>
</div>
<div class="admonitionblock warning">
<table>
<tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
The following scenario uses devfile v2, and Eclipse&#160;Che is deployed alongside the DevWorkspace engine which is currently not used on <a href="https://workspaces.openshift.com/">Eclipse Che Hosted by Red Hat</a>. To open the test GitHub project on Eclipse Che Hosted by Red Hat, please use the <a href="https://github.com/che-incubator/quarkus-api-example/tree/devfilev1">devfilev1</a> branch which supports the deprecated devfile v1.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_the-scenario">The scenario</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Imagine that you&#8217;re developing a REST API with Quarkus that interacts with <code>Food</code> resources from a PostgreSQL database.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="java"><span style="color: #75715e;font-style: italic">/* Food.java */</span>

<span style="color: #a6e22e;font-weight: bold">@Entity</span>
<span style="color: #66d9ef;font-weight: bold">public</span> <span style="color: #66d9ef;font-weight: bold">class</span> <span style="color: #a6e22e;font-weight: bold">Food</span> <span style="color: #66d9ef;font-weight: bold">extends</span> <span style="color: #a6e22e;font-weight: bold">PanacheEntity</span> <span style="color: #f92672;font-weight: bold">{</span>

    <span style="color: #a6e22e;font-weight: bold">@Column</span><span style="color: #f92672;font-weight: bold">(</span><span style="color: #f8f8f2;background-color: #49483e">length</span> <span style="color: #f92672;font-weight: bold">=</span> <span style="color: #ae81ff">40</span><span style="color: #f92672;font-weight: bold">)</span>
    <span style="color: #66d9ef;font-weight: bold">public</span> <span style="color: #a6e22e;font-weight: bold">String</span> <span style="color: #f8f8f2;background-color: #49483e">name</span><span style="color: #f92672;font-weight: bold">;</span>

    <span style="color: #a6e22e;font-weight: bold">@Column</span><span style="color: #f92672;font-weight: bold">(</span><span style="color: #f8f8f2;background-color: #49483e">length</span> <span style="color: #f92672;font-weight: bold">=</span> <span style="color: #ae81ff">40</span><span style="color: #f92672;font-weight: bold">)</span>
    <span style="color: #66d9ef;font-weight: bold">public</span> <span style="color: #a6e22e;font-weight: bold">String</span> <span style="color: #f8f8f2;background-color: #49483e">restaurantName</span><span style="color: #f92672;font-weight: bold">;</span>

    <span style="color: #66d9ef;font-weight: bold">public</span> <span style="color: #66d9ef;font-weight: bold">double</span> <span style="color: #f8f8f2;background-color: #49483e">price</span><span style="color: #f92672;font-weight: bold">;</span>

<span style="color: #f92672;font-weight: bold">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In the current state of the project, there are four endpoints:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Method</th>
<th class="tableblock halign-left valign-top">Endpoint</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GET</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>/food</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Lists all Food resources</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GET</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>/food/{id}</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Retrieves the Food resource with the specified ID</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GET</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>/food/search/{name}</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Retrieves a Food resource with the specified name</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>POST</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>/food</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates a Food resource</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>It looks like your colleague has opened a new PR that adds a new <code>GET</code> endpoint, <code>/food/restaurant/{restaurantName}</code>. The endpoint retrieves a list of all <code>Food</code> resources served from a specified restaurant:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/reviewing-pull-requests/pr.png" alt="The pull request to review">
</div>
</div>
<div class="paragraph">
<p>Figure 1: The GitHub PR you need to review.</p>
</div>
<div class="paragraph">
<p>Review this PR by launching a new Eclipse&#160;Che workspace. Here you can verify the PR by running unit tests, running the application, accessing the endpoint, and building the application, all within your web browser.</p>
</div>
<div class="paragraph">
<p>Start the workspace and Web IDE editor on <a href="https://www.eclipse.org/che/docs/che-7/hosted-che/hosted-che/">Eclipse Che Hosted by Red Hat</a> by clicking the Eclipse&#160;Che badge from the base GitHub repository&#8217;s <code>README</code>:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/reviewing-pull-requests/badge.png" alt="Badge used to start workspaces">
</div>
</div>
<div class="paragraph">
<p>Figure 2: Clicking on a badge from the base repository&#8217;s <code>README.md</code> launches a developer workspace.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_launching-a-workspace-and-reviewing-the-pr">Launching a workspace and reviewing the PR</h2>
<div class="sectionbody">
<div class="imageblock">
<div class="content">
<img src="/assets/img/reviewing-pull-requests/ide.png" alt="The Che-theia editor">
</div>
</div>
<div class="paragraph">
<p>Figure 3: The Che-Theia editor.</p>
</div>
<div class="paragraph">
<p>After you start the workspace, the web IDE will open automatically and you&#8217;ll see that the project has been cloned already (see the Explorer view on the left-hand side).</p>
</div>
<div class="paragraph">
<p>To use the <a href="https://github.com/Microsoft/vscode-pull-request-github">GitHub Pull Requests and Issues</a> extension, you must first authenticate with GitHub by clicking on the Accounts icon on the bottom left of the editor. The extension adds the GitHub view to the sidebar and provides integration with GitHub. As a result, you can make PR comments, in-editor comments, approve PRs, and much more, all from the web IDE.</p>
</div>
<div class="paragraph">
<p>Click on "Sign in to user GitHub Pull Requests and Issues (1)".
You will be prompted to enter your GitHub credentials to sign in.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/reviewing-pull-requests/sign-in.png" alt="The context menu appears after clicking the Accounts icon" width="600">
</div>
</div>
<div class="paragraph">
<p>Figure 4: The menu appears after clicking the Accounts icon.</p>
</div>
<div class="paragraph">
<p>After signing in, navigate to the GitHub view from the sidebar to see an overview of PRs against the base repository. Under the "Assigned To Me" drop-down, you can see the PR that you&#8217;ll review.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/reviewing-pull-requests/github-view.png" alt="Viewing the PR within the web IDE" width="400">
</div>
</div>
<div class="paragraph">
<p>Figure 5: The GitHub view, opened by clicking on the fifth icon from the top.</p>
</div>
<div class="admonitionblock warning">
<table>
<tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
If you start a workspace with a badge generated using the <a href="https://github.com/marketplace/actions/try-in-web-ide">Try in Web IDE</a> GitHub action on a PR from a forked repository, you must manually set up Git remotes to use the GitHub Pull Requests and Issues extension. Please see <a href="https://github.com/redhat-actions/try-in-web-ide/issues/14">redhat-actions/try-in-web-ide#14</a>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The "Description" menu item, as well as a file hierarchy with all changed files, are in the drop-down menu below the PR. In this case, the changed files are <code>FoodResource.java</code>, <code>FoodEndpointTest.java</code>, and <code>README.md</code>. Click on the files to open a diff view within the web IDE. Examine these files and verify that the PR adds a new endpoint, as well as a unit test.</p>
</div>
<div class="paragraph">
<p>Click on the "Description" menu item to open a new web view displaying the PR in a UI similar to GitHub. Check out the branch by clicking "Checkout" at the top right of Figure 6.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/reviewing-pull-requests/pr-view.png" alt="Viewing the PR within the web IDE">
</div>
</div>
<div class="paragraph">
<p>Figure 6: A webview displaying details about the PR. This web view appears after clicking the "Description" menu item from Figure 5.</p>
</div>
<div class="paragraph">
<p>The test project includes a preinstalled <a href="https://github.com/redhat-developer/vscode-java">Language support for Java ™</a> extension in the web IDE. With this extension, you can check the Problem view to verify that there are no compilation problems such as syntax errors.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/reviewing-pull-requests/no-problems.png" alt="No problems reported by the Java extension">
</div>
</div>
<div class="paragraph">
<p>Figure 7: No problems reported by the Java extension in the Problems view.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_running-unit-tests-and-building">Running unit tests and building</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The devfile also defines commands for testing, building, and launching the application. Run the unit tests by opening the Workspace view from the right side and clicking <code>(User Runtimes &#8594; tools &#8594; runtests)</code>.</p>
</div>
<div class="paragraph">
<p>This runs the test command (<code>./mvnw test</code>) within the <code>tools</code> container as specified in the devfile. You can view the test output in the output panel.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/reviewing-pull-requests/run-tests.png" alt="Running the unit tests">
</div>
</div>
<div class="paragraph">
<p>Figure 8: Unit testing by clicking <code>runtests</code> from the Workspace view on the right.</p>
</div>
<div class="paragraph">
<p>As you can see in the output from Figure 8, you passed the tests successfully.</p>
</div>
<div class="paragraph">
<p>You can also run other commands such as <code>(User Runtimes &#8594; tools &#8594; package)</code> to build the application.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/reviewing-pull-requests/build.png" alt="Successfully building the application">
</div>
</div>
<div class="paragraph">
<p>Figure 9: Successfully building the application.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
The <code>packagenative</code> command is used to build a native image with GraalVM. The command would fail for this test project on <a href="https://www.eclipse.org/che/docs/che-7/hosted-che/hosted-che/">Eclipse Che Hosted by Red Hat</a> due to the 7GB memory usage limit.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_running-the-application">Running the application</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Run the Quarkus application in <a href="https://quarkus.io/guides/getting-started#development-mode">development mode</a> by running the <code>(User Runtimes &#8594; tools &#8594; startdev)</code> command to access the endpoint.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/reviewing-pull-requests/start-dev.png" alt="Starting the application in development mode">
</div>
</div>
<div class="paragraph">
<p>Figure 10: Starting the Quarkus project in development mode by clicking <code>startdev</code> from the Workspace view on the right.</p>
</div>
<div class="paragraph">
<p>Next, access the new <code>/food/restaurant/{restaurantName}</code> endpoint. Here, you access <code>/food/restaurant/Local Deli</code> to get all <code>Food</code> resources from the restaurant named <code>Local Deli</code>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/reviewing-pull-requests/access-endpoint.png" alt="Accessing the new endpoint">
</div>
</div>
<div class="paragraph">
<p>Figure 11: Response from <code>/food/restaurant/Local Deli</code>.</p>
</div>
<div class="paragraph">
<p>The response contains two <code>Food</code> resources from the <code>Local Deli</code> restaurant. This is a match with the <code>Food</code> resources from this restaurant in the <a href="https://github.com/che-incubator/quarkus-api-example/blob/main/src/main/resources/import.sql"><code>import.sql</code></a> file.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_providing-feedback-and-merging-the-pr">Providing feedback and merging the PR</h2>
<div class="sectionbody">
<div class="paragraph">
<p>So far, you have successfully run tests, ran the build, as well as ran the application in development mode to verify that the PR is working correctly.
Next, merge the PR from the web IDE.</p>
</div>
<div class="paragraph">
<p>Go back to the GitHub PR view (see Figure 5) to provide more comments, and approve the PR. Merge the PR to <code>main</code>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/reviewing-pull-requests/merge.png" alt="Merging to main from the web IDE">
</div>
</div>
<div class="paragraph">
<p>Figure 12: Clicking "Merge Pull Request" to merge.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/reviewing-pull-requests/merged.png" alt="Merged to main from the web IDE">
</div>
</div>
<div class="paragraph">
<p>Figure 13: PR has been merged.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You have finished reviewing the PR and have successfully merged it from the web IDE editor.
In summary, we have:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Opened a new Eclipse&#160;Che workspace to review the PR</p>
</li>
<li>
<p>Checked out the feature branch</p>
</li>
<li>
<p>Ran the unit tests</p>
</li>
<li>
<p>Built the application</p>
</li>
<li>
<p>Ran the application in development mode to verify that the feature works as intended</p>
</li>
<li>
<p>Used the GitHub Pull Requests and Issues extension and the Language support for Java ™ extension</p>
</li>
<li>
<p>Merged the PR from the web IDE</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>without any prior setup on your local machine.</p>
</div>
<div class="paragraph">
<p>Thank you for reading!</p>
</div>
</div>
</div>]]></content><author><name>David Kwon</name></author><summary type="html"><![CDATA[Reviewing pull requests with Eclipse Che.]]></summary></entry><entry><title type="html">Contributing for the first time to a project</title><link href="https://che.eclipseprojects.io/2022/01/11/@ilya.buziuk-contributing-for-the-first-time-to-a-project.html" rel="alternate" type="text/html" title="Contributing for the first time to a project" /><published>2022-01-11T00:00:00+00:00</published><updated>2022-01-11T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2022/01/11/@ilya.buziuk/contributing-for-the-first-time-to-a-project</id><content type="html" xml:base="https://che.eclipseprojects.io/2022/01/11/@ilya.buziuk-contributing-for-the-first-time-to-a-project.html"><![CDATA[<div class="sect2">
<h3 id="_introduction">Introduction</h3>
<div class="paragraph">
<p>The complexity of applications has changed dramatically over the last decade, and nowadays it is not always straightforward to contribute to a new project for the first time.
At the beginning, developers need to properly set up the local environment including:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>build tools</p>
</li>
<li>
<p>runtimes</p>
</li>
<li>
<p>dependencies</p>
</li>
<li>
<p>IDEs</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For complex projects, it could easily take weeks for new developers to get the builds running on their machines.
In general, a significant amount of the team&#8217;s week is spent on building and maintaining developer environments.
With Eclipse&#160;Che we are solving the complexity of the onboarding, configuration, and setup by defining a new cloud-native, zero-install, and repeatable concept of a workspace.</p>
</div>
</div>
<div class="sect2">
<h3 id="_contributing-for-the-first-time-to-a-project-using-eclipseche">Contributing for the first time to a project using Eclipse&#160;Che</h3>
<div class="paragraph">
<p>The motto of Eclipse&#160;Che is that anyone anytime can contribute to a project without installing software.
In order to contribute to a project, just click on the badge defined in the <code>README.md</code> file of the repository, and within a minute you will get a workspace ready for development with all the tools and runtimes available out of the box.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/contribute-to-a-project/contribute.png" alt="Contribute Badge">
</div>
<div class="title">Figure 1. The Eclipse&#160;Che contribute badge in <code>README.md</code></div>
</div>
<div class="paragraph">
<p></p>
</div>
<div class="paragraph">
<p>By default, Eclipse&#160;Che is using a customized version of <a href="https://theia-ide.org/">Theia</a>, which provides <a href="https://code.visualstudio.com/">VS Code</a>-like experience including the support of extensions:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/contribute-to-a-project/ide.png" alt="Eclipse&#160;Che Theia IDE">
</div>
<div class="title">Figure 2. Eclipse&#160;Che Theia IDE</div>
</div>
<div class="paragraph">
<p></p>
</div>
<div class="paragraph">
<p>Programming languages facilities like code completion, navigation, and CodeLens are provided using the <a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a>. Eclipse&#160;Che benefits from a growing ecosystem of over 60 available language servers, delivering intelligent editing support for all major programming languages.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/contribute-to-a-project/content-assist.png" alt="Content Assist">
</div>
<div class="title">Figure 3. Java Content Assist</div>
</div>
<div class="paragraph">
<p></p>
</div>
<div class="paragraph">
<p>Pre-defined commands (<code>Terminal</code> &#8594; <code>Run Task&#8230;&#8203;</code>) allow you to easily build, run, debug, and test the application.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/contribute-to-a-project/commands.png" alt="IDE Commands">
</div>
<div class="title">Figure 4. Pre-defined commands</div>
</div>
<div class="paragraph">
<p></p>
</div>
<div class="paragraph">
<p>Additional extensions can be enabled by using the <code>Ctrl+Shift+J</code> shortcut or <code>View</code> &#8594; <code>Plugins</code> menu items:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/contribute-to-a-project/plugins.png" alt="The 'Plugins' view">
</div>
<div class="title">Figure 5. The 'Plugins' view</div>
</div>
<div class="paragraph">
<p></p>
</div>
<div class="paragraph">
<p>Debug the application by using the <code>F5</code> shortcut or <code>Run</code> &#8594; <code>Start Debugging</code> menu items:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/contribute-to-a-project/debug.png" alt="Debugging the application">
</div>
<div class="title">Figure 6. Debugging Java application</div>
</div>
<div class="paragraph">
<p></p>
</div>
<div class="paragraph">
<p>Commit and push the changes from the terminal or use the <code>Source Control</code> view:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/contribute-to-a-project/source-control.png" alt="[The 'Source Control' view">
</div>
<div class="title">Figure 7. The 'Source Control' view</div>
</div>
<div class="paragraph">
<p></p>
</div>
<div class="paragraph">
<p>Now you are ready for the first contribution. For GitHub, a dedicated plugin is available that allows opening pull requests right from the IDE:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/assets/img/contribute-to-a-project/github-plugin.png" alt="[The 'GitHub' plugin">
</div>
<div class="title">Figure 8. The 'GitHub' plugin</div>
</div>
<div class="paragraph">
<p></p>
</div>
</div>
<div class="sect2">
<h3 id="set-up-project">How can maintainers set up their projects to use Eclipse&#160;Che?</h3>
<div class="ulist">
<ul>
<li>
<p>Deploy Eclipse&#160;Che on a Kubernetes cluster or use <a href="https://workspaces.openshift.com/">Eclipse Che hosted by Red Hat</a>.</p>
</li>
</ul>
</div>
<div class="admonitionblock warning">
<table>
<tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
At the moment, <a href="https://workspaces.openshift.com/">Eclipse Che hosted by Red Hat</a> does not use the DevWorkspace Operator that is in charge of the devfile v2 support.
The switch to the DevWorkspace engine is planned for spring 2022.
Currently, devfiles v2 are automatically converted to devfile v1 equivalents via the <a href="https://github.com/che-incubator/devfile-converter">converter library</a> under the hood during workspace startup.
</td>
</tr>
</table>
</div>
<div class="listingblock">
<div class="title">The recommended file structure of the repository</div>
<div class="content">
<pre>  |--- devfile.yaml
  |--- README.md
  |___ .che
         |___ che-editor.yaml
         |___ che-theia-plugins.yaml
  |___ .vscode
         |___ extensions.json
         |___ launch.json</pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Add <code>.devfile.yaml</code> or <code>devfile.yaml</code> file to the root of the project in order to specify the relevant components and commands in a declarative way.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The devfile provides easy to configure, highly reproducible definitions of portable developer environments.
For more information about devfiles, see the <a href="https://devfile.io/">Devfile Documentation</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Omitting the creation of the devfile file will result in using a default container based on the <a href="https://quay.io/repository/devfile/universal-developer-image">Universal Developer Image</a>,
which provides various languages (including Java, Node.js, Python, PHP, Golang, etc) and tools (including <code>curl</code>, <code>jq</code>, <code>git</code>, etc).
</td>
</tr>
</table>
</div>
<div class="ulist">
<ul>
<li>
<p>Add the <code>.vscode/extensions.json</code> file to the root of the project in order to add VS Code extensions if the editor is Theia (the default) or VS Code:</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="json"><span style="color: #f8f8f2;background-color: #49483e">{</span><span style="color: #f8f8f2">
  </span><span style="color: #f8f8f2;font-weight: bold">"recommendations"</span><span style="color: #f8f8f2;background-color: #49483e">:</span><span style="color: #f8f8f2"> </span><span style="color: #f8f8f2;background-color: #49483e">[</span><span style="color: #f8f8f2">
    </span><span style="color: #e6db74">"redhat.java"</span><span style="color: #f8f8f2">
  </span><span style="color: #f8f8f2;background-color: #49483e">]</span><span style="color: #f8f8f2">
</span><span style="color: #f8f8f2;background-color: #49483e">}</span></code></pre>
</div>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<div class="title">Important</div>
</td>
<td class="content">
The list of VS Code extensions is available in the Eclipse&#160;Che plug-in registry.
If the specified extensions are not available in the registry, the workspace will start, but the extensions will not be added to the workspace.
</td>
</tr>
</table>
</div>
<div class="ulist">
<ul>
<li>
<p>Add the <code>.vscode/launch.json</code> file for specifying <code>Run</code> and <code>Debug</code> commands if the editor is Theia or VS Code:</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="json"><span style="color: #f8f8f2;background-color: #49483e">{</span><span style="color: #f8f8f2">
    </span><span style="color: #f8f8f2;font-weight: bold">"version"</span><span style="color: #f8f8f2;background-color: #49483e">:</span><span style="color: #f8f8f2"> </span><span style="color: #e6db74">"0.2.0"</span><span style="color: #f8f8f2;background-color: #49483e">,</span><span style="color: #f8f8f2">
    </span><span style="color: #f8f8f2;font-weight: bold">"configurations"</span><span style="color: #f8f8f2;background-color: #49483e">:</span><span style="color: #f8f8f2"> </span><span style="color: #f8f8f2;background-color: #49483e">[</span><span style="color: #f8f8f2">
        </span><span style="color: #f8f8f2;background-color: #49483e">{</span><span style="color: #f8f8f2">
            </span><span style="color: #f8f8f2;font-weight: bold">"type"</span><span style="color: #f8f8f2;background-color: #49483e">:</span><span style="color: #f8f8f2"> </span><span style="color: #e6db74">"java"</span><span style="color: #f8f8f2;background-color: #49483e">,</span><span style="color: #f8f8f2">
            </span><span style="color: #f8f8f2;font-weight: bold">"name"</span><span style="color: #f8f8f2;background-color: #49483e">:</span><span style="color: #f8f8f2"> </span><span style="color: #e6db74">"Debug (Attach) - Remote"</span><span style="color: #f8f8f2;background-color: #49483e">,</span><span style="color: #f8f8f2">
            </span><span style="color: #f8f8f2;font-weight: bold">"request"</span><span style="color: #f8f8f2;background-color: #49483e">:</span><span style="color: #f8f8f2"> </span><span style="color: #e6db74">"attach"</span><span style="color: #f8f8f2;background-color: #49483e">,</span><span style="color: #f8f8f2">
            </span><span style="color: #f8f8f2;font-weight: bold">"hostName"</span><span style="color: #f8f8f2;background-color: #49483e">:</span><span style="color: #f8f8f2"> </span><span style="color: #e6db74">"localhost"</span><span style="color: #f8f8f2;background-color: #49483e">,</span><span style="color: #f8f8f2">
            </span><span style="color: #f8f8f2;font-weight: bold">"port"</span><span style="color: #f8f8f2;background-color: #49483e">:</span><span style="color: #f8f8f2"> </span><span style="color: #ae81ff">5005</span><span style="color: #f8f8f2">
        </span><span style="color: #f8f8f2;background-color: #49483e">}</span><span style="color: #f8f8f2">
    </span><span style="color: #f8f8f2;background-color: #49483e">]</span><span style="color: #f8f8f2">
</span><span style="color: #f8f8f2;background-color: #49483e">}</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Add the <code>.che/che-theia-plugins.yaml</code> file if extra customizations of Theia plugins are required.</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Eclipse&#160;Che uses <code>.che/che-theia-plugins.yaml</code> file only if the editor is Theia.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>For example, overriding the default memory limit of <code>redhat.java</code> sidecar container:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">id</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">redhat/java</span>
  <span style="color: #a6e22e">override</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #a6e22e">sidecar</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
      <span style="color: #a6e22e">memoryLimit</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">2Gi</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Add the <code>.che/che-editor.yaml</code> file to override the default editor (Theia) with a different one (e.g. VS Code or JetBrains IntelliJ) and specify the editor container properties. For example, overriding the default memory limit of the <code>theia-ide</code> container:</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #f8f8f2;background-color: #49483e"><code data-lang="yaml"><span style="color: #a6e22e">id</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">eclipse/che-theia/latest</span>          <span style="color: #75715e;font-style: italic"># mandatory</span>
<span style="color: #a6e22e">registryUrl</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">https://my-registry.com</span>  <span style="color: #75715e;font-style: italic"># optional</span>
<span style="color: #a6e22e">override</span><span style="color: #f8f8f2;background-color: #49483e">:</span>                             <span style="color: #75715e;font-style: italic"># optional</span>
  <span style="color: #a6e22e">containers</span><span style="color: #f8f8f2;background-color: #49483e">:</span>
    <span style="color: #f8f8f2;background-color: #49483e">-</span> <span style="color: #a6e22e">name</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">theia-ide</span>
      <span style="color: #a6e22e">memoryLimit</span><span style="color: #f8f8f2;background-color: #49483e">:</span> <span style="color: #e6db74">1280Mi</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Add the Eclipse&#160;Che badge to the project <code>README.md</code> file with a link for starting a workspace:</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="https://www.eclipse.org/che/contribute.svg" alt="Contribute Badge">
</div>
<div class="title">Figure 9. The official Eclipse&#160;Che badge</div>
</div>
<div class="paragraph">
<p></p>
</div>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p><code>[![Contribute](<a href="https://www.eclipse.org/che/contribute.svg" class="bare">https://www.eclipse.org/che/contribute.svg</a>)](https://che-host#https://github.com/my/repository)</code></p>
</div>
</div>
</div>
<div class="paragraph">
<p>Once the line above is added to the <code>README.md</code>, it will be possible to start a workspace by simply clicking on the badge icon.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Eclipse&#160;Che images from <a href="https://simpleicons.org/?q=eclipse-che">Simple Icons</a> can be also used for generation of the custom badges via <a href="https://shields.io/">Shields IO</a>.
</td>
</tr>
</table>
</div>
<div class="listingblock">
<div class="content">
<pre>https://img.shields.io/static/v1?label=eclipse&amp;message=che&amp;logo=eclipseche
https://img.shields.io/static/v1?label=code%20with&amp;message=che&amp;logo=eclipseche&amp;color=FDB940&amp;labelColor=525C86
https://img.shields.io/static/v1?label=eclipse&amp;message=che&amp;logo=eclipseche&amp;color=FDB940&amp;labelColor=525C86&amp;style=plastic
https://img.shields.io/static/v1?label=eclipse&amp;message=che&amp;logo=eclipseche&amp;color=FDB940&amp;labelColor=525C86&amp;style=flat-square
https://img.shields.io/static/v1?label=eclipse&amp;message=che&amp;logo=eclipseche&amp;style=social</pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="https://img.shields.io/static/v1?label=eclipse&message=che&logo=eclipseche" alt="Contribute Badge">
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="https://img.shields.io/static/v1?label=code%20with&message=che&logo=eclipseche&color=FDB940&labelColor=525C86" alt="Contribute Badge">
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="https://img.shields.io/static/v1?label=eclipse&message=che&logo=eclipseche&color=FDB940&labelColor=525C86&style=plastic" alt="Contribute Badge">
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="https://img.shields.io/static/v1?label=eclipse&message=che&logo=eclipseche&color=FDB940&labelColor=525C86&style=flat-square" alt="Contribute Badge">
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="https://img.shields.io/static/v1?label=eclipse&message=che&logo=eclipseche&style=social" alt="Contribute Badge">
</div>
</div>
<div class="paragraph">
<p></p>
</div>
<div class="ulist">
<ul>
<li>
<p>Set up <a href="https://github.com/marketplace/actions/try-in-web-ide">Try in Web IDE</a> GitHub action in the repository in order to test and review pull requests with Eclipse&#160;Che.
More details about the GitHub action can be found in the <a href="https://che.eclipseprojects.io/2021/10/18/@david.kwon-test-pull-requests-with-the-try-in-web-ide-github-action.html">Test pull requests with the Try in Web IDE GitHub action</a> blog post.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Now you are all set. Happy Coding!</p>
</div>
</div>]]></content><author><name>Ilya Buziuk</name></author><summary type="html"><![CDATA[The article describes how to easily contribute to a project using Eclipse Che]]></summary></entry></feed>